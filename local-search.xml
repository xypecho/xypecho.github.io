<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pinia初体验</title>
    <link href="/2023/02/22/pinia%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2023/02/22/pinia%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<p>vue3推出很长一段时间了，它的周边生态也越来越完善。我们在写vue2时常用vuex最状态管理，在vue3的时代尤大推荐我们用<code>pinia</code>做状态管理。今天我们来看看pinia的简单使用。</p><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>安装</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">yarn <span class="hljs-keyword">add </span>pinia<br><span class="hljs-comment"># 或者使用 npm</span><br>npm <span class="hljs-keyword">install </span>pinia<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">createPinia</span>())<br><br><span class="hljs-comment">// 定义一个 Store</span><br><span class="hljs-comment">// src/stores/counter.ts</span><br><span class="hljs-keyword">import</span> &#123; ref, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pinia&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useCounterStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&#x27;counter&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-comment">// 相当于vuex中的state</span><br>  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br>  <span class="hljs-comment">// 相当于vuex中的getters</span><br>  <span class="hljs-keyword">const</span> doubleCount = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> count.<span class="hljs-property">value</span> * <span class="hljs-number">2</span>)<br>  <span class="hljs-comment">// 这就是vuex中的actions了</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>    count.<span class="hljs-property">value</span>++<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123; count, doubleCount, increment &#125;<br>&#125;)<br><br><span class="hljs-comment">// 在组件中使用</span><br><span class="hljs-comment">// src/App.vue</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; counter.count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleIncrement &quot;</span>&gt;</span>增加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleDecrement&quot;</span>&gt;</span>减少<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useCounterStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/stores/counter&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">useCounterStore</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleIncrement</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  counter.<span class="hljs-title function_">increment</span>();</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">handleDecrement</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  counter.$patch(&#123; <span class="hljs-attr">count</span>: counter.<span class="hljs-property">count</span> - <span class="hljs-number">1</span> &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="hljs-comment">// 在组件外使用</span><br><span class="hljs-comment">// src/router/index.ts</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useCounterStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/stores/counter&quot;</span>;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;)<br><br>router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">useCounterStore</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(counter.<span class="hljs-property">count</span>); <span class="hljs-comment">// 0</span><br>  <span class="hljs-title function_">next</span>() <br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><h3 id="一些语法"><a href="#一些语法" class="headerlink" title="一些语法"></a>一些语法</h3><h4 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h4><p>使用传统的方式将属性从store中解构出来，虽然可以获取到值，但是不具有响应式。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const &#123; <span class="hljs-built_in">count</span>, doubleCount &#125; = counter;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">count</span>, doubleCount); <span class="hljs-comment">// 始终是 0 0</span><br></code></pre></td></tr></table></figure><p>为了从store中解构属性的时候保持其响应式，我们可以使用pinia提供的<code>storeToRefs</code>函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useCounterStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/stores/counter&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; storeToRefs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><br><span class="hljs-keyword">const</span> counter = <span class="hljs-title function_">useCounterStore</span>();<br><span class="hljs-keyword">const</span> &#123; count, doubleCount &#125; = <span class="hljs-title function_">storeToRefs</span>(counter);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count, doubleCount); <span class="hljs-comment">// Ref&lt;0&gt;  ComputedRef&lt;0&gt;</span><br></code></pre></td></tr></table></figure><p>或者使用vue提供的<code>toRefs</code>函数。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pf">import &#123; useCounterStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/stores/counter&quot;</span>;<br>import &#123; <span class="hljs-keyword">to</span>Refs &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-keyword">const</span> counter = useCounterStore();<br><span class="hljs-keyword">const</span> &#123; count, doubleCount &#125; = <span class="hljs-keyword">to</span>Refs(counter);<br>console.<span class="hljs-keyword">log</span>(count, doubleCount); // Ref<span class="hljs-variable">&lt;0&gt;</span>  Ref<span class="hljs-variable">&lt;0&gt;</span><br></code></pre></td></tr></table></figure><h4 id="批量修改store中数据"><a href="#批量修改store中数据" class="headerlink" title="批量修改store中数据"></a>批量修改store中数据</h4><p>除了用 <code>counter.count++</code> 直接改变 store，还可以调用 <code>$patch</code> 方法。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xquery">counter.<span class="hljs-variable">$patch</span>(&#123;<br> <span class="hljs-built_in"> name</span>: <span class="hljs-string">&quot;666&quot;</span>,<br> <span class="hljs-built_in"> count</span>: <span class="hljs-number">888</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>不过，用这种语法的话，向数组中添加、移除一个元素操作很难实现，因此，<code>$patch</code> 方法也接受一个函数来组合这种难以用补丁对象实现的变更。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pf">counter.<span class="hljs-variable">$patch</span>((<span class="hljs-keyword">state</span>) =&gt; &#123;<br>  <span class="hljs-keyword">state</span>.count = <span class="hljs-number">666</span>;<br>  <span class="hljs-keyword">state</span>.name = <span class="hljs-string">&quot;aksdkljkl&quot;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="pinia-vs-vuex"><a href="#pinia-vs-vuex" class="headerlink" title="pinia vs vuex"></a>pinia vs vuex</h3><ul><li>pinia拥有更简洁的语法，取消了<code>mutations</code>，只有三个概念，state、getter和 action，相当于组件中的 data、 computed 和 methods</li></ul>]]></content>
    
    
    <categories>
      
      <category>分享发现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享发现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UnoCSS使用指南</title>
    <link href="/2023/02/18/UnoCSS%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2023/02/18/UnoCSS%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<blockquote><p>原子化 CSS 是一种 CSS 的架构方式，它倾向于小巧且用途单一的 class，并且会以视觉效果进行命名。</p></blockquote><p>看的一脸懵逼是不是，刚开始俺也一样。<br>第一次见还是在大佬代码里看到的，一堆<code>text-14px c-flex</code>类似的类。以为是自己定义的属性，全局搜了下发现是使用了<code>UnoCSS</code>。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i -D unocss @unocss/webpack @unocss/cli<br></code></pre></td></tr></table></figure><p>@unocss&#x2F;webpack用于webpack项目可以使用unocss。<br>@unocss&#x2F;cli则是unocss的脚手架，可以实现监听文件实时增减对应的class。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>以下示例代码均基于vue3.x ＋ webpack</p><p>首先在package.json新增脚本</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-comment">// package.json</span><br>  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;unocss&quot;</span>: <span class="hljs-string">&quot;unocss \&quot;</span>src<span class="hljs-comment">/**/</span>*.vue\<span class="hljs-string">&quot; -w -m false -o src/common/css/unocss.css&quot;</span><br>  &#125;,<br></code></pre></td></tr></table></figure><p>在main.js中引入</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;@/common/css/unocss.css&#x27;</span>;<br></code></pre></td></tr></table></figure><p>在项目根目录下创建文件<code>unocss.config.js</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">// unocss.config.js</span><br><span class="hljs-title class_">import</span> <span class="hljs-punctuation">&#123;</span> defineConfig, presetUno, transformerVariantGroup <span class="hljs-punctuation">&#125;</span> from <span class="hljs-string">&quot;unocss&quot;</span><span class="hljs-punctuation">;</span><br>export default defineConfig(<span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-comment">// 给unocss的class加命名空间，当匹配到c-开头的class时自动进行处理</span><br>  preprocess(matcher) <span class="hljs-punctuation">&#123;</span><br>    return matcher.startsWith(<span class="hljs-string">&quot;c-&quot;</span>) ? matcher.slice(<span class="hljs-number">2</span>) : <span class="hljs-attr">undefined</span><span class="hljs-punctuation">;</span><br>  <span class="hljs-punctuation">&#125;</span>,<br>  <span class="hljs-comment">// 预设(preset)可以被看作是一组插件或options配置的可共享模块。</span><br><span class="hljs-symbol">  presets:</span> [<br>    <span class="hljs-comment">// 此预设提供Tailwind CSS、Windi CSS、Bootstrap、Tachyons 等class</span><br>    presetUno(),<br>  ],<br>  <span class="hljs-comment">// transformerVariantGroup可以实现class=&quot;hover:bg-gray-400&quot;类似的写法</span><br><span class="hljs-symbol">  transformers:</span> [transformerVariantGroup()],<br>  <span class="hljs-comment">// 组合class，如果使用c-btn类则会应用如下的class样式</span><br><span class="hljs-symbol">  shortcuts:</span> [<br>    <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">      btn:</span> <span class="hljs-string">&quot;box-border block w-220px p:w-280px mx-auto bg-brand/100 leading-20px py-12px text-center text-white/100 overflow-hidden rounded-36px transition-colors&quot;</span>,<br>    <span class="hljs-punctuation">&#125;</span>,<br>  ],<br>  <span class="hljs-comment">// 自定义一些规则</span><br><span class="hljs-symbol">  rules:</span> [[<span class="hljs-string">&quot;bg-full&quot;</span>, <span class="hljs-punctuation">&#123;</span> <span class="hljs-string">&quot;background-size&quot;</span>: <span class="hljs-string">&quot;100% 100%&quot;</span> <span class="hljs-punctuation">&#125;</span>]],<br><span class="hljs-symbol">  theme:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">// 断点，用来实现响应式布局</span><br>    <span class="hljs-comment">// 屏幕宽度&gt;=0是应用c-xs-xxx的class，&gt;=320时应用c-sm-xxx的class。(ps:样式将会被覆盖而不是合并)</span><br><span class="hljs-symbol">    breakpoints:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-symbol">      xs:</span> <span class="hljs-string">&quot;0px&quot;</span>,<br><span class="hljs-symbol">      sm:</span> <span class="hljs-string">&quot;320px&quot;</span>,<br><span class="hljs-symbol">      md:</span> <span class="hljs-string">&quot;640px&quot;</span>,<br>    <span class="hljs-punctuation">&#125;</span>,<br>    <span class="hljs-comment">// 给颜色设置别名</span><br><span class="hljs-symbol">    colors:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-comment">// 如c-text-brand则会应用color:#2D40E9</span><br><span class="hljs-symbol">      dark:</span> <span class="hljs-string">&quot;#000000&quot;</span>,<br><span class="hljs-symbol">      brand:</span> <span class="hljs-string">&quot;#2D40E9&quot;</span>,<br>    <span class="hljs-punctuation">&#125;</span>,<br>  <span class="hljs-punctuation">&#125;</span>,<br><span class="hljs-punctuation">&#125;</span>)<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分享发现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分享发现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue.use的作用及原理</title>
    <link href="/2023/02/15/vue-use%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <url>/2023/02/15/vue-use%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在vue中引入第三方库通常我们都会采用import的形式引入进来，但是有的组件在引入之后又做了Vue.use()操作，有的组件引入进来又进行了<code>vue.prototype.$axios = axios</code>类似的操作，那么它们之间有什么联系呢？ </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 最常见的方式，use后可以全局使用</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>);<br><br><span class="hljs-comment">// 不需要use，但是每次引用需要再次import</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><br>axios<br>  .<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Flintstone&#x27;</span>,<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>  &#125;);<br>  <br><span class="hljs-comment">// 使用vue.component，也可以全局使用</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Pagination</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/components/Pagination&#x27;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;Pagination&#x27;</span>, <span class="hljs-title class_">Pagination</span>);<br><br><span class="hljs-comment">// 挂载到vue的原型，全局使用this.$download使用</span><br><span class="hljs-keyword">import</span> &#123; download &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/index&#x27;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$download</span> = download;<br></code></pre></td></tr></table></figure><h3 id="Vue-use是什么"><a href="#Vue-use是什么" class="headerlink" title="Vue.use是什么"></a>Vue.use是什么</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="Snipaste_2023-02-15_21-02-04.png"></center><p>emmmm，似乎不太好理解？我们来看看源码，Vue.use()后做了哪些事儿。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Vue.use = function (plugin) &#123;<br>  <span class="hljs-comment">// 已安装的插件列表</span><br>  <span class="hljs-keyword">const</span> installedPlugins =<br>    <span class="hljs-keyword">this</span>._installedPlugins || (<span class="hljs-keyword">this</span>._installedPlugins = []);<br>  <span class="hljs-comment">// 阻止多次注册相同的插件</span><br>  <span class="hljs-keyword">if</span> (installedPlugins.indexOf(plugin) &gt; -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>  &#125;<br>  <span class="hljs-comment">// 取出vue.use() 传入的参数并转为数组</span><br>  <span class="hljs-keyword">const</span> args = toArray(arguments, <span class="hljs-number">1</span>);<br>  <span class="hljs-comment">// 将vue对象填充到第一位, 最后的结构为[vue,arg1,arg2,...]</span><br>  args.unshift(<span class="hljs-keyword">this</span>);<br>  <span class="hljs-comment">// 判断插件是否有install方法，如果有执行install方法，如果没有直接把插件当install执行</span><br>  <span class="hljs-keyword">if</span> (isFunction(plugin.install)) &#123;<br>    plugin.install.apply(plugin, args);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isFunction(plugin)) &#123;<br>    plugin.apply(<span class="hljs-literal">null</span>, args);<br>  &#125;<br>  installedPlugins.push(plugin);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>看起来精髓在插件的<code>install</code>方法，那我们来看看执行插件的<code>install</code>后发生了什么？</p><h3 id="install-后发生了什么"><a href="#install-后发生了什么" class="headerlink" title="install 后发生了什么"></a>install 后发生了什么</h3><p>以<code>vue-router</code>为例，来看看</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">install</span> (app) &#123;<br>  <span class="hljs-type">const</span> router = <span class="hljs-keyword">this</span>;<br>  <span class="hljs-comment">// 将RouterLink、RouterView注册为全局组件</span><br>  app.<span class="hljs-built_in">component</span>(<span class="hljs-string">&quot;RouterLink&quot;</span>, RouterLink);<br>  app.<span class="hljs-built_in">component</span>(<span class="hljs-string">&quot;RouterView&quot;</span>, RouterView);<br>  <span class="hljs-comment">// 将$router注册为全局对象，可以使用this.$router访问</span><br>  app.config.globalProperties.$router = router;<br>  Object.<span class="hljs-built_in">defineProperty</span>(app.config.globalProperties, <span class="hljs-string">&quot;$route&quot;</span>, &#123;<br>    enumerable: <span class="hljs-literal">true</span>,<br>    get: () =&gt; <span class="hljs-built_in">unref</span>(currentRoute),<br>  &#125;);<br>  <span class="hljs-type">const</span> reactiveRoute = &#123;&#125;;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> key in START_LOCATION_NORMALIZED) &#123;<br>    reactiveRoute[key] = <span class="hljs-built_in">computed</span>(() =&gt; currentRoute.value[key]);<br>  &#125;<br>  <span class="hljs-comment">// 通过 provide 方式全局注入 router 对象和 reactiveRoute 对象，通过 router 可以动态操作路由，reactiveRoute 是响应式路径对象，维护了当前的路径信息</span><br>  app.<span class="hljs-built_in">provide</span>(routerKey, router);<br>  app.<span class="hljs-built_in">provide</span>(routeLocationKey, <span class="hljs-built_in">reactive</span>(reactiveRoute));<br>  app.<span class="hljs-built_in">provide</span>(routerViewLocationKey, currentRoute);<br>  <span class="hljs-type">const</span> unmountApp = app.unmount;<br>  installedApps.<span class="hljs-built_in">add</span>(app);<br>  <span class="hljs-comment">// 重写 Vue 的 unmount 方法，在应用卸载的时候先清理路由，然后再调用原始的 unmount 方法</span><br>  app.unmount = <span class="hljs-built_in">function</span> () &#123;<br>    installedApps.<span class="hljs-built_in">delete</span>(app);<br>    <span class="hljs-keyword">if</span> (installedApps.size &lt; <span class="hljs-number">1</span>) &#123;<br>      pendingLocation = START_LOCATION_NORMALIZED;<br>      <span class="hljs-function">removeHistoryListener &amp;&amp; <span class="hljs-title">removeHistoryListener</span><span class="hljs-params">()</span></span>;<br>      removeHistoryListener = null;<br>      currentRoute.value = START_LOCATION_NORMALIZED;<br>      started = <span class="hljs-literal">false</span>;<br>      ready = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-built_in">unmountApp</span>();<br>  &#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><h4 id="为什么axios不需要vue-use-axios-，可以开箱即用？"><a href="#为什么axios不需要vue-use-axios-，可以开箱即用？" class="headerlink" title="为什么axios不需要vue.use(axios)，可以开箱即用？"></a>为什么axios不需要vue.use(axios)，可以开箱即用？</h4><p>理由也很简单，跟上面需要install的相反。因为axios是基于Promise封装的库，是完全独立于Vue的，根本不需要挂载在Vue上也能实现发送请求。</p><h4 id="为什么说“当-install-方法被同一个插件多次调用，插件将只会被安装一次”"><a href="#为什么说“当-install-方法被同一个插件多次调用，插件将只会被安装一次”" class="headerlink" title="为什么说“当 install 方法被同一个插件多次调用，插件将只会被安装一次”"></a>为什么说“当 install 方法被同一个插件多次调用，插件将只会被安装一次”</h4><p>从<a href="https://github.com/vuejs/vue/blob/d6bdff890322bc87792094a1690bcd16373cf82d/src/core/global-api/use.ts">use源码</a>中，我们可以发现使用了全局的数组<code>_installedPlugins</code>来存储已经安装过的插件，已经安装过直接返回当前实例。</p><h4 id="Vue-use-和Vue-prototype的区别"><a href="#Vue-use-和Vue-prototype的区别" class="headerlink" title="Vue.use()和Vue.prototype的区别"></a>Vue.use()和Vue.prototype的区别</h4><p><code>Vue.prototype.$xx</code>原理是利用了js中函数原型的特性。 函数原型上的属性&#x2F;方法, 在函数实例化后, 可以在任意实例上读取。而vue.use是调用插件的install方法在vue的实例中注册组件&#x2F;方法。</p><p>参考资料：<br><a href="https://v2.cn.vuejs.org/v2/guide/plugins.html">vue官方文档</a><br><a href="https://blog.csdn.net/BDawn/article/details/123662749">vue3源码分析之use(store)</a><br><a href="https://mp.weixin.qq.com/s?src=11&timestamp=1676451785&ver=4351&signature=bPiVcSkKvqIUj4C9CfmoTgUcY-MhN5oJ-46iOgnIbhg-9Fvq58pdxn9rYZyF-a0PEvA1vp9V17u6hb*Ef0CAkojrbIZFUqssbrujxoym3GLWcrH73YtiojXOH58C8FHG&new=1">JS每日一题: Vue.use中都发生了什么？</a><br><a href="https://wuzhong1030.github.io/views/frontEnd/2020/1216.html#%E8%B7%AF%E7%94%B1%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">Vue Router 源码学习</a><br><a href="https://www.bilibili.com/read/cv18035107?from=articleDetail">【面试题】为什么有时用Vue.use()？及Vue.use()的作用及原理是什么？</a></p>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
      <category>源码解析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
      <tag>源码解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你应该要知道的重绘与重排</title>
    <link href="/2023/01/31/%E4%BD%A0%E5%BA%94%E8%AF%A5%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E9%87%8D%E7%BB%98%E4%B8%8E%E9%87%8D%E6%8E%92/"/>
    <url>/2023/01/31/%E4%BD%A0%E5%BA%94%E8%AF%A5%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E9%87%8D%E7%BB%98%E4%B8%8E%E9%87%8D%E6%8E%92/</url>
    
    <content type="html"><![CDATA[<p>面试官：谈谈性能优化问题<br>答：巴拉巴拉以下省略800字…减少重绘和回流<br>面试官：那简答说说什么是重绘和回流<br>那么问题来了，什么是重绘和回流</p><h3 id="什么是重绘和回流"><a href="#什么是重绘和回流" class="headerlink" title="什么是重绘和回流"></a>什么是重绘和回流</h3><p><strong>重绘（Repaint）</strong>：当页面中元素样式的改变并不影响它在文档流中的位置时（例如：color、background-color、visibility等），浏览器会将新样式赋予给元素并重新绘制它，这个过程称为重绘。<br><strong>重排&#x2F;回流（Reflow）</strong>：重新生成布局、增删DOM以及修改元素属性（例如：修改元素的宽高、字体大小），浏览器重新渲染部分或全部文档的过程称为回流。</p><p>通过两者概念区别明显得知，重排要比重绘的成本大得多，我们应该尽量减少重排操作，减少页面性能消耗。<br>另外<strong>回流必将引起重绘，重绘不一定会引起回流。</strong></p><h3 id="哪些操作会导致重绘与重排"><a href="#哪些操作会导致重绘与重排" class="headerlink" title="哪些操作会导致重绘与重排"></a>哪些操作会导致重绘与重排</h3><p><strong>引起重绘的操作，修改如下属性时：</strong></p><ul><li>color</li><li>border-style</li><li>border-radius</li><li>text-decoration</li><li>box-shadow</li><li>outline</li><li>background</li></ul><p><strong>引起回流的操作：</strong></p><ul><li>页面初始渲染，这是开销最大的一次重排</li><li>浏览器窗口大小发生改变</li><li>添加&#x2F;删除可见的DOM元素</li><li>元素尺寸或位置发生改变（例如：margin、padding、width、height、font-size）</li><li>元素内容发生变化（例如：文字数量、图片大小）</li><li>激活CSS伪类（例如使用<code>:hover</code>伪类）</li><li>设置style属性的值（通过设置style属性改变结点样式的话，每一次设置都会触发一次回流）</li><li>查询某些属性或调用某些计算方法（例如：offsetWidth、offsetHeight）</li></ul><p>一些常用且会导致回流的属性和方法：</p><p><code>clientWidth</code>、<code>clientHeight</code>、<code>clientTop</code>、<code>clientLeft</code><br><code>offsetWidth</code>、<code>offsetHeight</code>、<code>offsetTop</code>、<code>offsetLeft</code><br><code>scrollWidth</code>、<code>scrollHeight</code>、<code>scrollTop</code>、<code>scrollLeft</code><br><code>scrollIntoView()</code>、<code>scrollIntoViewIfNeeded()</code><br><code>getComputedStyle()</code><br><code>getBoundingClientRect()</code><br><code>scrollTo()</code></p><p>参考资料：<br><a href="https://juejin.cn/post/7159155955987382309">前端面试 第四篇 重绘和重排（回流）</a><br><a href="https://juejin.cn/post/6844903569087266823">浏览器的回流与重绘 (Reflow &amp; Repaint)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>局部容器滚动时父容器不触发滚动</title>
    <link href="/2023/01/31/%E5%B1%80%E9%83%A8%E5%AE%B9%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%97%B6%E7%88%B6%E5%AE%B9%E5%99%A8%E4%B8%8D%E8%A7%A6%E5%8F%91%E6%BB%9A%E5%8A%A8/"/>
    <url>/2023/01/31/%E5%B1%80%E9%83%A8%E5%AE%B9%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%97%B6%E7%88%B6%E5%AE%B9%E5%99%A8%E4%B8%8D%E8%A7%A6%E5%8F%91%E6%BB%9A%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>在网页开发中，嵌套滚动还是很常见的，见下面示例。</p><div style="width: 80%; height: 200px; margin: 0 auto;">    <iframe src="https://xypecho.github.io/test/scroll-behavior.html" style="width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div><p>子容器滚动到底部后继续滑动鼠标滚轮，这时候会触发父级容器的滚动。如何取消这个feature呢？<code>overscroll-behavior</code>闪亮登场。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">overscroll-behavior: auto;     <span class="hljs-regexp">/* 默认的滚动行为 */</span><br>overscroll-behavior: contain;  <span class="hljs-regexp">/* 滚动只会发生在当前容器 */</span><br></code></pre></td></tr></table></figure><p>参考资料：<br><a href="https://www.zhangxinxu.com/wordpress/2020/01/css-overscroll-behavior/">CSS overscroll-behavior让滚动嵌套时父滚动不触发</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022年终总结</title>
    <link href="/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2022/12/31/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>今年最大的收获：毕业以来的第一次脱单。容我开心一下，hia hia hia ~</p><p>来来来聚光灯打到这里，让我们看下去年的flag完成的怎么样了</p><ul><li><del>成功脱单</del> (完美完成)</li><li>跳槽(笑死，谈恋爱完全没心思跳槽)</li><li>坚持跑步，每周1-2次5km，年总跑步200km（疫情原因没能跑步）</li><li><del>阅读，读完40本书</del>（看了下微信读书的2022年度总结，今年读完了24本，emmm完成度60%）</li><li>少喝甚至不喝饮料(包括奶茶)，多喝水（很难，今年奶茶喝更多了）</li><li>省钱，设置一个穿搭基金，超过则今年停止穿搭消费（似乎这个小目标不需要了呢）</li></ul><h4 id="再来看看一些数据项的内容"><a href="#再来看看一些数据项的内容" class="headerlink" title="再来看看一些数据项的内容 ~"></a>再来看看一些数据项的内容 ~</h4><h5 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h5><table><thead><tr><th align="left">app</th><th align="left">金额（元）</th></tr></thead><tbody><tr><td align="left">支付宝</td><td align="left">24017.3</td></tr><tr><td align="left">微信</td><td align="left">10055.16</td></tr><tr><td align="left">工商银行(房租)</td><td align="left">21291.77</td></tr><tr><td align="left">云闪付</td><td align="left">10588.2</td></tr><tr><td align="left">抖音</td><td align="left">384.9</td></tr><tr><td align="left">合计</td><td align="left">66337.33</td></tr></tbody></table><p>有点反常识怎么肥四？？？恋爱后反而比2021年少花了<strong>17765.97</strong>元，难道是2021年舔狗当多了？</p><h5 id="other"><a href="#other" class="headerlink" title="other"></a>other</h5><p>理财收益为-17640.96，收益率为-14.05%…<br>b站看了3612个视频，今年b站没统计总观看时间哎<br>今年一共阅读212小时，读完24本书…<br>一共听过301首歌，共计213小时46分…</p><h4 id="每年的保留节目，立flag"><a href="#每年的保留节目，立flag" class="headerlink" title="每年的保留节目，立flag"></a>每年的保留节目，立flag</h4><ul><li>跳槽。目前这家公司太安逸了感觉人都快呆废了，而且工资不高(这是重点)</li><li>保持读书的习惯</li><li>开源节流，避免不必要的开支</li></ul>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入了解JavaScript中的new操作符</title>
    <link href="/2022/11/23/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84new%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <url>/2022/11/23/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84new%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>开头先用简单的一句话介绍一下new</p><blockquote><p>new 运算符用于创建对象的实例</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>new操作符在执行过程中会改变this的指向，所以在了解new操作符之前，我们先熟悉一下this。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> Cat(<span class="hljs-type">name</span>, age) &#123;<br>    this.name = <span class="hljs-type">name</span>;<br>    this.age = age;<br>&#125;<br>console.log(<span class="hljs-built_in">new</span> Cat(<span class="hljs-string">&#x27;miaomiao&#x27;</span>, <span class="hljs-number">18</span>));  // Cat &#123;<span class="hljs-type">name</span>: &quot;miaomiao&quot;, age: <span class="hljs-number">18</span>&#125;<br></code></pre></td></tr></table></figure><p>我们并没有return任何信息，输出的结果中包含了name与age的信息。这就是this的作用了。<br><strong>在JavaScript中，如果函数没有return值，则默认return this。</strong>上面代码中的this实际为Cat空对象，后两句就相当于给Cat对象添加name和age属性。</p><h3 id="new的时候发生了什么"><a href="#new的时候发生了什么" class="headerlink" title="new的时候发生了什么"></a>new的时候发生了什么</h3><p>我们先来看看下面这行简单的代码，该代码的作用是通过new操作符生成一个Cat对象的实例。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">cat</span> = new <span class="hljs-keyword">Cat</span>();<br></code></pre></td></tr></table></figure><p>从表面上看这行代码的主要作用是创建一个Cat对象的实例，并将这个实例值赋予cat变量，cat变量就会包含Cat对象的属性和函数。其实，new操作符做了3件事情，如下代码所示：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// 创建一个空对象</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">cat</span> = &#123;&#125;;<br><span class="hljs-comment">// 将空对象的__proto__属性指向Cat对象的prototype属性</span><br><span class="hljs-keyword">cat</span>.__proto__ = <span class="hljs-keyword">Cat</span>.prototype;<br><span class="hljs-comment">// 将Cat()函数中的this指向cat变量</span><br><span class="hljs-keyword">Cat</span>.call(<span class="hljs-keyword">cat</span>);<br></code></pre></td></tr></table></figure><h3 id="手动实现一个new"><a href="#手动实现一个new" class="headerlink" title="手动实现一个new"></a>手动实现一个new</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">objectFactory</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(),<br>    <span class="hljs-comment">// 获取外部传入的构造器</span><br>        <span class="hljs-title class_">Constructor</span> = [].<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>        <span class="hljs-comment">// obj的原型指向构造器的prototype</span><br>        <span class="hljs-comment">// 因为构造器所有实例对象需要共享的属性和方法，都放在prototype里面</span><br>    obj.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Constructor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>    <span class="hljs-comment">// 传入的构造器中的this就指向obj对象，这样obj对象就具有了传入的构造器的属性</span><br>    <span class="hljs-keyword">var</span> ret = <span class="hljs-title class_">Constructor</span>.<span class="hljs-title function_">apply</span>(obj, <span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-comment">// 确保构造器总是返回一个对象</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> ret === <span class="hljs-string">&#x27;object&#x27;</span> ? ret : obj;<br>&#125;<br><br><span class="hljs-comment">// demo</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cat</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-keyword">const</span> cat = <span class="hljs-title function_">objectFactory</span>(<span class="hljs-title class_">Cat</span>, <span class="hljs-string">&#x27;姓名&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cat); <span class="hljs-comment">// Cat &#123;name: &#x27;姓名&#x27;, age: &#x27;18&#x27;&#125;</span><br></code></pre></td></tr></table></figure><p>参考资料：<br><a href="https://github.com/mqyqingfeng/Blog/issues/13">JavaScript深入之new的模拟实现</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些算法题</title>
    <link href="/2022/11/22/%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95%E9%A2%98/"/>
    <url>/2022/11/22/%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="统计字符串中每个字符出现的次数"><a href="#统计字符串中每个字符出现的次数" class="headerlink" title="统计字符串中每个字符出现的次数"></a>统计字符串中每个字符出现的次数</h3><blockquote><p>reduce()函数适合作为累加器，将initialValue设置为一个空对象，initialValue作为累加器accumulator的初始值，依次往后执行每个元素。如果执行的元素在accumulator中存在，则将其计数加1，否则将当前执行元素作为accumulator的key，其value为1。依次执行完所有元素后，最终返回的accumulator的值就包含了每个元素出现的次数。</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> countOccurrences = <span class="hljs-function">(<span class="hljs-params">arr</span>) =&gt;</span> arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accumulator, currentValue</span>) =&gt;</span> &#123;<br>    accumulator[currentValue] ? accumulator[currentValue]++ :<br>        accumulator[currentValue] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> accumulator;<br>&#125;, &#123;&#125;);<br>countOccurrences([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>]); <span class="hljs-comment">// &#123;1: 2, 2: 3, 3: 1, 5: 1&#125;</span><br></code></pre></td></tr></table></figure><h3 id="统计字符串中出现次数最多的字符及出现的次数"><a href="#统计字符串中出现次数最多的字符及出现的次数" class="headerlink" title="统计字符串中出现次数最多的字符及出现的次数"></a>统计字符串中出现次数最多的字符及出现的次数</h3><blockquote><p>假如存在一个字符串’helloJavascripthellohtmlhellocss’，其中出现次数最多的字符是l，出现的次数是7次。</p></blockquote><p><strong>通过key-value形式的对象来存储字符串以及字符串出现的次数，然后逐个判断出现次数最大值，同时获取对应的字符</strong></p><p>这个几乎最简单的也是最容易想到的解法</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs axapta">function getMaxCount(<span class="hljs-built_in">str</span>) &#123;<br>    <span class="hljs-built_in">var</span> json = &#123;&#125;;<br>    <span class="hljs-comment">// 遍历str的每一个字符得到key-value形式的对象</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">str</span>.length; i++) &#123;<br>        <span class="hljs-comment">// 判断json中是否有当前str的值</span><br>        <span class="hljs-keyword">if</span> (!json[<span class="hljs-built_in">str</span>.charAt(i)]) &#123;<br>            <span class="hljs-comment">// 如果不存在，就将当前值添加到json中去</span><br>            json[<span class="hljs-built_in">str</span>.charAt(i)] = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果存在，则让value值加1</span><br>            json[<span class="hljs-built_in">str</span>.charAt(i)]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 存储出现次数最多的值和出现次数</span><br>    <span class="hljs-built_in">var</span> maxCountChar = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-built_in">var</span> maxCount = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 遍历json对象，找出出现次数最大的值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> key <span class="hljs-keyword">in</span> json) &#123;<br>        <span class="hljs-comment">// 如果当前项大于下一项</span><br>        <span class="hljs-keyword">if</span> (json[key] &gt; maxCount) &#123;<br>            <span class="hljs-comment">// 就让当前值更改为出现最多次数的值</span><br>            maxCount = json[key];<br>            maxCountChar = key;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//最终返回出现最多的值以及出现次数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;出现最多的值是&#x27;</span> + maxCountChar + <span class="hljs-string">&#x27;，出现次数为&#x27;</span> + maxCount;<br>&#125;<br><span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;helloJavaScripthellohtmlhellocss&#x27;</span>;<br>getMaxCount(<span class="hljs-built_in">str</span>); <span class="hljs-comment">// &#x27;出现最多的值是l，出现次数为7&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="去除字符串中重复的字符"><a href="#去除字符串中重复的字符" class="headerlink" title="去除字符串中重复的字符"></a>去除字符串中重复的字符</h3><p><strong>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。可以利用这个特性去重。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;helloJavaScripthellohtmlhellocss&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeDuplicateChar</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">const</span> arr = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(str)<br>    <span class="hljs-keyword">const</span> res = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...arr])).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res); <span class="hljs-comment">// heloJavScriptms</span><br>&#125;<br><span class="hljs-title function_">removeDuplicateChar</span>(str)<br></code></pre></td></tr></table></figure><p><strong>使用key-value类型的对象存储，key表示唯一的字符，处理完后将所有的key拼接在一起即可得到去重后的结果</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs axapta">function removeDuplicateChar(<span class="hljs-built_in">str</span>) &#123;<br>    <span class="hljs-keyword">const</span> res = []<br>    <span class="hljs-keyword">const</span> json = &#123;&#125;<br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">str</span>.length; i++) &#123;<br>        <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> = <span class="hljs-built_in">str</span>[i]<br>        <span class="hljs-keyword">if</span> (!json[<span class="hljs-built_in">char</span>]) &#123;<br>            json[<span class="hljs-built_in">char</span>] = <span class="hljs-literal">true</span><br>            res.push(<span class="hljs-built_in">char</span>)<br>        &#125;<br>    &#125;<br>    console.log(res.<span class="hljs-keyword">join</span>(<span class="hljs-string">&#x27;&#x27;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>主要思想是借助数组的filter()函数，然后在filter()函数中使用indexOf()函数判断</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">removeDuplicateChar</span>(<span class="hljs-params">str</span>) &#123;<br>    const arr = <span class="hljs-built_in">Array</span>.prototype.<span class="hljs-built_in">slice</span>.call(str)<br>    const res = arr.<span class="hljs-built_in">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> arr.<span class="hljs-built_in">indexOf</span>(item) === index)<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="判断一个字符串是否为回文字符串"><a href="#判断一个字符串是否为回文字符串" class="headerlink" title="判断一个字符串是否为回文字符串"></a>判断一个字符串是否为回文字符串</h3><blockquote><p>回文字符串是指一个字符串正序和倒序是相同的，例如字符串’abcdcba’是一个回文字符串，而字符串’abcedba’则不是一个回文字符串。</p></blockquote><p><strong>最简答的思路，将字符串翻转，然后与原来的字符串进行比较</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPalindromicStr</span>(<span class="hljs-params">str</span>) &#123;<br>    const str1 = <span class="hljs-built_in">Array</span>.prototype.<span class="hljs-built_in">slice</span>.call(str).<span class="hljs-built_in">reverse</span>().join(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str === str1);<br>&#125;<br><br><span class="hljs-keyword">var</span> str1 = <span class="hljs-string">&#x27;abcdcba&#x27;</span>;<br><span class="hljs-keyword">var</span> str2 = <span class="hljs-string">&#x27;abcedba&#x27;</span>;<br>isPalindromicStr(str1);  <span class="hljs-comment">// true</span><br>isPalindromicStr(str2);  <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p><strong>将字符串按从前往后顺序的字符与按从后往前顺序的字符逐个进行比较，如果遇到不一样的值则直接返回“false”，否则返回“true”</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> isPalindromicStr(str) &#123;<br>    <span class="hljs-keyword">if</span> (str.length === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span><br>    &#125;<br>    str = str.toLowerCase().split(<span class="hljs-string">&#x27;&#x27;</span>)<br>    let start = <span class="hljs-number">0</span>, end = str.length - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">start</span> &lt; <span class="hljs-keyword">end</span>) &#123;<br>        <span class="hljs-keyword">if</span> (str[<span class="hljs-keyword">start</span>] === str[<span class="hljs-keyword">end</span>]) &#123;<br>            <span class="hljs-keyword">start</span>++<br>            <span class="hljs-keyword">end</span><span class="hljs-comment">--</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求数组中的最大值和最小值"><a href="#求数组中的最大值和最小值" class="headerlink" title="求数组中的最大值和最小值"></a>求数组中的最大值和最小值</h3><p>最简单的方式当然是：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const values = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">min</span>(...values));; <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><p>问题肯定是不止一种解决方案的，今天我们来用<code>reduce()</code>解决，主要思想是reduce()函数不设置initialValue初始值，将数组的第一个元素直接作为回调函数的第一个参数，依次与后面的值进行比较。当需要找最大值时，每轮累加器返回当前比较中大的值；当需要找最小值时，每轮累加器返回当前比较中小的值。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const <span class="hljs-built_in">Max</span> = <span class="hljs-function">(<span class="hljs-params">arr</span>) =&gt;</span> arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">preValue, curValue</span>) =&gt;</span> preValue &gt; curValue ? preValue : curValue)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重学前端</title>
    <link href="/2022/11/21/%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF/"/>
    <url>/2022/11/21/%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p>此文章为《JavaScript重难点实例精讲》的笔记，记录下以往没注意过的一些js小细节。</p><h3 id="JavaScript的基本数据类型"><a href="#JavaScript的基本数据类型" class="headerlink" title="JavaScript的基本数据类型"></a>JavaScript的基本数据类型</h3><h4 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a>Undefined类型</h4><blockquote><p>Undefined类型只有一个唯一的字面值undefined，表示的是一个变量不存在。下面是4种常见的出现undefined的场景。</p></blockquote><ol><li>使用只声明而未初始化的变量时，会返回“undefined”。</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><ol start="2"><li>获取一个对象的某个不存在的属性时，会返回“undefined”。</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;jack&#x27;</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.age); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><ol start="3"><li>函数没有明确的返回值时，却在其他地方使用了返回值，会返回“undefined”。</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(foo()); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><ol start="4"><li>函数定义时使用了多个形式参数，而在调用时传递的参数的数量少于形参数量，那么未匹配上的参数就为“undefined”。</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">foo</span>(params, params1, params2) &#123;<br>    console<span class="hljs-selector-class">.log</span>(params2); <span class="hljs-comment">// undefined</span><br>&#125;<br><span class="hljs-built_in">foo</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <br></code></pre></td></tr></table></figure><h4 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h4><blockquote><p>Null类型只有一个唯一的字面值null，表示一个空指针对象，这也是在使用typeof运算符检测null值时会返回“object”的原因。</p></blockquote><p>下面是3种常见的出现null的场景。</p><ol><li>一般情况下，如果声明的变量是为了以后保存某个值，则应该在声明时就将其赋值为“null”。</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> returnObj = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        name: <span class="hljs-string">&#x27;kingx&#x27;</span><br>    &#125;;<br>&#125;<br>returnObj = foo();<br></code></pre></td></tr></table></figure><ol start="2"><li>JavaScript在获取DOM元素时，如果没有获取到指定的元素对象，就会返回“null”。</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;#id&#x27;</span>);  <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><ol start="3"><li>在使用正则表达式进行捕获时，如果没有捕获结果，就会返回“null”。</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&#x27;test&#x27;</span>.match(<span class="hljs-regexp">/a/</span>);  <span class="hljs-regexp">//</span> null<br></code></pre></td></tr></table></figure><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><p>一些隐式转换情况</p><h5 id="Object类型转换为Boolean类型"><a href="#Object类型转换为Boolean类型" class="headerlink" title="Object类型转换为Boolean类型"></a>Object类型转换为Boolean类型</h5><p>· 当object为null时，会转换为false。<br>· 如果object不为null，则都会转换为true，包括空对象{}。</p><h5 id="Number类型转换为Boolean类型"><a href="#Number类型转换为Boolean类型" class="headerlink" title="Number类型转换为Boolean类型"></a>Number类型转换为Boolean类型</h5><p>· 0和NaN会转换为false。<br>· 除了0和NaN以外，都会转换为true，包括表示无穷大和无穷小的Infinity和-Infinity。</p><h5 id="Function类型转换为Boolean类型"><a href="#Function类型转换为Boolean类型" class="headerlink" title="Function类型转换为Boolean类型"></a>Function类型转换为Boolean类型</h5><p>任何Function类型的值都会转换为true。</p><h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4><p>一些隐式转换情况</p><h5 id="Undefined类型转换为Number类型"><a href="#Undefined类型转换为Number类型" class="headerlink" title="Undefined类型转换为Number类型"></a>Undefined类型转换为Number类型</h5><p>Undefined类型只有一个字面值undefined，直接转换为NaN。</p><h5 id="String类型转换为Number类型"><a href="#String类型转换为Number类型" class="headerlink" title="String类型转换为Number类型"></a>String类型转换为Number类型</h5><ol><li>只包含数字则会转换为十进制数，如 “0123”转为123</li><li>如果字符串中包含的是有效的浮点数，则同样按照十进制转换，“1.23”转为1.23</li><li>如果字符串中包含有效的十六进制格式，则会按照十进制转换，如“0x3f”会转换为63</li><li>如果是空字符串，则转换为0</li><li>如果字符串中包含了除上述格式以外的字符串，则会直接转换为NaN</li></ol><h5 id="Object类型转换为Number类型"><a href="#Object类型转换为Number类型" class="headerlink" title="Object类型转换为Number类型"></a>Object类型转换为Number类型</h5><blockquote><p>如果值为对象类型，则会先调用对象的valueOf()函数获取返回值，并将返回值按照上述步骤重新判断能否转换为Number类型。如果都不满足，则会调用对象的toString()函数获取返回值，并将返回值重新按照步骤判断能否转换成Number类型。如果也不满足，则返回“NaN”。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 以下是通过valueOf()函数将对象正确转换成Number类型的示例</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">21</span>,<br>    <span class="hljs-attr">valueOf</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>;<br>    &#125;,<br>    <span class="hljs-attr">toString</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;good&#x27;</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-title class_">Number</span>(obj);  <span class="hljs-comment">// 21</span><br><br><br><span class="hljs-comment">// 以下是通过toString()函数将对象正确转换成Number类型的示例</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;21&#x27;</span>,<br>    <span class="hljs-attr">valueOf</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> [];<br>    &#125;,<br>    <span class="hljs-attr">toString</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-title class_">Number</span>(obj);  <span class="hljs-comment">// 21</span><br></code></pre></td></tr></table></figure><h5 id="关于Number类型经常遇到的一个面试题"><a href="#关于Number类型经常遇到的一个面试题" class="headerlink" title="关于Number类型经常遇到的一个面试题"></a>关于Number类型经常遇到的一个面试题</h5><blockquote><p>设想这样一个场景，存在一个数组，数组中的每个元素都是Number类型的字符串[‘1’,’2’, ‘3’, ‘4’]，如果我们想要将数组中的元素全部转换为整数，我们该怎么做呢？</p></blockquote><p>下意识的是不是想到这样的代码</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>];<br><span class="hljs-keyword">var</span> result = arr.<span class="hljs-built_in">map</span>(parseInt);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result); <span class="hljs-comment">//  [1, NaN, NaN, NaN]</span><br></code></pre></td></tr></table></figure><p>其实这就是一个藏在map()函数与parseInt()函数中的隐形坑。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 上面的代码等同于如下代码</span><br>arr.map(<span class="hljs-keyword">function</span> (<span class="hljs-keyword">val</span>, index) &#123;<br>    return parse<span class="hljs-constructor">Int(<span class="hljs-params">val</span>, <span class="hljs-params">index</span>)</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><p>parseInt()函数接收的第二个参数实际为数组的索引值，所以实际处理的过程如下所示</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">parseInt(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">0</span>);  <span class="hljs-regexp">//</span> <span class="hljs-number">1</span><br>parseInt(<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">1</span>);  <span class="hljs-regexp">//</span> NaN<br>parseInt(<span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">2</span>);  <span class="hljs-regexp">//</span> NaN<br>parseInt(<span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-number">3</span>);  <span class="hljs-regexp">//</span> NaN<br></code></pre></td></tr></table></figure><p>任何整数以0为基数取整时，都会返回本身，所以第一行代码会返回“1”。<br>第二行代码parseInt(‘2’, 1)，因为parseInt()函数对应的基数只能为2～36，不满足基数的整数在处理后会返回“NaN”；<br>第三行代码parseInt(‘3’, 2)，表示的是将3处理为二进制表示，实际上二进制时只有0和1，3超出了二进制的表示范围，无法转换，返回“NaN”；<br>第四行代码parseInt(‘4’, 3)，与第三行类似，4无法用三进制的数据表示，返回“NaN”。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 正确代码</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>];<br><span class="hljs-keyword">var</span> result = arr.<span class="hljs-built_in">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-keyword">return</span> parseInt(val, <span class="hljs-number">10</span>);<br>&#125;);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(result);  <span class="hljs-comment">// [1, 2, 3, 4]</span><br></code></pre></td></tr></table></figure><h5 id="isNaN-函数与Number-isNaN-函数对比"><a href="#isNaN-函数与Number-isNaN-函数对比" class="headerlink" title="isNaN()函数与Number.isNaN()函数对比"></a>isNaN()函数与Number.isNaN()函数对比</h5><p>在判断NaN时，ES5提供了isNaN()函数，ECMAScript 6（后续简称ES6）为Number类型增加了静态函数isNaN()。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 使用isNan函数时会进行隐式类型转换</span><br>is<span class="hljs-constructor">NaN(NaN)</span>;       <span class="hljs-comment">// true</span><br>is<span class="hljs-constructor">NaN(<span class="hljs-params">unde</span>ﬁ<span class="hljs-params">ned</span>)</span>;  <span class="hljs-comment">// true</span><br>is<span class="hljs-constructor">NaN(&#123;&#125;)</span>;        <span class="hljs-comment">// true</span><br>is<span class="hljs-constructor">NaN(<span class="hljs-params">true</span>)</span>;      <span class="hljs-comment">// false，Number(true)会转换成数字1</span><br>is<span class="hljs-constructor">NaN(<span class="hljs-params">null</span>)</span>;      <span class="hljs-comment">// false，Number(null)会转换成数字0</span><br>is<span class="hljs-constructor">NaN(1)</span>;         <span class="hljs-comment">// false</span><br>is<span class="hljs-constructor">NaN(&#x27;&#x27;)</span>;        <span class="hljs-comment">// false，Number(&#x27;&#x27;)会转换为成数字0</span><br>is<span class="hljs-constructor">NaN(<span class="hljs-string">&quot;1&quot;</span>)</span>;            <span class="hljs-comment">// false，字符串&quot;1&quot;可以转换成数字1</span><br>is<span class="hljs-constructor">NaN(<span class="hljs-string">&quot;JavaScript&quot;</span>)</span>;   <span class="hljs-comment">// true，字符串&quot;JavaScript&quot;无法转换成数字</span><br>is<span class="hljs-constructor">NaN(<span class="hljs-params">new</span> Date()</span>);     <span class="hljs-comment">// false</span><br>is<span class="hljs-constructor">NaN(<span class="hljs-params">new</span> Date()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);  <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// ES6中的Number.isNaN()函数会在真正意义上去判断变量是否为NaN，不会做数据类型转换</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">NaN(NaN)</span>;        <span class="hljs-comment">// true</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">NaN(<span class="hljs-params">unde</span>ﬁ<span class="hljs-params">ned</span>)</span>;   <span class="hljs-comment">// false</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">NaN(<span class="hljs-params">null</span>)</span>;       <span class="hljs-comment">// false</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">NaN(<span class="hljs-params">true</span>)</span>;       <span class="hljs-comment">// false</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">NaN(&#x27;&#x27;)</span>;         <span class="hljs-comment">// false</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">NaN(123)</span>;        <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><p>定义字符串有三种方式</p><ol><li>字符串字面量方式，var a &#x3D; ‘string’</li><li>直接调用String()函数，var a &#x3D; String(‘hello’)</li><li>new String()构造函数，var a &#x3D; new String(‘hello’)。ps:new运算符生成的字符串是字符串对象。</li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-built_in">var</span> str2 = String(<span class="hljs-built_in">str</span>);<br><span class="hljs-built_in">var</span> str3 = String(<span class="hljs-string">&#x27;hello&#x27;</span>);<br><span class="hljs-built_in">var</span> str4 = <span class="hljs-keyword">new</span> String(<span class="hljs-built_in">str</span>);<br><span class="hljs-built_in">var</span> str5 = <span class="hljs-keyword">new</span> String(<span class="hljs-built_in">str</span>);<br><span class="hljs-built_in">var</span> str6 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&#x27;hello&#x27;</span>);<br><br><span class="hljs-built_in">str</span> === str2;   <span class="hljs-comment">// true</span><br>str2 === str3;  <span class="hljs-comment">// true</span><br>str3 === str4;  <span class="hljs-comment">// false</span><br>str4 === str5;  <span class="hljs-comment">// false</span><br>str5 === str6;  <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>基本字符串在作比较时，只需要比较字符串的值即可；而在比较字符串对象时，比较的是对象所在的地址。<br>str4、str5和str6，因为是使用new运算符生成的String类型的实例，所以在比较时需要判断变量是否指向同一个对象，即内存地址是否相同，很明显str4、str5、str6都是在内存中新生成的地址，彼此各不相同。</p><h5 id="为什么采用字面量方式定义的字符串也可以使用indexOf-、substring-、slice-等函数呢？"><a href="#为什么采用字面量方式定义的字符串也可以使用indexOf-、substring-、slice-等函数呢？" class="headerlink" title="为什么采用字面量方式定义的字符串也可以使用indexOf()、substring()、slice()等函数呢？"></a>为什么采用字面量方式定义的字符串也可以使用indexOf()、substring()、slice()等函数呢？</h5><p>实际上基本字符串本身是没有字符串对象的函数，而在基本字符串调用字符串对象才有的函数时，JavaScript会自动将基本字符串转换为字符串对象，形成一种包装类型，这样基本字符串就可以正常调用字符串对象的方法了。</p><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><p>引用数据类型有不同于基本数据类型的特点，具体如下所示:</p><ol><li>引用数据类型的实例需要通过new操作符生成，有的是显式调用，有的是隐式调用</li><li>引用数据类型变量赋值传递的是内存地址</li><li>引用数据类型的比较是对内存地址的比较，而基本数据类型的比较是对值的比较</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sass学习笔记</title>
    <link href="/2022/08/22/sass%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/22/sass%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>Sass 是一个具有语法改进的 CSS 预处理器。<br>Sass文件就是普通的文本文件，里面可以直接使用CSS语法。文件后缀名是.scss，意思为Sassy CSS。<br>Sass 有四种语法解析器：scss、sass、CSS 和 less。</p><h3 id="父选择器-amp"><a href="#父选择器-amp" class="headerlink" title="父选择器 &amp;"></a>父选择器 &amp;</h3><p>在嵌套 CSS 规则时，有时也需要直接使用嵌套外层的父选择器，例如，当给某个元素设定 hover 样式时，或者当 body 元素有某个 classname 时，可以用 <code>&amp;</code> 代表嵌套规则外层的父选择器。</p><p>编译后的 CSS 文件中 <code>&amp;</code> 将被替换成嵌套外层的父选择器，如果含有多层嵌套，最外层的父选择器会一层一层向下传递。</p><p><code>&amp;</code> 必须作为选择器的第一个字符，其后可以跟随后缀生成复合的选择器。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// sass语法</span><br><span class="hljs-selector-class">.main</span> &#123;<br>  <span class="hljs-attribute">color</span>: black;<br>  &amp;-sidebar &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;<br>  &#125;<br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 转成css后为</span><br><span class="hljs-selector-class">.main</span> &#123;<br>  <span class="hljs-attribute">color</span>: black;<br>&#125;<br><span class="hljs-selector-class">.main-sidebar</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;<br>&#125;<br><span class="hljs-selector-class">.main</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h3><p>很多 CSS 属性都有同样的前缀，例如：font-family, font-size 和 font-weight ， text-align, text-transform 和 text-overflow。</p><p>在 Sass 中，我们可以使用嵌套属性来编写它们</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// sass语法</span><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">border</span>: &#123;<br>    radius: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">color</span>:red;<br>  &#125;<br>  <span class="hljs-attribute">font</span>: &#123;<br>   family:<span class="hljs-string">&#x27;YaHei&#x27;</span>;<br>   size:<span class="hljs-number">18px</span>;<br>   weight:<span class="hljs-number">600</span>;<br>  &#125;<br>  <span class="hljs-attribute">margin</span>: auto &#123;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;<br>  &#125;;<br>&#125;<br><br><span class="hljs-comment">// 转成css后为</span><br><span class="hljs-selector-class">.box</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">border-color</span>: red;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&quot;YaHei&quot;</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>  <span class="hljs-attribute">margin</span>: auto;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量 $"></a>变量 $</h3><p>变量以美元符号开头，赋值方法与 CSS 属性的写法一样。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$color</span>: red;</span><br><span class="hljs-meta"><span class="hljs-keyword">$font</span>-size: 16px;</span><br><br>.foo &#123;<br>  color: <span class="hljs-symbol">$</span>color;<br>&#125;<br></code></pre></td></tr></table></figure><p>变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 <code>!global</code> 声明。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// sass</span><br><span class="hljs-selector-class">.main</span> &#123;<br>  <span class="hljs-variable">$width</span>: <span class="hljs-number">5em</span> !global;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-variable">$width</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-variable">$width</span>;<br>&#125;<br><br><span class="hljs-comment">// css</span><br><span class="hljs-selector-class">.main</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">5em</span>;<br>&#125;<br><br><span class="hljs-selector-class">.sidebar</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">5em</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="插值语句"><a href="#插值语句" class="headerlink" title="#{} 插值语句"></a>#{} 插值语句</h3><p>标签名或者属性也可以定义为变量，用 <code>#&#123;&#125;</code> 包裹</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> scss<br><span class="hljs-variable">$ipt</span>: input;<br><span class="hljs-variable">$btm</span>: bottom;<br><br>.<span class="hljs-comment">#&#123;$ipt&#125; &#123;</span><br>  padding-<span class="hljs-comment">#&#123;$btm&#125;: 5rem;</span><br>&#125;<br><br><span class="hljs-regexp">//</span> css<br>.input &#123;<br>  padding-bottom: <span class="hljs-number">5</span>rem;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> scss<br><span class="hljs-variable">$name</span>: foo;<br><span class="hljs-variable">$attr</span>: border;<br><br>p.<span class="hljs-comment">#&#123;$name&#125; &#123;</span><br>  <span class="hljs-comment">#&#123;$attr&#125;-color: blue;</span><br>&#125;<br><br><span class="hljs-regexp">//</span> css<br>p.foo &#123;<br>  border-color: blue;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="extend-继承"><a href="#extend-继承" class="headerlink" title="@extend 继承"></a>@extend 继承</h3><p>在设计网页的时候常常遇到这种情况：一个元素使用的样式与另一个元素完全相同，但又添加了额外的样式。通常会在 HTML 中给元素定义两个 class，一个通用样式，一个特殊样式。假设现在要设计一个普通错误样式与一个严重错误样式，一般会这样写</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// scss</span><br><span class="hljs-selector-class">.error</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-number">#f00</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fdd</span>;<br>&#125;<br><span class="hljs-selector-class">.seriousError</span> &#123;<br>  <span class="hljs-keyword">@extend</span> .error;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">3px</span>;<br>&#125;<br><br><span class="hljs-comment">// css</span><br><span class="hljs-selector-class">.error</span>, <span class="hljs-selector-class">.seriousError</span> &#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-number">#f00</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fdd</span>;<br>&#125;<br><br><span class="hljs-selector-class">.seriousError</span> &#123;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">3px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="混合指令-mixin"><a href="#混合指令-mixin" class="headerlink" title="混合指令 @mixin"></a>混合指令 @mixin</h3><p>混合指令（Mixin）用于定义可重复使用的样式，避免了使用无语意的 class。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// 定义混合指令 @mixin</span><br><span class="hljs-keyword">@mixin</span> large-text &#123;<br>  <span class="hljs-attribute">font</span>: &#123;<br>    family: Arial;<br>    size: <span class="hljs-number">20px</span>;<br>    weight: bold;<br>  &#125;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0000</span>;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-selector-class">.heading</span> &#123;<br>  <span class="hljs-keyword">@include</span> large-text;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span>;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>参数用于给混合指令中的样式设定变量，并且赋值使用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@mixin</span> sexy-border($<span class="hljs-attribute">color</span>, $<span class="hljs-attribute">width</span>) &#123;<br>  <span class="hljs-attribute">border</span>: &#123;<br>    <span class="hljs-attribute">color</span>: $color;<br>    <span class="hljs-attribute">width</span>: $width;<br>    style: dashed;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-keyword">@include</span> sexy-border(blue, <span class="hljs-number">1in</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="函数指令"><a href="#函数指令" class="headerlink" title="函数指令"></a>函数指令</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> scss<br><span class="hljs-variable">$grid</span>-width: <span class="hljs-number">40</span>px;<br><span class="hljs-variable">$gutter</span>-width: <span class="hljs-number">10</span>px;<br><br>@<span class="hljs-keyword">function</span> grid-width(<span class="hljs-variable">$n</span>) &#123;<br>  @return <span class="hljs-variable">$n</span> * <span class="hljs-variable">$grid</span>-width + (<span class="hljs-variable">$n</span> - <span class="hljs-number">1</span>) * <span class="hljs-variable">$gutter</span>-width;<br>&#125;<br><br><span class="hljs-comment">#sidebar &#123;</span><br>   width: grid-width(<span class="hljs-number">5</span>);<br>&#125;<br><br><span class="hljs-regexp">//</span> css<br><span class="hljs-comment">#sidebar &#123;</span><br>  width: <span class="hljs-number">240</span>px;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="@for 循环"></a>@for 循环</h3><p>@for 指令可以在限制的范围内重复输出格式。<br>有两种写法<code>@for $var from &lt;start&gt; through &lt;end&gt;</code>和<code>@for $var from &lt;start&gt; to &lt;end&gt;</code>。<br><br>当使用 <code>through</code> 时，条件范围包含 <code>&lt;start&gt;</code> 与 <code>&lt;end&gt;</code> 的值，而使用 <code>to</code> 时条件范围只包含 <code>&lt;start&gt;</code> 的值不包含 <code>&lt;end&gt;</code> 的值*。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// through</span><br><span class="hljs-keyword">@for</span> <span class="hljs-variable">$i</span> from <span class="hljs-number">1</span> through <span class="hljs-number">3</span> &#123;<br>  .item-#&#123;<span class="hljs-variable">$i</span>&#125; &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">2em</span> * <span class="hljs-variable">$i</span>; &#125;<br>&#125;<br><br><span class="hljs-comment">// css</span><br><span class="hljs-selector-class">.item-1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">2em</span>;<br>&#125;<br><br><span class="hljs-selector-class">.item-2</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">4em</span>;<br>&#125;<br><br><span class="hljs-selector-class">.item-3</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">6em</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// to</span><br><span class="hljs-keyword">@for</span> <span class="hljs-variable">$i</span> from <span class="hljs-number">1</span> to <span class="hljs-number">3</span> &#123;<br>  .item-#&#123;<span class="hljs-variable">$i</span>&#125; &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">2em</span> * <span class="hljs-variable">$i</span>; &#125;<br>&#125;<br><br><span class="hljs-comment">// css</span><br><span class="hljs-selector-class">.item-1</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">2em</span>;<br>&#125;<br><br><span class="hljs-selector-class">.item-2</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">4em</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一些代码片段"><a href="#一些代码片段" class="headerlink" title="一些代码片段"></a>一些代码片段</h3><h4 id="自动添加前缀"><a href="#自动添加前缀" class="headerlink" title="自动添加前缀"></a>自动添加前缀</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// 定义命名空间为 el</span><br><span class="hljs-variable">$namespace</span>: <span class="hljs-string">&#x27;el&#x27;</span>;<br><br><span class="hljs-keyword">@mixin</span> b(<span class="hljs-variable">$block</span>) &#123;<br><span class="hljs-comment">// 新定义一个变量，由命名空间 el 加上 横线 加上传入的字符串</span><br><span class="hljs-comment">// !global将定义的局部变量转为全局变量</span><br>  <span class="hljs-variable">$B</span>: <span class="hljs-variable">$namespace</span> + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-variable">$block</span> !global;<br>  .#&#123;<span class="hljs-variable">$B</span>&#125; &#123;<br>  <span class="hljs-comment">// @content类似于vue中的slot可以充当卡槽</span><br>    <span class="hljs-keyword">@content</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-keyword">@include</span> b(container) &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: row;<br>&#125;<br><br><span class="hljs-comment">// 转义后的代码</span><br><span class="hljs-selector-class">.el-container</span> &#123;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">flex-direction</span>: row;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://www.sassmeister.com/">scss转css</a><br><a href="https://www.sass.hk/docs/">scss官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nvm的一些常用命令</title>
    <link href="/2022/08/03/nvm%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/08/03/nvm%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 安装指定版本node<br>nvm install <span class="hljs-number">16.15</span>.<span class="hljs-number">1</span> <br><br><span class="hljs-regexp">//</span> 安装最新稳定版<br>nvm install --lts<br><br><span class="hljs-regexp">//</span> 使用（版本号就是下载的node对应的版本）<br>nvm use <span class="hljs-number">16.15</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="查看node"><a href="#查看node" class="headerlink" title="查看node"></a>查看node</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">// 查看所有可用的<span class="hljs-keyword">node</span><span class="hljs-title">版本(win</span>)<br>nvm ls available<br><br>// 查看所有可用的<span class="hljs-keyword">node</span><span class="hljs-title">版本(非win</span>)<br>nvm ls-remote<br><br>// 所有安装的版本<br>nvm ls<br><br>// 当前使用的<span class="hljs-keyword">node</span><span class="hljs-title">版本</span><br><span class="hljs-title">nvm</span> current<br></code></pre></td></tr></table></figure><h3 id="卸载node"><a href="#卸载node" class="headerlink" title="卸载node"></a>卸载node</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nvm</span> uninstall 指定的版本号<br></code></pre></td></tr></table></figure><h3 id="设置镜像（换成淘宝镜像，注意最后的-x2F-）"><a href="#设置镜像（换成淘宝镜像，注意最后的-x2F-）" class="headerlink" title="设置镜像（换成淘宝镜像，注意最后的&#x2F;）"></a>设置镜像（换成淘宝镜像，注意最后的&#x2F;）</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 设置node镜像<br>nvm node_mirror https:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>node/<br><br><span class="hljs-regexp">//</span> 设置npm镜像<br>nvm npm_mirror https:<span class="hljs-regexp">//</span>npm.taobao.org<span class="hljs-regexp">/mirrors/</span>npm/<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>nvm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《玩转 Vue 3 全家桶》笔记</title>
    <link href="/2022/08/02/%E3%80%8A%E7%8E%A9%E8%BD%AC-Vue-3-%E5%85%A8%E5%AE%B6%E6%A1%B6%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/08/02/%E3%80%8A%E7%8E%A9%E8%BD%AC-Vue-3-%E5%85%A8%E5%AE%B6%E6%A1%B6%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="前端框架发展史"><a href="#前端框架发展史" class="headerlink" title="前端框架发展史"></a>前端框架发展史</h3><p>前端三大框架都是如何处理数据：</p><ol><li>Angular脏检查。所谓的脏检查，指的是 Angular 1 在对数据变化的检查上，遵循每次用户交互时都检查一次数据是否变化，有变化就去更新 DOM 这一方法</li><li>Vue使用响应式。初始化的时候，Watcher 监听了数据的每个属性，这样数据发生变化的时候，我们就能精确地知道数据的哪个 key 变了，去针对性修改对应的 DOM 即可（我们在网页中使用<code>&#123;&#123;&#125;&#125;</code>渲染一个变量，Vue 1 就会在内容里保存一个监听器监控这个变量，我们称之为 Watcher，数据有变化，watcher 会收到通知去更新网页。）</li><li>React虚拟dom，在 React 中，HTML 会被映射成一个 JavaScript 的对象进行描述。这个对象就像数据和实际 DOM 的一个缓存层，通过管理这个对象的变化，来减少对实际 DOM 的操作。</li></ol><h3 id="vue2缺陷"><a href="#vue2缺陷" class="headerlink" title="vue2缺陷"></a>vue2缺陷</h3><ol><li>Vue 2 是使用 Flow.js 来做类型校验。但现在 Flow.js 已经停止维护了，整个社区都在全面使用 TypeScript 来构建基础库，Vue 团队也不例外。</li><li>Vue 2 响应式并不是真正意义上的代理，而是基于 Object.defineProperty() 实现的。对于 Object.defineProperty() 这个 API 的细节，我们在后面讲源码时会讲到，现在你只需要知道这个 API 并不是代理，而是对某个属性进行拦截，所以有很多缺陷，比如：删除数据就无法监听，需要 $delete 等 API 辅助才能监听到。</li><li>Option API 在组织代码较多组件的时候不易维护。对于 Option API 来说，所有的 methods、computed 都在一个对象里配置，这对小应用来说还好。但代码超过 300 行的时候，新增或者修改一个功能，就需要不停地在 data，methods 里跳转写代码，我称之为上下反复横跳。</li></ol><h3 id="vue3中的特性"><a href="#vue3中的特性" class="headerlink" title="vue3中的特性"></a>vue3中的特性</h3><h4 id="新组件"><a href="#新组件" class="headerlink" title="新组件"></a>新组件</h4><p>Fragment: Vue 3 组件不再要求有一个唯一的根节点，清除了很多无用的占位 div。<br>Teleport: 允许组件渲染在别的元素内，主要开发弹窗组件的时候特别有用。<br>Suspense: 异步组件，更方便开发有异步请求的组件。</p><h4 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h4><ol><li>在<code>&lt;script setup&gt;</code>标签内定义的变量和函数，都可以在模板中直接使用</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> msg = <span class="hljs-string">&quot;啊啊啊&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>vue3中无需声明组件，在这段代码里，我们直接 import TodoList.vue 组件，然后<code>&lt;script setup&gt;</code>会自动把组件注册到当前组件，这样我们就可以直接在 template 中使用来显示清单的功能。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">TodoList</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">TodoList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../components/TodoList.vue&quot;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><code>&lt;script setup&gt;</code>好用的功能</li></ol><p>如果不写<code>setup</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> &gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>)</span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      count.<span class="hljs-property">value</span>++</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      count,</span><br><span class="language-javascript">      add</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>setup</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>);</span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    count.<span class="hljs-property">value</span>++;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>顶层<code>await</code>，如果使用<code>await</code>，<code>setup</code>前面会自动加一个<code>async</code></li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 可直接这样些</span><br><span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> fetch(<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="5"><li>通过 v-bind 函数，直接在 CSS 中使用 JavaScript 中的变量</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span>这是首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> color = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;red&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">  color.<span class="hljs-property">value</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt; <span class="hljs-number">0.5</span> ? <span class="hljs-string">&quot;blue&quot;</span> : <span class="hljs-string">&quot;red&quot;</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">v-bind</span>(<span class="hljs-string">&quot;color&quot;</span>);</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ol start="6"><li>vue3中<code>reactive</code>就是基于<code>Proxy</code>实现的响应式；<code>ref</code>则是利用对象的get和set函数进行监听来实现的响应式，这也是ref使用.value的原因！</li></ol><center>    <img style="border-radius: 0.3125em;    width:100%;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="vue-diffence.jpg"></center><ol start="7"><li>响应式原理是什么呢？Vue 中用过三种响应式解决方案，分别是 defineProperty、Proxy 和 value setter。</li></ol><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">// proxy的实现</span><br><br><span class="hljs-keyword">let</span> getDouble = (n) =&gt; n * <span class="hljs-number">2</span>;<br><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><span class="hljs-keyword">let</span> count = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-built_in">double</span> = getDouble(count);<br><br><span class="hljs-keyword">let</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(obj, &#123;<br><span class="hljs-attribute">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target, prop</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> target[prop];<br>&#125;,<br><span class="hljs-attribute">set</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target, prop, value</span>) </span>&#123;<br>  target[prop] = value;<br>  <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">&quot;count&quot;</span>) &#123;<br>    <span class="hljs-built_in">double</span> = getDouble(value);<br>  &#125;<br>&#125;,<br>deleteProperty(target, prop) &#123;<br>  <span class="hljs-keyword">delete</span> target[prop];<br>  <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">&quot;count&quot;</span>) &#123;<br>    <span class="hljs-built_in">double</span> = <span class="hljs-literal">NaN</span>;<br>  &#125;<br>&#125;,<br>&#125;);<br><span class="hljs-built_in">console</span>.log(obj.count, <span class="hljs-built_in">double</span>);<br>proxy.count = <span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.log(obj.count, <span class="hljs-built_in">double</span>);<br><span class="hljs-keyword">delete</span> proxy.count;<br><span class="hljs-comment">// 删除属性后，我们打印log时，输出的结果就会是 undefined NaN</span><br><span class="hljs-built_in">console</span>.log(obj.count, <span class="hljs-built_in">double</span>);<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// get、set函数的实现</span><br><span class="hljs-keyword">let</span> getDouble = (n) =&gt; n * <span class="hljs-number">2</span>;<br><span class="hljs-keyword">let</span> _value = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">double</span> = getDouble(_value);<br><br><span class="hljs-keyword">let</span> count = &#123;<br><span class="hljs-function"><span class="hljs-keyword">get</span> <span class="hljs-title">value</span>()</span> &#123;<br>  <span class="hljs-keyword">return</span> _value;<br>&#125;,<br><span class="hljs-function"><span class="hljs-keyword">set</span> <span class="hljs-title">value</span>(<span class="hljs-params">val</span>)</span> &#123;<br>  _value = val;<br>  <span class="hljs-built_in">double</span> = getDouble(_value);<br>&#125;,<br>&#125;;<br>console.log(count.<span class="hljs-keyword">value</span>, <span class="hljs-built_in">double</span>);<br>count.<span class="hljs-keyword">value</span> = <span class="hljs-number">2</span>;<br>console.log(count.<span class="hljs-keyword">value</span>, <span class="hljs-built_in">double</span>);<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// defineProperty的实现</span><br>let getDouble = <span class="hljs-function"><span class="hljs-params">n</span>=&gt;</span>n*<span class="hljs-number">2</span><br>let obj = &#123;&#125;<br>let <span class="hljs-built_in">count</span> = <span class="hljs-number">1</span><br>let double = getDouble(<span class="hljs-built_in">count</span>)<br><br>Object.defineProperty(obj,<span class="hljs-string">&#x27;count&#x27;</span>,&#123;<br>    get()&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">count</span><br>    &#125;,<br>    set(val)&#123;<br>        <span class="hljs-built_in">count</span> = val<br>        double = getDouble(val)<br>    &#125;<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(double)  <span class="hljs-comment">// 打印2</span><br>obj.<span class="hljs-built_in">count</span> = <span class="hljs-number">2</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(double) <span class="hljs-comment">// 打印4  有种自动变化的感觉</span><br></code></pre></td></tr></table></figure><ol start="8"><li>vue3中定义props类型，我们使用<code>defineProps</code>来规范传递数据的格式。Vue3.2 版本后 <code>defineProps</code> 和 <code>defineEmits</code> 无需导入</li></ol><center>    <img style="border-radius: 0.3125em;    width:100%;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="556c270c5e6946219f2b1fe8ac2061de_tplv-k3u1fbpfcp-watermark.jpg"></center><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; rate &#125;</span><span class="language-xml">&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; defineProps, computed &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> props = <span class="hljs-title function_">defineProps</span>(</span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  value: &#123; type: Number, <span class="hljs-keyword">default</span>: 2 &#125;</span><span class="language-xml"><span class="language-javascript">,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> rate = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-string">&quot;★★★★★☆☆☆☆☆&quot;</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">5</span> - props.<span class="hljs-property">value</span>, <span class="hljs-number">10</span> - props.<span class="hljs-property">value</span>)</span></span><br><span class="language-javascript"><span class="language-xml">);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="9"><li>我们使用<code>defineEmit</code>来向父组件派发事件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 子组件</span><br><span class="hljs-keyword">import</span> &#123; defineEmits &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">let</span> emits = <span class="hljs-title function_">defineEmits</span>(<span class="hljs-string">&quot;update-rate&quot;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">onRate</span>(<span class="hljs-params">num</span>) &#123;<br>  <span class="hljs-title function_">emits</span>(<span class="hljs-string">&quot;update-rate&quot;</span>, num);<br>&#125;<br><br><span class="hljs-comment">// 父组件</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Rate</span>  @<span class="hljs-attr">update-rate</span>=<span class="hljs-string">&quot;update&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Rate</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Rate</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Rate1.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">num</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  score.<span class="hljs-property">value</span> = num;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="10"><li>组件数据双向绑定（组件的 v-model），为什么要改成 modelValue？ 因为默认情况下，组件上的 v-model 使用 modelValue 作为 prop，同时使用 update:modelValue 作为事件 参考<a href="https://v3.cn.vuejs.org/guide/component-custom-events.html#v-model-%E5%8F%82%E6%95%B0">官方文档</a></li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">// 子组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;onRate(num)&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;num in 5&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span>☆<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; defineProps, defineEmits &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> props = <span class="hljs-title function_">defineProps</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">modelValue</span>: <span class="hljs-title class_">Number</span>,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> emits = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&quot;update:modelValue&quot;</span>]);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onRate</span>(<span class="hljs-params">num</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">emits</span>(<span class="hljs-string">&quot;update:modelValue&quot;</span>, num);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">// 父组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你的评分是 </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">score</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Rate</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;score&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Rate</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Rate</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../components/Rate.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> score = <span class="hljs-title function_">ref</span>(<span class="hljs-number">3</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="11"><li>vue3动画，在 Vue 中，如果我们想要在显示和隐藏标题文字的时候，加入动效进行过渡，那么我们直接使用 transition 组件包裹住需要动画的元素就可以了。</li></ol><center>    <img style="border-radius: 0.3125em;    width:100%;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="ec1d277ddd3e479ba34e8f6ac581cfb4_tplv-k3u1fbpfcp-watermark.jpg"></center><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle&quot;</span>&gt;</span>click<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;showTitle&quot;</span>&gt;</span>你好 Vue 3<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>  <br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.fade-enter-active</span>,</span><br><span class="language-css"><span class="hljs-selector-class">.fade-leave-active</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">0.5s</span> linear;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.fade-enter-from</span>,</span><br><span class="language-css"><span class="hljs-selector-class">.fade-leave-to</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="12"><li>列表过渡</li></ol><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;flip-list&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(todo, i) in todos&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;todo.done&quot;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; done: todo.done &#125;&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">todo.title</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.flip-list-enter-active</span>,</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.flip-list-leave-active</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.5s</span> ease;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: red;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.flip-list-enter-from</span>,</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-class">.flip-list-leave-to</span> &#123;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">30px</span>);</span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-attribute">color</span>: yellowgreen;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol start="13"><li>vue3中使用vuex</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// src/store/index.js</span><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(&#123;<br>  <span class="hljs-title function_">state</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">1</span>,<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-comment">// 在 Vuex 中，你可以使用 getters 配置，来实现 computed 的功能，比如我们想显示累加器数字乘以 2 之后的值，那么我们就需要引入 getters 配置。</span><br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">double</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> * <span class="hljs-number">2</span>;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">count</span>++;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-comment">// actions 配置，这个配置中所有的函数，可以通过解构获得 commit 函数。内部的异步任务完成后，就随时可以调用 commit 来执行 mutations 去更新数据。</span><br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">asyncAdd</span>(<span class="hljs-params">&#123; commit &#125;</span>) &#123;<br>      <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">homeBaseData</span>();<br>      <span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;add&#x27;</span>, data.<span class="hljs-property">articleCount</span>);<br>    &#125;,<br>  &#125;,<br>&#125;);<br><br><br><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router/index&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; store &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store/index&quot;</span>;<br><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">use</span>(store).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br><br><br><span class="hljs-comment">// 使用vuex的单页面文件，Count.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span></span><br><span class="language-xml">    组件中的 &#123;&#123; count &#125;&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">    处理后的 &#123;&#123; double &#125;&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> store = <span class="hljs-title function_">useStore</span>();</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> count = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">state</span>.<span class="hljs-property">count</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">let</span> double = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> store.<span class="hljs-property">getters</span>.<span class="hljs-property">double</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  store.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;add&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 异步更新vuex中的数据</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">function</span> <span class="hljs-title function_">asyncAdd</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;asyncAdd&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><ol start="14"><li>vue-router</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1da8c25e464449fe9d4f6ac6476a8502~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lightroom入门教程</title>
    <link href="/2022/07/16/Lightroom%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/07/16/Lightroom%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="Snipaste_2022-07-16_17-14-57.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Lightroom面板镇楼</div></center><h2 id="名称解释"><a href="#名称解释" class="headerlink" title="名称解释"></a>名称解释</h2><p>首先来解释一下各个名词的意思（ps：介绍顺序按照Lightroom右边功能栏顺序）。</p><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><h4 id="白平衡"><a href="#白平衡" class="headerlink" title="白平衡"></a>白平衡</h4><blockquote><p>平衡色温，还原白色。一般使用<code>自动白平衡（AWB）</code>即可。</p></blockquote><p>作用：校准画面冷暖氛围、营造特别的冷暖氛围。</p><ul><li>色温：颜色的温度，单位是K。K值越大，色温越冷，照片就偏蓝；K值越小，色温越暖，照片就偏黄。</li><li>色调：图像整体的色彩基调。越低越绿，越高越红。</li></ul><h4 id="色调"><a href="#色调" class="headerlink" title="色调"></a>色调</h4><blockquote><p>图像整体的色彩基调</p></blockquote><ul><li>曝光度：控制着图像整体的亮度。</li><li>对比度：照片明暗对比。对比度过低会让画面看起来灰蒙蒙一片，高光区和阴影区的划分不明显；过高又会导致阴影区和高亮区之间的反差过大，造成饱和度偏高，不但容易产生视觉疲劳，还会让图像色彩失真。对比度在一般情况下都是倾向于调高，但一定要适度。</li><li>高光：照片中偏近白色的部分。高光在光线较强的时候可以适当削减，让画面看起来更柔和，反之光线不强的话也可以适当增加。</li><li>阴影：照片中偏近黑色的部分。因光线不足导致阴影部分漆黑一片，看不清细节时，调节此项可以提升阴影部分的亮度。</li><li>白色色阶和黑色色阶：这两项的作用范围要比高光和阴影更大，可以极大改变明暗区域整体的亮度。通过调节白色色阶和黑色色阶，可以使这两部分的光线更加平衡。</li></ul><h4 id="偏好"><a href="#偏好" class="headerlink" title="偏好"></a>偏好</h4><ul><li>纹理：左移“纹理”滑块可以起到磨皮、柔化的作用，右移“纹理”滑块则可以强化物体细节、质感。</li><li>清晰度：画面更清晰（大幅度大范围的边缘对比度，特别是中间调区域，轻微影响颜色）。</li><li>去朦胧：去除画面朦胧雾感（最大范围大幅度的边缘对比度，以及色彩饱和度与色相对比）。</li><li>鲜艳度（自然饱和度）：丰富颜色，调节画面饱和度不高的颜色。</li><li>饱和度：改变颜色浓淡，提升画面所有色彩的鲜艳度。</li><li>锐化：增加画面的锐度，更清晰。</li></ul>]]></content>
    
    
    <categories>
      
      <category>摄影</category>
      
    </categories>
    
    
    <tags>
      
      <tag>摄影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VueUse使用指北</title>
    <link href="/2022/07/12/VueUse%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/"/>
    <url>/2022/07/12/VueUse%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是VueUse"><a href="#什么是VueUse" class="headerlink" title="什么是VueUse"></a>什么是VueUse</h2><p><a href="https://vueuse.org/">VueUse</a>是一个基于 <code>Composition API</code> 的实用函数集合。通俗的来说，这就是一个工具函数包，它可以帮助你快速实现一些常见的功能，免得你自己去写，解决重复的工作内容。以及进行了基于 <code>Composition API</code> 的封装。让你在 <code>vue3</code> 中更加得心应手。</p><h2 id="VueUse有哪些实用程序"><a href="#VueUse有哪些实用程序" class="headerlink" title="VueUse有哪些实用程序"></a>VueUse有哪些实用程序</h2><p>总结一下，VueUse中有9种类型的函数:</p><ol><li><strong>Animation</strong>——包含易于使用的过渡、超时和计时功能。</li><li><strong>Browser</strong>——可用于不同的屏幕控制、剪贴板、偏好等。</li><li><strong>Component</strong>——提供了不同组件方法的简写。</li><li><strong>Formatters</strong>——提供响应时间格式化功能。</li><li><strong>Sensors</strong>——用来监听不同的DOM事件、输入事件和网络事件。</li><li><strong>State</strong>——管理用户状态（全局、本地存储、会话存储）。</li><li><strong>Utility</strong>——不同的实用函数，如 getter、条件、引用同步等。</li><li><strong>Watch</strong>——更多高级类型的观察器，如可暂停的观察器、退避的观察器和条件观察器。</li><li><strong>Misc</strong>——不同类型的事件、WebSockets和web workers 的功能</li></ol><h2 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i @vueuse/core<br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">// 在页面中使用</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>鼠标位置: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">x</span> &#125;&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">y</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useMouse &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> &#123; x, y &#125; = <span class="hljs-title function_">useMouse</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="fa5d20ae262c413eb0db44178fa9cd62_tplv-k3u1fbpfcp-zoom-1.gif"></center><h2 id="常用函数介绍"><a href="#常用函数介绍" class="headerlink" title="常用函数介绍"></a>常用函数介绍</h2><h3 id="useIntervalFn"><a href="#useIntervalFn" class="headerlink" title="useIntervalFn"></a>useIntervalFn</h3><p><code>useIntervalFn</code>可用于实现倒计时功能</p><p>参数说明：</p><p>第三个参数：immediate: true, immediateCallback: false</p><p>immediate 首次运行useIntervalFn函数时，是否立刻开启定时任务（默认值true表示默认开启）</p><p>immediateCallback 执行useIntervalFn函数立刻执行回调（在延时时间的前或者后调用），默认值是false，如果修改为true，表示为不延时，立刻启动定时任务（不要使用pause方法）</p><p>pause暂停；resume启动</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sendCode&quot;</span>&gt;</span>发送验证码<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    倒计时:</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">timer</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useIntervalFn &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> timer = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> &#123; pause, resume &#125; = <span class="hljs-title function_">useIntervalFn</span>(</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-function">() =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">if</span> (timer.<span class="hljs-property">value</span> &lt;= <span class="hljs-number">0</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">// 停止定时任务</span></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">pause</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    &#125; <span class="hljs-keyword">else</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      timer.<span class="hljs-property">value</span>--;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 每秒执行一次</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-number">1000</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 默认不开启定时任务</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">false</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">// 发送验证码</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">sendCode</span> = (<span class="hljs-params"></span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span> (timer.<span class="hljs-property">value</span> === <span class="hljs-number">0</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    timer.<span class="hljs-property">value</span> = <span class="hljs-number">60</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">resume</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="useClipboard"><a href="#useClipboard" class="headerlink" title="useClipboard"></a>useClipboard</h3><p><code>useClipboard</code>实现了复制功能</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="4772da9d623348aa9d35609c0bf218b2_tplv-k3u1fbpfcp-zoom-1.gif"></center><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;copyHandle&quot;</span>&gt;</span>复制<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; useClipboard &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> </span></span><span class="hljs-template-variable">&#123; text, copy &#125;</span><span class="language-xml"><span class="language-javascript"> = <span class="hljs-title function_">useClipboard</span>();</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">copyHandle</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">copy</span>(<span class="hljs-string">&quot;123123123&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="useCssVar"><a href="#useCssVar" class="headerlink" title="useCssVar"></a>useCssVar</h3><p><code>useCssVar</code>可以用来动态设置<code>css</code>变量，如： <code>var(--color)</code>，可以用来配合完成动态主题</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="1c4b4e76d4d24f2bb0a42a3dfb5a316f_tplv-k3u1fbpfcp-zoom-1.gif"></center><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;el&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;--color: #7fa998; color: var(--color)&quot;</span>&gt;</span></span><br><span class="language-xml">      Sample text, </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">color</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;color&quot;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;changeColor&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useCssVar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> el = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> color = <span class="hljs-title function_">useCssVar</span>(<span class="hljs-string">&quot;--color&quot;</span>, el);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">changeColor</span> = (<span class="hljs-params">e</span>) =&gt; &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  color.<span class="hljs-property">value</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="onClickOutside"><a href="#onClickOutside" class="headerlink" title="onClickOutside"></a>onClickOutside</h3><p>点击元素外部触发，通常写一些ui组件时会用到该方法，如：弹窗点击外部隐藏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 目标元素</span><br><span class="hljs-keyword">const</span> target = <span class="hljs-title function_">ref</span>(<span class="hljs-literal">null</span>);<br><span class="hljs-title function_">onClickOutside</span>(target, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;未点中目标元素&quot;</span>));<br></code></pre></td></tr></table></figure><h3 id="useToggle"><a href="#useToggle" class="headerlink" title="useToggle"></a>useToggle</h3><p>方便的布尔值切换函数</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Value: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">value</span> ? <span class="hljs-string">&quot;ON&quot;</span> : <span class="hljs-string">&quot;OFF&quot;</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle()&quot;</span>&gt;</span>toggle<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle(true)&quot;</span>&gt;</span>on<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle(false)&quot;</span>&gt;</span>off<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; useToggle &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> [value, toggle] = <span class="hljs-title function_">useToggle</span>();</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="useRefHistory"><a href="#useRefHistory" class="headerlink" title="useRefHistory"></a>useRefHistory</h3><p><code>useRefHistory</code> 跟踪对Ref所做的每一个改变，并将其存储在一个数组中。这使我们能够轻松地为我们的应用程序提供撤销和重做功能。</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="d0207b5f4d774745ac2a646a12ecc66b_tplv-k3u1fbpfcp-zoom-1.gif"></center><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;!canUndo&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;undo()&quot;</span>&gt;</span>撤销<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;!canRedo&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;redo()&quot;</span>&gt;</span>还原<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>历史输入<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in history&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.timestamp&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; item.snapshot &#125;</span><span class="language-xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; useCounter, useRefHistory &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; ref &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> text = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> </span></span><span class="hljs-template-variable">&#123; history, undo, redo, canUndo, canRedo &#125;</span><span class="language-xml"> = useRefHistory(text, </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  // 历史数据容量</span><br><span class="hljs-template-variable">  capacity: 10,</span><br><span class="hljs-template-variable">&#125;</span><span class="language-xml">);</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="useVModel"><a href="#useVModel" class="headerlink" title="useVModel"></a>useVModel</h3><p>封装组件的利器！不用再为了单项数据流的组件封装，而写在组件内写冗余的代码了。<br>直接将<code>useVModel</code>返回的数据作为<strong>响应式对象</strong>用即可。</p><p>首先创建子组件<code>HelloWorld.vue</code></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;NAME&quot;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; useVModel &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; defineProps, defineEmits &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(</span></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">  name: &#123;</span><br><span class="hljs-template-variable">    type: String,</span><br><span class="hljs-template-variable">    required: true,</span><br><span class="hljs-template-variable">  &#125;</span><span class="language-xml"><span class="language-javascript">,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&quot;update:name&quot;</span>]);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">NAME</span> = <span class="hljs-title function_">useVModel</span>(props, <span class="hljs-string">`name`</span>, emit);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在父组件内引用，随着子组件内input输入变化，父组件的_name字段也会同步变化</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">v-model:name</span>=<span class="hljs-string">&quot;_name&quot;</span> /&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">    组件name字段的值为:</span><span class="hljs-template-variable">&#123;&#123; _name &#125;</span><span class="language-xml">&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; useCounter, useRefHistory &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vueuse/core&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; ref &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> _name = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&quot;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>参考资料:<br><a href="https://juejin.cn/post/7074743393254899749">浅谈VueUse设计与实现</a><br><a href="https://juejin.cn/post/7030395303433863205">【一库】vueuse:我不许身为vuer,你的工具集只有lodash!</a></p>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript中的那些设计模式</title>
    <link href="/2022/05/19/JavaScript%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/19/JavaScript%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote><p>限制类实例化次数只能一次，一个类只有一个实例，并提供一个访问它的全局访问点。</p></blockquote><p>单例模式是一种常用的模式，有一些对象我们往往只需要一个，比如线程池、全局缓存、浏览器中的window对象等。在JavaScript开发中，单例模式的用途同样非常广泛。试想一下，当我们单击登录按钮的时候，页面中会出现一个登录浮窗，而这个登录浮窗是唯一的，无论单击多少次登录按钮，这个浮窗都只会被创建一次，那么这个登录浮窗就适合用单例模式来创建。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 加载百度地图js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initBaiduMap</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-comment">// 如果已加载直接返回</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-title class_">BMap</span> !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &#123;<br>      <span class="hljs-title function_">resolve</span>();<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);<br>    script.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;text/javascript&#x27;</span>;<br>    script.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">reject</span>();<br>    &#125;;<br>    script.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;;<br>    script.<span class="hljs-property">src</span> = <span class="hljs-string">`https://api.map.baidu.com/api?v=2.0&amp;ak=ak`</span>;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span>.<span class="hljs-title function_">appendChild</span>(script);<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。</p></blockquote><p>就是把看似毫无联系的代码提取封装、复用，使之更容易被理解和拓展。常见的用于if判断、switch枚举、数据字典等流程判断语句中。</p><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><h5 id="使用策略模式计算等级"><a href="#使用策略模式计算等级" class="headerlink" title="使用策略模式计算等级"></a>使用策略模式计算等级</h5><p>在游戏中，我们每玩完一局游戏都有对用户进行等级评价，比如S级4倍经验，A级3倍经验，B级2倍经验，其他1倍经验，用函数来表达如下：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ada">// 不使用任何模式<br>// 拓展性差，如果增加了一种新的等级C，或者想把S的经验系数改为<span class="hljs-number">5</span>则需要修改函数内容实现<br><span class="hljs-keyword">function</span> <span class="hljs-title">getExperience</span>(level, experience) &#123;<br>  if (level == &#x27;S&#x27;) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">4</span> * experience;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (level == <span class="hljs-string">&#x27;A&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span> * experience;<br>  &#125;<br>  <span class="hljs-keyword">if</span> (level == <span class="hljs-string">&#x27;B&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * experience;<br>  &#125;<br>  <span class="hljs-keyword">return</span> experience;<br>&#125;<br><br><br>// 策略模式<br>const strategy = &#123;<br>  S: <span class="hljs-keyword">function</span> <span class="hljs-title"></span>(experience) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">4</span> * experience;<br>  &#125;,<br>  A: <span class="hljs-keyword">function</span> <span class="hljs-title"></span>(experience) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">3</span> * experience;<br>  &#125;,<br>  B: <span class="hljs-keyword">function</span> <span class="hljs-title"></span>(experience) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">2</span> * experience;<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title">getExperience</span>(strategy, level, experience) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">level</span> <span class="hljs-keyword">in</span> strategy ? strategy[level](experience) : <span class="hljs-type">experience</span>;<br>&#125;<br>var s = getExperience(strategy, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-number">100</span>);<br>var a = getExperience(strategy, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">100</span>);<br>console.log(s, a); // <span class="hljs-number">400</span> <span class="hljs-number">300</span><br></code></pre></td></tr></table></figure><h5 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 原始校验方式</span><br>&lt;form action=<span class="hljs-string">&quot;http://xxx.com/register&quot;</span> id=<span class="hljs-string">&quot;registerForm&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>  请输入用户名：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;userName&quot;</span>/ &gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br>  请输入密码：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>/ &gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br>  请输入手机号码：&lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;phoneNumber&quot;</span>/ &gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&lt;/form&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">var</span> registerForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;registerForm&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  registerForm.<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(registerForm.<span class="hljs-property">userName</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">if</span> (registerForm.<span class="hljs-property">userName</span>.<span class="hljs-property">value</span> === <span class="hljs-string">&quot;&quot;</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;用户名不能为空&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">if</span> (registerForm.<span class="hljs-property">password</span>.<span class="hljs-property">value</span>.<span class="hljs-property">length</span> &lt; <span class="hljs-number">6</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;密码长度不能少于 6 位&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.<span class="hljs-title function_">test</span>(registerForm.<span class="hljs-property">phoneNumber</span>.<span class="hljs-property">value</span>)) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;手机号码格式不正确&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="hljs-comment">// 策略模式</span><br>      <span class="hljs-comment">/***********************策略对象**************************/</span><br>      <span class="hljs-keyword">var</span> strategies = &#123;<br>        <span class="hljs-attr">isNonEmpty</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, errorMsg</span>) &#123;<br>          <span class="hljs-keyword">if</span> (value === <span class="hljs-string">&quot;&quot;</span>) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg<br>          &#125;<br>        &#125;,<br>        <span class="hljs-attr">minLength</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, length, errorMsg</span>) &#123;<br>          <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; length) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg<br>          &#125;<br>        &#125;,<br>        <span class="hljs-attr">isMobile</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, errorMsg</span>) &#123;<br>          <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.<span class="hljs-title function_">test</span>(value)) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg<br>          &#125;<br>        &#125;,<br>      &#125;<br>      <span class="hljs-comment">/***********************Validator 类**************************/</span><br>      <span class="hljs-keyword">class</span> <span class="hljs-title class_">Validator</span> &#123;<br>        <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span> = []<br>        &#125;<br>        <span class="hljs-title function_">add</span>(<span class="hljs-params">dom, rules</span>) &#123;<br>          <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span><br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, rule; (rule = rules[i++]); ) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rule);<br>            ;(<span class="hljs-keyword">function</span> (<span class="hljs-params">rule</span>) &#123;<br>              <span class="hljs-keyword">var</span> strategyAry = rule.<span class="hljs-property">strategy</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;:&quot;</span>)<br>              <span class="hljs-keyword">var</span> errorMsg = rule.<span class="hljs-property">errorMsg</span><br>              self.<span class="hljs-property">cache</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">var</span> strategy = strategyAry.<span class="hljs-title function_">shift</span>()<br>                strategyAry.<span class="hljs-title function_">unshift</span>(dom.<span class="hljs-property">value</span>)<br>                strategyAry.<span class="hljs-title function_">push</span>(errorMsg)<br>                <span class="hljs-keyword">return</span> strategies[strategy].<span class="hljs-title function_">apply</span>(dom, strategyAry)<br>              &#125;)<br>            &#125;)(rule)<br>          &#125;<br>        &#125;<br>        <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, validatorFunc; (validatorFunc = <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>[i++]); ) &#123;<br>            <span class="hljs-keyword">var</span> errorMsg = <span class="hljs-title function_">validatorFunc</span>()<br>            <span class="hljs-keyword">if</span> (errorMsg) &#123;<br>              <span class="hljs-keyword">return</span> errorMsg<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>      <span class="hljs-comment">/***********************客户调用代码**************************/</span><br>      <span class="hljs-keyword">var</span> registerForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;registerForm&quot;</span>)<br>      <span class="hljs-keyword">var</span> validataFunc = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> validator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Validator</span>()<br>        validator.<span class="hljs-title function_">add</span>(registerForm.<span class="hljs-property">userName</span>, [<br>          &#123;<br>            <span class="hljs-attr">strategy</span>: <span class="hljs-string">&quot;isNonEmpty&quot;</span>,<br>            <span class="hljs-attr">errorMsg</span>: <span class="hljs-string">&quot;用户名不能为空&quot;</span>,<br>          &#125;,<br>          &#123;<br>            <span class="hljs-attr">strategy</span>: <span class="hljs-string">&quot;minLength:6&quot;</span>,<br>            <span class="hljs-attr">errorMsg</span>: <span class="hljs-string">&quot;用户名长度不能小于 10 位&quot;</span>,<br>          &#125;,<br>        ])<br>        validator.<span class="hljs-title function_">add</span>(registerForm.<span class="hljs-property">password</span>, [<br>          &#123;<br>            <span class="hljs-attr">strategy</span>: <span class="hljs-string">&quot;minLength:6&quot;</span>,<br>            <span class="hljs-attr">errorMsg</span>: <span class="hljs-string">&quot;密码长度不能小于 6 位&quot;</span>,<br>          &#125;,<br>        ])<br>        validator.<span class="hljs-title function_">add</span>(registerForm.<span class="hljs-property">phoneNumber</span>, [<br>          &#123;<br>            <span class="hljs-attr">strategy</span>: <span class="hljs-string">&quot;isMobile&quot;</span>,<br>            <span class="hljs-attr">errorMsg</span>: <span class="hljs-string">&quot;手机号码格式不正确&quot;</span>,<br>          &#125;,<br>        ])<br>        <span class="hljs-keyword">var</span> errorMsg = validator.<span class="hljs-title function_">start</span>()<br>        <span class="hljs-keyword">return</span> errorMsg<br>      &#125;<br>      registerForm.<span class="hljs-property">onsubmit</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> errorMsg = <span class="hljs-title function_">validataFunc</span>()<br>        <span class="hljs-keyword">if</span> (errorMsg) &#123;<br>          <span class="hljs-title function_">alert</span>(errorMsg)<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>      &#125;<br></code></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><blockquote><p>为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p></blockquote><p>代理模式是一种非常有意义的模式，在生活中可以找到很多代理模式的场景。比如，明星都有经纪人作为代理。如果想请明星来办一场商业演出，只能联系他的经纪人。经纪人会把商业演出的细节和报酬都谈好之后，再把合同交给明星签。</p><p>在面向对象的编程中，代理模式的合理使用能够很好的体现下面两条原则:</p><ul><li><strong>单一职责原则</strong>: 面向对象设计中鼓励将不同的职责分布到细粒度的对象中，Proxy 在原对象的基础上进行了功能的衍生而又不影响原对象，符合松耦合高内聚的设计理念。</li><li><strong>开放-封闭原则</strong>：代理可以随时从程序中去掉，而不用对其他部分的代码进行修改，在实际场景中，随着版本的迭代可能会有多种原因不再需要代理，那么就可以容易的将代理对象换成原对象的调用</li></ul><h4 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h4><h5 id="虚拟代理实现图片预加载"><a href="#虚拟代理实现图片预加载" class="headerlink" title="虚拟代理实现图片预加载"></a>虚拟代理实现图片预加载</h5><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 不使用代理模式</span><br>      const myImage = (<span class="hljs-keyword">function</span> <span class="hljs-literal">()</span> &#123;<br>        const imgNode = document.create<span class="hljs-constructor">Element(<span class="hljs-string">&quot;img&quot;</span>)</span>;<br>        document.body.append<span class="hljs-constructor">Child(<span class="hljs-params">imgNode</span>)</span>;<br>        return &#123;<br>          setSrc: <span class="hljs-keyword">function</span> (src) &#123;<br>            imgNode.src = src;<br>          &#125;,<br>        &#125;;<br>      &#125;)<span class="hljs-literal">()</span>;<br>myImage.set<span class="hljs-constructor">Src(&#x27;<span class="hljs-params">http</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">pic</span>.616pic.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">bg_w1180</span><span class="hljs-operator">/</span>00<span class="hljs-operator">/</span>09<span class="hljs-operator">/</span>75<span class="hljs-operator">/</span>6eISyvLqRL.<span class="hljs-params">jpg</span>!<span class="hljs-operator">/</span><span class="hljs-params">fw</span><span class="hljs-operator">/</span>1120&#x27;)</span><br></code></pre></td></tr></table></figure><p>在chrome控制台设置<code>Slow 3G</code>，然后通过MyImage.setSrc给该img节点设置src，可以看到，在图片被加载好之前，页面中有一段长长的空白时间。</p><p>现在开始引入代理对象proxyImage，通过这个代理对象，在图片被真正加载好之前，页面中将出现一张占位的菊花图loading.gif，来提示用户图片正在加载。代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const proxyImage = (<span class="hljs-keyword">function</span> <span class="hljs-literal">()</span> &#123;<br>  const img = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Image()</span>;<br>  img.onload = <span class="hljs-keyword">function</span> <span class="hljs-literal">()</span> &#123;<br>    <span class="hljs-comment">// 沿用上文定义的myImage函数</span><br>    myImage.set<span class="hljs-constructor">Src(<span class="hljs-params">this</span>.<span class="hljs-params">src</span>)</span>;<br>  &#125;;<br>  return &#123;<br>    setSrc: <span class="hljs-keyword">function</span> (src) &#123;<br>      <span class="hljs-comment">// 此处设置的是尺寸较小的loading gif</span><br>      myImage.set<span class="hljs-constructor">Src(&#x27;<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">media1</span>.<span class="hljs-params">giphy</span>.<span class="hljs-params">com</span><span class="hljs-operator">/</span><span class="hljs-params">media</span><span class="hljs-operator">/</span>58Y1tQU8AAhna<span class="hljs-operator">/</span><span class="hljs-params">giphy</span>.<span class="hljs-params">gif</span>&#x27;)</span>;<br>      img.src = src;<br>    &#125;,<br>  &#125;;<br>&#125;)<span class="hljs-literal">()</span>;<br><br>proxyImage.set<span class="hljs-constructor">Src(<span class="hljs-string">&quot;http://pic.616pic.com/bg_w1180/00/09/75/6eISyvLqRL.jpg!/fw/1120&quot;</span>)</span>;<br></code></pre></td></tr></table></figure><h5 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h5><p>缓存代理可以为一些开销大的运算结果提供暂时的存储，在下次运算时，如果传递进来的参数跟之前一致，则可以直接返回前面存储的运算结果。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 以阶乘为例</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">factorial_recursion</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> n * factorial_recursion(n - <span class="hljs-number">1</span>);<br>  &#125;<br>  <br><span class="hljs-comment">// 加入缓存代理模式</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">factorial_recursion</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;计算了哦&quot;</span>);<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> n * factorial_recursion(n - <span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">var</span> proxy = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    const cache = &#123;&#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) &#123;<br>      <span class="hljs-keyword">if</span> (key in cache) &#123;<br>        <span class="hljs-keyword">return</span> cache[key];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> (cache[key] = factorial_recursion(key));<br>      &#125;<br>    &#125;;<br>  &#125;)();<br><br>  proxy(<span class="hljs-number">2</span>); <span class="hljs-comment">// 无论执行多少次都只打印了两遍‘计算了哦’</span><br>  proxy(<span class="hljs-number">2</span>);<br>  proxy(<span class="hljs-number">2</span>);<br>  proxy(<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h3 id="发布—订阅模式（观察者模式）"><a href="#发布—订阅模式（观察者模式）" class="headerlink" title="发布—订阅模式（观察者模式）"></a>发布—订阅模式（观察者模式）</h3><blockquote><p>发布—订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。在JavaScript开发中，我们一般用事件模型来替代传统的发布—订阅模式。</p></blockquote><p>实际上，只要我们曾经在DOM节点上面绑定过事件函数，那我们就曾经使用过发布—订阅模式。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">// 在这里需要监控用户点击document.<span class="hljs-keyword">body</span>的动作，但是我们没办法预知用户将在什么时候点击。所以我们订阅document.<span class="hljs-keyword">body</span>上的click事件，当<span class="hljs-keyword">body</span>节点被点击时，<span class="hljs-keyword">body</span>节点便会向订阅者发布这个消息。<br>  document.<span class="hljs-keyword">body</span>.addEventListener(<br>    <span class="hljs-string">&quot;click&quot;</span>,<br>    <span class="hljs-keyword">function</span> <span class="hljs-title"></span>() &#123;<br>      alert(1);<br>    &#125;,<br>    <span class="hljs-literal">false</span><br>  );<br></code></pre></td></tr></table></figure><h4 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h4><p>小明最近看上了一套房子，到了售楼处之后才被告知，该楼盘的房子早已售罄。好在售楼MM告诉小明，不久后还有一些尾盘推出，开发商正在办理相关手续，手续办好后便可以购买。小明离开之前，把电话号码留在了售楼处。售楼MM答应他，新楼盘一推出就马上发信息通知小明。小红、小强和小龙也是一样，他们的电话号码都被记在售楼处的花名册上，新楼盘推出的时候，售楼MM会翻开花名册，遍历上面的电话号码，依次发送一条短信来通知他们。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> event = &#123;<br>  <span class="hljs-comment">// 客户列表</span><br>  <span class="hljs-attr">clientList</span>: [],<br>  <span class="hljs-attr">listen</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">clientList</span>[key]) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientList</span>[key] = [];<br>    &#125;<br>    <span class="hljs-comment">// 订阅的消息添加进缓存列表</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientList</span>[key].<span class="hljs-title function_">push</span>(fn);<br>  &#125;,<br>  <span class="hljs-attr">trigger</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 获取第一个参数</span><br>    <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-keyword">var</span> fns = <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientList</span>[key];<br>    <span class="hljs-comment">// 没有绑定对应的消息</span><br>    <span class="hljs-keyword">if</span> (!fns || fns.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; fns.<span class="hljs-property">length</span>; i++) &#123;<br>      fns[i].<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>    &#125;<br>  &#125;,<br>&#125;;<br><span class="hljs-comment">// 定义一个installEvent函数，这个函数可以给所有的对象都动态安装发布—订阅功能：</span><br><span class="hljs-keyword">var</span> installEvent = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> event) &#123;<br>    obj[key] = event[key];<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> salesOffices = &#123;&#125;;<br><span class="hljs-title function_">installEvent</span>(salesOffices);<br>salesOffices.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;价格是&quot;</span> + price);<br>&#125;);<br>salesOffices.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;价格是&quot;</span> + price);<br>&#125;);<br>salesOffices.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&quot;小红&quot;</span>, <span class="hljs-number">2000</span>);<br>salesOffices.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&quot;小明&quot;</span>, <span class="hljs-number">12000</span>);<br></code></pre></td></tr></table></figure><p>比如现在有两个模块，a模块里面有一个按钮，每次点击按钮之后，b模块里的div中会显示按钮的总点击次数，我们用全局发布—订阅模式完成下面的代码，使得a模块和b模块可以在保持封装性的前提下进行通信。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&lt;button id=<span class="hljs-string">&quot;btn&quot;</span>&gt;click&lt;/button&gt;<br>&lt;input type=<span class="hljs-string">&quot;text&quot;</span> id=<span class="hljs-string">&quot;input&quot;</span> /&gt;<br><br><span class="hljs-keyword">var</span> a = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> btn = document.querySelector(<span class="hljs-string">&quot;button&quot;</span>);<br>  btn.onclick = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 沿用上文定义的event对象</span><br>    event.trigger(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-built_in">count</span>++);<br>  &#125;;<br>&#125;)();<br><br><span class="hljs-keyword">var</span> b = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> input = document.querySelector(<span class="hljs-string">&quot;input&quot;</span>);<br>  event.listen(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">count</span>) &#123;<br>    input.value = <span class="hljs-built_in">count</span>;<br>  &#125;);<br>&#125;)();<br></code></pre></td></tr></table></figure><h3 id="设计原则和编程技巧"><a href="#设计原则和编程技巧" class="headerlink" title="设计原则和编程技巧"></a>设计原则和编程技巧</h3><h4 id="单一职责原则（SRP）"><a href="#单一职责原则（SRP）" class="headerlink" title="单一职责原则（SRP）"></a>单一职责原则（SRP）</h4><blockquote><p>修改代码总是一件危险的事情，特别是当两个职责耦合在一起的时候，一个职责发生变化可能会影响到其他职责的实现，造成意想不到的破坏，这种耦合性得到的是低内聚和脆弱的设计。因此，SRP原则体现为：一个对象（方法）只做一件事情。</p></blockquote><p>举个现实例子：<br>如果一个电视机内置了DVD机，当电视机坏了的时候，DVD机也没法正常使用，那么一个DVD发烧友通常不会选择这样的电视机。但如果我们的客厅本来就小得夸张，或者更在意DVD在使用上的方便，那让电视机和DVD机耦合在一起就是更好的选择。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> appendDiv = <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, l = data.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br><span class="hljs-keyword">const</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>);<br>div.<span class="hljs-property">innerHTML</span> = data[i];<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div);<br>&#125;<br>&#125;;<br><br><span class="hljs-title function_">appendDiv</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]);<br></code></pre></td></tr></table></figure><p>这其实是一段很常见的代码，经常用于ajax请求之后，在回调函数中遍历ajax请求返回的数据，然后在页面中渲染节点。appendDiv函数本来只是负责渲染数据，但是在这里它还承担了遍历聚合对象data的职责。我们想象一下，如果有一天cgi返回的data数据格式从array变成了object，那我们遍历data的代码就会出现问题，必须改成for ( var i in data )的方式，这时候必须去修改appendDiv里的代码，否则因为遍历方式的改变，导致不能顺利往页面中添加div节点。</p><p>正确写法如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const each = <span class="hljs-keyword">function</span> (obj, callback) &#123;<br><span class="hljs-keyword">let</span> value,<br>i = <span class="hljs-number">0</span>,<br>length = obj.length,<br>isArray = is<span class="hljs-constructor">Arraylike(<span class="hljs-params">obj</span>)</span>; <span class="hljs-comment">// isArraylike 函数这里未实现</span><br><span class="hljs-keyword">if</span> (isArray) &#123; <span class="hljs-comment">// 迭代类数组</span><br><span class="hljs-keyword">for</span> (; i &lt; length; i++) &#123;<br>callback.call(obj<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>, i, obj<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> obj) &#123; <span class="hljs-comment">// 迭代 object 对象</span><br>value = callback.call(obj<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>, i, obj<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>);<br>&#125;<br>&#125;<br>return obj;<br>&#125;;<br><br>const appendDiv = <span class="hljs-keyword">function</span> (data) &#123;<br>each(data, <span class="hljs-keyword">function</span> (i, n) &#123;<br>const div = document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">div</span>&#x27;)</span>;<br>div.innerHTML = n;<br>document.body.append<span class="hljs-constructor">Child(<span class="hljs-params">div</span>)</span>;<br>&#125;);<br>&#125;;<br><br>append<span class="hljs-constructor">Div([1, 2, 3, 4, 5, 6])</span>;<br>append<span class="hljs-constructor">Div(&#123; <span class="hljs-params">a</span>: 1, <span class="hljs-params">b</span>: 2, <span class="hljs-params">c</span>: 3, <span class="hljs-params">d</span>: 4 &#125;)</span>;<br><br></code></pre></td></tr></table></figure><h5 id="SRP原则的优缺点"><a href="#SRP原则的优缺点" class="headerlink" title="SRP原则的优缺点"></a>SRP原则的优缺点</h5><p>SRP原则的优点是降低了单个类或者对象的复杂度，按照职责把对象分解成更小的粒度，这有助于代码的复用，也有利于进行单元测试。当一个职责需要变更的时候，不会影响到其他的职责。但SRP原则也有一些缺点，最明显的是会增加编写代码的复杂度。当我们按照职责把对象分解成更小的粒度之后，实际上也增大了这些对象之间相互联系的难度。</p><h4 id="最少知识原则（LKP）"><a href="#最少知识原则（LKP）" class="headerlink" title="最少知识原则（LKP）"></a>最少知识原则（LKP）</h4><blockquote><p>最少知识原则要求我们在设计程序时，应当尽量减少对象之间的交互。如果两个对象之间不必彼此直接通信，那么这两个对象就不要发生直接的相互联系。常见的做法是引入一个第三者对象，来承担这些对象之间的通信作用。如果一些对象需要向另一些对象发起请求，可以通过第三者对象来转发这些请求。</p></blockquote><p>最简单的外观模式应该是类似下面的代码：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const facade <span class="hljs-operator">=</span> function () &#123;<br>  A()<span class="hljs-comment">;</span><br>  B()<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br>facade()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="开放-封闭原则（OCP）"><a href="#开放-封闭原则（OCP）" class="headerlink" title="开放-封闭原则（OCP）"></a>开放-封闭原则（OCP）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">所谓开放封闭原则就是软件实体应该对扩展开放，而对修改封闭。开放封闭原则是所有面向对象原则的核心。软件设计本身所追求的目标就是封装变化，降低耦合，而开放封闭原则正是对这一目标的最直接体现。<br><br>   开放封闭原则主要体现在两个方面：<br><br>   对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。<br><br>   对修改封闭，意味着类一旦设计完成，就可以独立其工作，而不要对类尽任何修改。<br></code></pre></td></tr></table></figure><p>在项目需求变迁的过程中，我们经常会找到相关代码，然后改写它们。这似乎是理所当然的事情，不改动代码怎么满足新的需求呢？想要扩展一个模块，最常用的方式当然是修改它的源代码。如果一个模块不允许修改，那么它的行为常常是固定的。然而，改动代码是一种危险的行为，也许我们都遇到过bug越改越多的场景。刚刚改好了一个bug，但是又在不知不觉中引发了其他的bug。此时就需要使用开放-封闭原则。</p><h5 id="示例1：扩展window-onload函数"><a href="#示例1：扩展window-onload函数" class="headerlink" title="示例1：扩展window.onload函数"></a>示例1：扩展window.onload函数</h5><p>假如我们接到了一个新的需求，即在window.onload函数中打印出页面中的所有节点数量。这当然难不倒我们了。于是我们打开文本编辑器，搜索出window.onload函数在文件中的位置，在函数内部添加代码，如果是更复杂的需求呢。</p><p>如果目前的window.onload函数是一个拥有500行代码的巨型函数，里面密布着各种变量和交叉的业务逻辑，而我们的需求又不仅仅是打印一个log这么简单。那么“改好一个bug，引发其他bug”这样的事情就很可能会发生。我们永远不知道刚刚的改动会有什么副作用，很可能会引发一系列的连锁反应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">after</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">afterfn</span>) &#123;<br>    <span class="hljs-keyword">let</span> _self = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">let</span> ret = _self.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        afterfn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = (<span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> || <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;).<span class="hljs-title function_">after</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;*&#x27;</span>).<span class="hljs-property">length</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>通过动态装饰函数的方式，我们完全不用理会从前window.onload函数的内部实现，无论它的实现优雅或是丑陋。就算我们作为维护者，拿到的是一份混淆压缩过的代码也没有关系。只要它从前是个稳定运行的函数，那么以后也不会因为我们的新增需求而产生错误。新增的代码和原有的代码可以井水不犯河水。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows软件推荐</title>
    <link href="/2022/05/16/windows%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <url>/2022/05/16/windows%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    
    <content type="html"><![CDATA[<h4 id="截图利器-snipaste"><a href="#截图利器-snipaste" class="headerlink" title="截图利器 snipaste"></a>截图利器 snipaste</h4><p>无需登录QQ、微信，f1一键截图，还可以将截图订在桌面</p><p><a href="https://zh.snipaste.com/">官网</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>分享发现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法图解笔记</title>
    <link href="/2022/03/09/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/03/09/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><blockquote><p>二分查找是一种算法，其输入是一个有序的元素列表（必须有序的是因为每次二分后，能通过中间值与目标值得大小关系判断出答案所在区间）。如果要查找的元素包含在列表中，二分查找返回其位置；否则返回null。</p></blockquote><p><strong>时间复杂度：log2n</strong>(<a href="https://xypecho.github.io/2019/12/11/%E7%90%86%E8%A7%A3%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/">如果不知道什么是时间复杂度可以看这篇</a>)</p><p>使用场景1：假设要在电话簿中找一个名字以K打头的人，（现在谁还用电话簿！）可以从头开始翻页，直到进入以K打头的部分。但你很可能不这样做，而是从中间开始，因为你知道以K打头的名字在电话簿中间。</p><p>使用场景2：1-100内随便想一个数字，不管我心里想的是哪个数字，你在7次之内都能猜到，因为每次猜测都将排除很多数字。（假设猜想的数字为1，猜测过程则为50 -&gt; 25 -&gt; 13 -&gt; 7 -&gt; 4 -&gt; 2 -&gt; 1）</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xquery">/**<br>    * 获取数组开始位置(索引值，一般为<span class="hljs-number">0</span>)，结束位置(数组的长度减<span class="hljs-number">1</span>)，中间位置(向下取整(<span class="hljs-keyword">start</span> + <span class="hljs-keyword">end</span>) / <span class="hljs-number">2</span>)<br>    * 判断中间位置的值是否是需要猜测的值，如果中间位置的值大于需要猜测的值则修改结束位置(<span class="hljs-keyword">end</span> - <span class="hljs-number">1</span>)，反之则修改开始位置(<span class="hljs-keyword">start</span> + <span class="hljs-number">1</span>)<br>*/<br>const binary_search = (<span class="hljs-keyword">array</span>, <span class="hljs-type">item</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">start</span> = <span class="hljs-number">0</span>,<br>        <span class="hljs-keyword">end</span> = <span class="hljs-keyword">array</span>.length - <span class="hljs-number">1</span>;<br>    while (<span class="hljs-keyword">start</span> &lt;= <span class="hljs-keyword">end</span>) &#123;<br>        const middle = Math<span class="hljs-built_in">.floor</span>((<span class="hljs-keyword">start</span> + <span class="hljs-keyword">end</span>) / <span class="hljs-number">2</span>),<br>            guess = <span class="hljs-keyword">array</span>[middle];<br>        <span class="hljs-keyword">if</span> (guess === <span class="hljs-type">item</span>) &#123;<br>            <span class="hljs-keyword">return</span> middle;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (guess &gt; <span class="hljs-type">item</span>) &#123;<br>            <span class="hljs-keyword">end</span> = middle - <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guess &lt; <span class="hljs-type">item</span>) &#123;<br>            <span class="hljs-keyword">start</span> = middle + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h3><blockquote><p>需要存储多项数据时，有两种基本方式——数组和链表。但它们并非都适用于所有的情形，因此知道它们的差别很重要。接下来介绍数组和链表以及它们的优缺点。</p></blockquote><h4 id="数组的优缺点"><a href="#数组的优缺点" class="headerlink" title="数组的优缺点"></a>数组的优缺点</h4><p>数组在内存中存储的数据都是相连的，编程中数组用得更多一点，因为它支持随机访问。</p><p>数组的缺陷在于插入元素时则必须将后面的元素都向后移，删除元素时所有的元素都要往前移。</p><h4 id="链表的优缺点"><a href="#链表的优缺点" class="headerlink" title="链表的优缺点"></a>链表的优缺点</h4><p>链表中的元素可存储在内存的任何地方，链表的每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一起。<br>使用链表时，插入元素很简单，只需修改它前面的那个元素指向的地址。删除同理，只需修改前一个元素的指向地址即可。</p><p>链表的缺陷在于，需要读取链表的最后一个元素时，你不能直接读取，因为你不知道它所处的地址，必须先访问元素#1，从中获取元素#2的地址，再访问元素#2并从中获取元素#3的地址，以此类推，直到访问最后一个元素。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>❑ 数组的读取速度很快。❑ 链表的插入和删除速度很快。</p><h4 id="常见的数组和链表操作的运行时间"><a href="#常见的数组和链表操作的运行时间" class="headerlink" title="常见的数组和链表操作的运行时间"></a>常见的数组和链表操作的运行时间</h4><p>| 数组 | 链表<br>:- | :- | :-<br>读取 | O(1) | O(n)<br>插入 | O(n) | O(1)<br>删除 | O(n) | O(1)</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序是一种灵巧的算法，但其速度不是很快。</p><p>有一个歌单，里面有歌曲和播放次数。现在有一个需求，需要对歌单按照播放次数进行排序。<br>实现思路，遍历这个列表，找出作品播放次数最多的乐队，并将该乐队添加到一个新列表中。然后继续再次这样做，找出播放次数第二多的乐队，如此循环…<br>其实这就是选择排序。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs inform7">const selectionSort = arr =&gt; &#123;<br>    let smallest = 0,<br>        len = arr.length;<br>    for (let i = 0; i &lt; len; i++) &#123;<br>        smallest = i<br>        for (let j = i + 1; j &lt; len; j++) &#123;<br>            if (arr<span class="hljs-comment">[j]</span> &lt; arr<span class="hljs-comment">[smallest]</span>) &#123;<br>                smallest = j<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">[arr<span class="hljs-comment">[i]</span>, arr<span class="hljs-comment">[smallest]</span>]</span> = <span class="hljs-comment">[arr<span class="hljs-comment">[smallest]</span>, arr<span class="hljs-comment">[i]</span>]</span>;<br>    &#125;<br>    return arr<br>&#125;<br></code></pre></td></tr></table></figure><p>书中的代码则是另外一个版本，虽然代码冗余，但是…似乎更通俗易懂？</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-keyword">const</span> findSmallestIndex = arr =&gt; &#123;<br>    <span class="hljs-keyword">let</span> smallestIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt; arr[smallestIndex]) &#123;<br>            smallestIndex = i<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> smallestIndex<br>&#125;<br><span class="hljs-keyword">const</span> selectionSort = arr =&gt; &#123;<br>    <span class="hljs-keyword">let</span> copyArr = [...arr], <span class="hljs-comment">// 浅拷贝防止改变原数组</span><br>        len = copyArr.length,<br>        ans = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">let</span> smallestIndex = findSmallestIndex(copyArr);<br>        ans.push(copyArr.splice(smallestIndex, <span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]) <span class="hljs-comment">// opyArr.splice(smallestIndex, 1)[0]就是最小的元素</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><blockquote><p>编写递归函数时，必须告诉它何时停止递归。正因为如此，每个递归函数都有两部分：基线条件（base case）和递归条件（recursive case）。递归条件指的是函数调用自己，而基线条件则指的是函数不再调用自己，从而避免形成无限循环。</p></blockquote><p><img src="/epub_22806916_75.jpg" alt="alt text" title="Title"></p><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><blockquote><p>栈（stack）又名堆栈，是一种遵循后进先出（last-in，first-out，LIFO）原则的有序集合。新添加或待删除的元素都保存在栈的末尾，称作栈顶，另一端称作栈底。在栈里，新元素都靠近栈顶，旧元素都接近栈底。<br>就好比：一个死胡同，前面是“此路不通”，只有一个入口，如果一队人进入，只能队尾变对首出去。</p></blockquote><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h4><blockquote><p>分而治之（divide and conquer, D&amp;C）——一种著名的递归式问题解决方法。<br>使用D&amp;C解决问题的过程包括两个步骤：<br>(1) 找出基线条件，这种条件必须尽可能简单。<br>(2) 不断将问题分解（或者说缩小规模），直到符合基线条件。</p></blockquote><h5 id="代码实现1-数组求和"><a href="#代码实现1-数组求和" class="headerlink" title="代码实现1 数组求和"></a>代码实现1 数组求和</h5><p>给定一个数字数组。将这些数字相加，并返回结果。</p><p>基线条件，数组为空或者数组只有一个元素<br>递归条件，每次相加后剔除当前元素</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">array</span>) &#123;<br>  let ans = <span class="hljs-number">0</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>.<span class="hljs-built_in">length</span> === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>.<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    ans = <span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>] + <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">array</span>.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>))<br>  &#125;<br>  <span class="hljs-keyword">return</span> ans<br>&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])) <span class="hljs-comment">// 15</span><br><br><span class="hljs-comment">// es6写法</span><br>const <span class="hljs-built_in">sum</span> = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">array</span></span>) =&gt;</span> <span class="hljs-built_in">array</span>.<span class="hljs-built_in">length</span> === <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : (<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>] += <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">array</span>.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>)))<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])) <span class="hljs-comment">// 15</span><br></code></pre></td></tr></table></figure><h5 id="代码实现2-找出数组中最大的数字"><a href="#代码实现2-找出数组中最大的数字" class="headerlink" title="代码实现2 找出数组中最大的数字"></a>代码实现2 找出数组中最大的数字</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const findMax = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">array</span>, <span class="hljs-built_in">max</span> = <span class="hljs-number">0</span></span>) =&gt;</span> <span class="hljs-built_in">array</span>.<span class="hljs-built_in">length</span> === <span class="hljs-number">0</span> ? <span class="hljs-built_in">max</span> : findMax(<span class="hljs-built_in">array</span>.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>), <span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>] &gt; <span class="hljs-built_in">max</span> ? <span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>] : <span class="hljs-built_in">max</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(findMax([<span class="hljs-number">0</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])) <span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure><h4 id="快速排序算法"><a href="#快速排序算法" class="headerlink" title="快速排序算法"></a>快速排序算法</h4><p>快速排序是最快的排序算法之一，也是D&amp;C典范。<br>D&amp;C将问题逐步分解。使用D&amp;C处理列表时，基线条件很可能是空数组或只包含一个元素的数组。</p><h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><p>原理及es5版本可以看<a href="https://xypecho.github.io/2019/12/12/javascript%E4%B8%AD%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/#6%E3%80%81-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F-Quick-Sort">这里</a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const quicksort = <span class="hljs-function"><span class="hljs-params">array</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>.<span class="hljs-built_in">length</span> &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">array</span><br>    &#125;<br>    const pivot = <span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 基准值</span><br>    <span class="hljs-comment">// slice(1)是为了去除当前基准值</span><br>    const <span class="hljs-built_in">left</span> = <span class="hljs-built_in">array</span>.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &lt;= pivot);<br>    const <span class="hljs-built_in">right</span> = <span class="hljs-built_in">array</span>.<span class="hljs-built_in">slice</span>(<span class="hljs-number">1</span>).<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt; pivot);<br>    <span class="hljs-keyword">return</span> [...quicksort(<span class="hljs-built_in">left</span>), pivot, ...quicksort(<span class="hljs-built_in">right</span>)]<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(quicksort([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">0</span>]))<br></code></pre></td></tr></table></figure><h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3><h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><blockquote><p>哈希表(Hash table，也叫散列表)，是根据关键码值(Key value)而直接进行访问的数据结构。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。</p></blockquote><h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><p>假设你负责管理一个投票站。显然，每人只能投一票，但如何避免重复投票呢？</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">const voted = &#123;&#125;<br><br>const checkVoter = (name) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (voted<span class="hljs-selector-attr">[name]</span>) &#123;<br>    console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&quot;kick them out!&quot;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    voted<span class="hljs-selector-attr">[name]</span> = true<br>    console<span class="hljs-selector-class">.log</span>(<span class="hljs-string">&quot;let them vote!&quot;</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">checkVoter</span><span class="hljs-params">(<span class="hljs-string">&quot;tom&quot;</span>)</span></span> <span class="hljs-comment">// let them vote!</span><br><span class="hljs-function"><span class="hljs-title">checkVoter</span><span class="hljs-params">(<span class="hljs-string">&quot;mike&quot;</span>)</span></span> <span class="hljs-comment">// let them vote!</span><br><span class="hljs-function"><span class="hljs-title">checkVoter</span><span class="hljs-params">(<span class="hljs-string">&quot;mike&quot;</span>)</span></span> <span class="hljs-comment">// kick them out!</span><br></code></pre></td></tr></table></figure><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><h6 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h6><blockquote><p>假设你有个侄女，总是没完没了地问你有关星球的问题。火星离地球多远？月球呢？木星呢？每次你都得在Google搜索，再告诉她答案。这需要几分钟。现在假设她老问你月球离地球多远，很快你就记住了月球离地球238900英里。因此不必再去Google搜索，你就可以直接告诉她答案。这就是缓存的工作原理：网站将数据记住，而不再重新计算。</p></blockquote><p>缓存如下两个优点。❑ 用户能够更快地看到网页，就像你记住了月球与地球之间的距离时一样。下次你侄女再问你时，你就不用再使用Google搜索，立刻就可以告诉她答案。❑ Facebook需要做的工作更少。</p><p>缓存是一种常用的加速方式，所有大型网站都使用缓存，而缓存的数据则存储在散列表中！</p><p>散列表适合用于：❑ 模拟映射关系；❑ 防止重复；❑ 缓存&#x2F;记住数据，以免服务器再通过处理来生成它们。</p><h4 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h4><blockquote><p>由于散列函数具有无限的输入长度和预定义的输出长度，因此不可避免地存在两个不同的输入产生相同输出散列的可能性。如果两个单独的输入产生相同的哈希输出，则称为冲突。</p></blockquote><p>散列表、数组和链表操作的运行时间</p><table><thead><tr><th></th><th>散列表(平均情况)</th><th>散列表(最糟情况)</th><th>数组</th><th>链表</th></tr></thead><tbody><tr><td>查找</td><td>O(1)</td><td>O(n)</td><td>O(1)</td><td>O(n)</td></tr><tr><td>插入</td><td>O(1)</td><td>O(n)</td><td>O(n)</td><td>O(1)</td></tr><tr><td>删除</td><td>O(1)</td><td>O(n)</td><td>O(n)</td><td>O(1)</td></tr></tbody></table><p>在平均情况下，散列表的查找（获取给定索引处的值）速度与数组一样快，而插入和删除速度与链表一样快，因此它兼具两者的优点！但在最糟情况下，散列表的各种操作的速度都很慢。因此，在使用散列表时，避开最糟情况至关重要。而要避免冲突，需要有：❑ 较低的填装因子；❑ 良好的散列函数。</p><h4 id="填装因子"><a href="#填装因子" class="headerlink" title="填装因子"></a>填装因子</h4><blockquote><p>散列表的填装因子很容易计算，计算方式：散列表包含的元素数 &#x2F; 散列表位置总数</p></blockquote><center>    <img style="border-radius: 0.3125em;    width:30%;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="epub_22806916_199.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">填装因子2/5，即0.4</div></center><p>假设你要在散列表中存储100种商品的价格，而该散列表包含100个位置。那么在最佳情况下，每个商品都将有自己的位置。这个散列表的填装因子则为1<br>如果这个散列表只有50个位置呢？填充因子将为2。不可能让每种商品都有自己的位置，因为没有足够的位置！填装因子大于1意味着商品数量超过了数组的位置数。一旦填装因子开始增大，你就需要在散列表中添加位置，这被称为调整长度（resizing）。</p><p>一个不错的经验规则是：一旦填装因子大于0.7，就调整散列表的长度。</p><h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><blockquote><p>广度优先搜索(breadth-first search,BFS)是一种图算法，能找出两样东西之间的最短距离。<br>可帮助回答两类问题:<br>❑ 第一类问题：从节点A出发，有前往节点B的路径吗？<br>❑ 第二类问题：从节点A出发，前往节点B的哪条路径最短？</p></blockquote><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><p>假设你经营着一个芒果农场，需要寻找芒果销售商，以便将芒果卖给他。如何在好友及好友的好友中寻找到芒果销售商？</p><center>    <img style="border-radius: 0.3125em;    width:30%;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="epub_22806916_235.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">实现原理</div></center><p>ps:更新队列时，我使用术语“入队”和“出队”，但你也可能遇到术语“压入”和“弹出”。压入大致相当于入队，而弹出大致相当于出队。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">graph</span> = &#123;&#125;;<br><span class="hljs-keyword">graph</span>.you = [<span class="hljs-string">&quot;alice&quot;</span>, <span class="hljs-string">&quot;bob&quot;</span>, <span class="hljs-string">&quot;claire&quot;</span>];<br><span class="hljs-keyword">graph</span>.bob = [<span class="hljs-string">&quot;anuj&quot;</span>, <span class="hljs-string">&quot;peggy&quot;</span>];<br><span class="hljs-keyword">graph</span>.alice = [<span class="hljs-string">&quot;peggy&quot;</span>];<br><span class="hljs-keyword">graph</span>.claire = [<span class="hljs-string">&quot;thom&quot;</span>, <span class="hljs-string">&quot;jonny&quot;</span>];<br><span class="hljs-keyword">graph</span>.anuj = [];<br><span class="hljs-keyword">graph</span>.peggy = [];<br><span class="hljs-keyword">graph</span>.thom = [];<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 这个函数检查人的姓名是否以m结尾：如果是，他就是芒果销售商。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">const</span> isSeller = name =&gt; name[name.length - 1] === <span class="hljs-string">&quot;m&quot;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">search</span> = name =&gt; &#123;<br>    let searchQueue = [...<span class="hljs-keyword">graph</span>[name]];<br>    <span class="hljs-comment">// 已经查找过的人</span><br>    <span class="hljs-keyword">const</span> searched = [];<br>    <span class="hljs-keyword">while</span> (searchQueue.length &gt; 0) &#123;<br>        <span class="hljs-comment">// person为当前查找的人</span><br>        <span class="hljs-keyword">const</span> person = searchQueue.shift();<br>        <span class="hljs-keyword">if</span> (searched.indexOf(person) === -1) &#123;<br>            <span class="hljs-keyword">if</span> (isSeller(person)) &#123;<br>                console.<span class="hljs-built_in">log</span>(`<span class="hljs-variable">$&#123;person&#125;</span>是芒果商人`)<br>                <span class="hljs-keyword">return</span> true<br>            &#125;<br>            searched.push(person)<br>            <span class="hljs-comment">// 将当前查找人的好友加入查找队列</span><br>            searchQueue = searchQueue.concat(<span class="hljs-keyword">graph</span>[person])<br>        &#125;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">search</span>(&#x27;you&#x27;)<br></code></pre></td></tr></table></figure><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><blockquote><p>队列是一种先进先出（First In First Out, FIFO）的数据结构，而栈是一种后进先出（Last In First Out, LIFO）的数据结构。</p></blockquote><p>你需要按加入顺序检查搜索列表中的人，否则找到的就不是最短路径，因此搜索列表必须是队列。</p><h3 id="狄克斯特拉算法"><a href="#狄克斯特拉算法" class="headerlink" title="狄克斯特拉算法"></a>狄克斯特拉算法</h3><ol><li>狄克斯特拉算法用于在加权图中查找最短路径。</li><li>仅当权重为正时狄克斯特拉算法才管用。</li><li>如果图中包含负权边，请使用贝尔曼-福德算法。</li></ol><h3 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h3><blockquote><p>贪婪算法很简单：每步都采取最优的做法。用专业术语说，就是你每步都选择局部最优解，最终得到的就是全局最优解。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年终总结</title>
    <link href="/2021/12/26/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2021/12/26/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>今年的关键词应该就是<code>相亲</code>了。倒不是说今年相亲很频繁或者怎么样，而是今年的一段相亲给我留下的印象极其深刻。</p></blockquote><h4 id="打脸环节"><a href="#打脸环节" class="headerlink" title="打脸环节"></a>打脸环节</h4><p>先看看去年的flag</p><ol><li>~~~location &#x3D;&#x3D;&#x3D; ‘南京’ ? ‘月入过16k’ : (location &#x3D;&#x3D;&#x3D; ‘上海’ ? ‘20k+’ : ‘auto’)~~~</li><li>~~~改变穿搭，在衣服上舍得投入~~~</li><li>坚持跑步，继续学习护肤相关知识</li><li>学习新技术，保持学习，多coding</li><li>每年都会立的flag…脱单，要学会真诚大胆的追求妹子，希望明年写小结的时候不再是一个人吧</li><li>整一个自己喜欢的产品，例如最近在写的小程序</li></ol><p>除了第一条完美完成外，其他完成度都不高，特别是第四条失败的透底，害。</p><h4 id="一些数据"><a href="#一些数据" class="headerlink" title="一些数据"></a>一些数据</h4><h5 id="消费"><a href="#消费" class="headerlink" title="消费"></a>消费</h5><table><thead><tr><th align="left">app</th><th align="left">金额（元）</th></tr></thead><tbody><tr><td align="left">支付宝</td><td align="left">51208.94</td></tr><tr><td align="left">微信</td><td align="left">32894.36</td></tr><tr><td align="left">合计</td><td align="left">84103.3</td></tr></tbody></table><h5 id="other"><a href="#other" class="headerlink" title="other"></a>other</h5><p>理财收益为-6384.25，收益率为-3.15%…</p><p>b站看了6505个视频，总计时长172.1小时…</p><p>今年一共阅读162小时，读完25本书…</p><p>一共跑步22次共101km，累计用时11小时23分钟，平均配速6.42，累计消耗8570千卡…</p><p>一共听过329首歌，共计310小时…</p><p>表白过5个妹子，全gg（实在太自以为是了，青蛙怎么可能变王子呢）…</p><h4 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h4><p>阅读是今年最大的收获了，说来好笑，这个爱好的培养最初的动机竟是为了能和相亲的妹子有更多共同话题。</p><center style="display:flex;justify-content: space-between;">    <img style="border-radius: 0.3125em;    width:30%;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="wxread1.jpg">    <img style="border-radius: 0.3125em;    width:30%;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="wxread2.jpg"></center><p>虽然相亲没能有更多故事…但是这段奇妙的经历还是挺值得纪念的。</p><p>聊聊读书吧，看完了几本长篇，读完了以前弃书的《三体》，囫囵吞枣般看完了红宝书，其他则是一些零零碎碎的短篇。</p><p>阅读带来是眼界的开阔，看书时偶尔会冒出一句‘卧槽？还可以这样写’，同时会收藏了一写~~~骚话~~~写的很好的文字。</p><h4 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h4><p>自2016年毕业工作6年后，明显感觉到没有以前的学习热情了，这样下去不行的(华农表情包.jpg)，今年要做出改变了。</p><h4 id="每年的保留节目，立flag"><a href="#每年的保留节目，立flag" class="headerlink" title="每年的保留节目，立flag"></a>每年的保留节目，立flag</h4><ol><li>成功脱单</li><li>跳槽(期望工资首位数可以改变)</li><li>坚持跑步，每周1-2次5km，年总跑步200km</li><li>阅读，读完40本书</li><li>少喝甚至不喝饮料(包括奶茶)，多喝水</li><li>省钱，设置一个穿搭基金，超过则今年停止穿搭消费</li></ol>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何实现继承</title>
    <link href="/2021/10/26/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/"/>
    <url>/2021/10/26/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<blockquote><p>继承是指子类拥有父类的所有属性与方法，而无需重新定义。</p></blockquote><h3 id="class实现继承"><a href="#class实现继承" class="headerlink" title="class实现继承"></a>class实现继承</h3><p>es6新引入的class关键字具有正式定义类的能力，class之间通过使用extends关键字实现继承，这比通过修改原型链实现继承，要方便清晰很多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span> &#123;<br>    <span class="hljs-comment">// constructor关键字用于在类定义块内部创建类的构造函数，使用new操作符创建类的新实例时，会调用这个函数</span><br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>    <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;my name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Parent</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>        <span class="hljs-comment">// super()的行为如同调用构造函数，如果需要给父类构造函数传参，则需要手动传入，例如此处的name参数</span><br>        <span class="hljs-variable language_">super</span>(name);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br>    <span class="hljs-title function_">sayAge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;my age is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">23</span>)<br>child.<span class="hljs-title function_">sayHello</span>() <span class="hljs-comment">// hello</span><br>child.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// my name is 小明</span><br>child.<span class="hljs-title function_">sayAge</span>() <span class="hljs-comment">// my age is 23</span><br></code></pre></td></tr></table></figure><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>思路：将父类的实例作为子类的原型<br>缺点：来自原型对象的所有属性被所有实例共享</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>];<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>(); <br><span class="hljs-keyword">let</span> child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">23</span>);<br>child.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;black&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">name</span>); <span class="hljs-comment">// 小明</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">age</span>); <span class="hljs-comment">// 23</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">colors</span>); <span class="hljs-comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;]</span><br>child.<span class="hljs-title function_">sayHello</span>() <span class="hljs-comment">// hello</span><br>child.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// hi</span><br><br><span class="hljs-keyword">let</span> child1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;小明1&#x27;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child1.<span class="hljs-property">colors</span>); <span class="hljs-comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="构造继承-经典继承"><a href="#构造继承-经典继承" class="headerlink" title="构造继承(经典继承)"></a>构造继承(经典继承)</h3><p>思路：在子类构造函数中调用父类构造函数<br>缺点：只能继承父类的实例属性和方法，不能继承原型属性&#x2F;方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 此处可以引申，方法挂载到函数内部和定义到原型上有什么区别</span><br><span class="hljs-comment">// 挂载在函数内部的方法，实例内部会复制构造函数的方法,存在浪费内存；而通过原型法添加方法的好处是:所有对象都共享，节约内存</span><br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-keyword">let</span> child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">name</span>); <span class="hljs-comment">// 小明</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">age</span>); <span class="hljs-comment">// 23</span><br>child.<span class="hljs-title function_">sayHello</span>() <span class="hljs-comment">// hello</span><br>child.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// Uncaught TypeError: child.sayHi is not a function</span><br></code></pre></td></tr></table></figure><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>组合继承弥补了原型链和盗用构造函数的不足，是JavaScript中使用最多的继承模式。而且组合继承也保留了instanceof操作符和isPrototypeOf()方法识别合成对象的能力。</p><p>思路：使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>(); <span class="hljs-comment">// 重写原型对象，Child.prototype赋值为Parent的实例</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Child</span>; <span class="hljs-comment">// 组合继承需要修复构造函数指向，不然会导致 child.constructor === Parent</span><br><span class="hljs-keyword">let</span> child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">name</span>); <span class="hljs-comment">// 小明</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">age</span>); <span class="hljs-comment">// 23</span><br>child.<span class="hljs-title function_">sayHello</span>() <span class="hljs-comment">// hello</span><br>child.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// hi</span><br></code></pre></td></tr></table></figure><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><p>思路：实现思路就是将子类的原型设置为父类的原型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-comment">// 通过 call 继承父类的实例属性和方法，不能继承原型属性/方法</span><br>    <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-comment">// Object.create 方法接受传入一个作为新创建对象的原型的对象，创建一个拥有指定原型和若干个指定属性的对象</span><br><span class="hljs-comment">// 通过这种方法指定的任何属性都会覆盖原型对象上的同名属性</span><br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, &#123;<br>    <span class="hljs-attr">constructor</span>: &#123;<br>        <span class="hljs-attr">value</span>: <span class="hljs-title class_">Child</span>,<br>        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;)<br><span class="hljs-keyword">let</span> child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">name</span>); <span class="hljs-comment">// 小明</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">age</span>); <span class="hljs-comment">// 23</span><br>child.<span class="hljs-title function_">sayHello</span>() <span class="hljs-comment">// hello</span><br>child.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// hi</span><br></code></pre></td></tr></table></figure><h3 id="寄生式组合继承"><a href="#寄生式组合继承" class="headerlink" title="寄生式组合继承"></a>寄生式组合继承</h3><p>思路：借用构造函数继承属性，通过原型链的混成形式来继承方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<br><span class="hljs-title class_">Child</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Child</span>;<br><span class="hljs-keyword">let</span> child = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Child</span>(<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">name</span>); <span class="hljs-comment">// 小明</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">age</span>); <span class="hljs-comment">// 23</span><br>child.<span class="hljs-title function_">sayHello</span>() <span class="hljs-comment">// hello</span><br>child.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// hi</span><br></code></pre></td></tr></table></figure><p>参考资料：<br><a href="https://juejin.cn/post/6844903929763856397#heading-17">JS 继承的 六 种实现方式</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端api请求缓存方案</title>
    <link href="/2021/05/18/%E5%89%8D%E7%AB%AFapi%E8%AF%B7%E6%B1%82%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/"/>
    <url>/2021/05/18/%E5%89%8D%E7%AB%AFapi%E8%AF%B7%E6%B1%82%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>面试时经常被问到性能优化相关的问题，接口缓存也是重点。事实上，缓存一定是提升web应用程序有效方法之一，尤其是用户受限于网速的情况下。提升系统的响应能力，降低网络的消耗。当然，内容越接近于用户，则缓存的速度就会越快，缓存的有效性则会越高。</p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对BFC的一些理解</title>
    <link href="/2021/03/31/%E5%AF%B9BFC%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <url>/2021/03/31/%E5%AF%B9BFC%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h3><blockquote><p>块级格式化上下文，是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。</p></blockquote><p>概念有点难理解，通俗易懂的解释下就是：有这样一个区域，这个区域内的元素无论设置啥样式都不会影响区域外的布局，这样一个区域就叫做<strong>BFC(Block Formatting Context)</strong></p><h3 id="如何触发BFC特性"><a href="#如何触发BFC特性" class="headerlink" title="如何触发BFC特性"></a>如何触发BFC特性</h3><ul><li>根元素(html标签)，很好理解，页面中最大的一个区域，都没有区域外这个概念了</li><li>浮动元素(float:left&#x2F;right)</li><li>绝对定位元素(position:absolute&#x2F;fixed)</li><li>overflow:auto&#x2F;hidden&#x2F;overlay&#x2F;scroll</li><li>display:flex&#x2F;grid&#x2F;table&#x2F;inline-block&#x2F;inline-flex&#x2F;inline-grid&#x2F;inline-table</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="高度塌陷"><a href="#高度塌陷" class="headerlink" title="高度塌陷"></a>高度塌陷</h4><p>在通常情况下父元素的高度会被子元素撑开，然而有时会因为子元素为浮动元素所以父元素发生了高度坍塌，上下边界重合，这时就可以用BFC来清除浮动了</p><p><a href="https://xypecho.github.io/test/bfc/index1.html">戳这里看案例</a>，当然使用上面除了html以外的其他4个方式也是可以的</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-class">.div1</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;<br>    <span class="hljs-attribute">background-color</span>: rebeccapurple;<br>    <span class="hljs-attribute">overflow</span>: auto;<br>&#125;<br><br><span class="hljs-selector-class">.div2</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&quot;div1&quot;</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&quot;div2&quot;</span>&gt;&lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><h4 id="margin塌陷问题"><a href="#margin塌陷问题" class="headerlink" title="margin塌陷问题"></a>margin塌陷问题</h4><p>在标准文档流中，块级标签之间竖直方向的margin会以大的那个为准，这就是margin的塌陷现象</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="margin.gif"></center><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">.topText &#123;<br>    margin: <span class="hljs-number">20</span>px <span class="hljs-number">0</span>;<br>    border: <span class="hljs-number">1</span>px solid #ccc;<br>    width: <span class="hljs-number">100</span>px;<br>&#125;<br><br>.btmText &#123;<br>    margin: <span class="hljs-number">20</span>px <span class="hljs-number">0</span>;<br>    border: <span class="hljs-number">1</span>px solid red;<br>    width: <span class="hljs-number">100</span>px;<br>&#125;<br><br>&lt;div <span class="hljs-keyword">class</span>=&#x27;<span class="hljs-symbol">topText</span>&#x27;&gt;上方文本&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&#x27;<span class="hljs-symbol">btmText</span>&#x27;&gt;下方文本&lt;/<span class="hljs-symbol">div</span>&gt;<br><br>// 解决方案，在<span class="hljs-symbol">topText</span>或者<span class="hljs-symbol">btmText</span>外面包一层<span class="hljs-symbol">div</span>，设置<span class="hljs-symbol">overflow:<span class="hljs-symbol">auto</span>,</span>触发<span class="hljs-symbol">bfc</span>特性<br></code></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/weixin_43550660/article/details/102638836">BFC的作用及使用场景</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试复盘-叮咚买菜</title>
    <link href="/2021/03/29/%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98-%E5%8F%AE%E5%92%9A%E4%B9%B0%E8%8F%9C/"/>
    <url>/2021/03/29/%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98-%E5%8F%AE%E5%92%9A%E4%B9%B0%E8%8F%9C/</url>
    
    <content type="html"><![CDATA[<p>这不是第一次面大厂了，第一次面的扇贝，面试过程有点紧张，结束后回想不起啦更多内容…<br>以后每次大厂面试完都要记得复盘下，复盘的过程也是查漏补缺的过程，希望可以早日进入大厂，早日突破20k大关</p><h3 id="开胃菜"><a href="#开胃菜" class="headerlink" title="开胃菜"></a>开胃菜</h3><p>刚开始面试，双方都是不怎么熟悉的状态，一般都会让进行自我介绍，参考了知乎、掘金后，总结了一个自我介绍的范文。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">我叫xxx, xxx年毕业于xxx学校，xxxx专业，本科；<br>目前从事开发岗位已经x年，期间独立完成多个项目，主要用到的技术有巴拉巴拉<br>当前这份工作的工作内容<br>希望能得到贵公司大平台的学习与工作交流机会，去实现不一样的人生价值<span class="hljs-comment">(升华一下)</span>。<br></code></pre></td></tr></table></figure><h3 id="技术回顾"><a href="#技术回顾" class="headerlink" title="技术回顾"></a>技术回顾</h3><h4 id="vue的生命周期-amp-每个生命周期执行了哪些操作"><a href="#vue的生命周期-amp-每个生命周期执行了哪些操作" class="headerlink" title="vue的生命周期&amp;每个生命周期执行了哪些操作"></a>vue的生命周期&amp;每个生命周期执行了哪些操作</h4><table><thead><tr><th align="left">生命周期</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">beforeCreate</td><td align="left">在实例初始化之后，数据观测 (data observer) 和 event&#x2F;watcher 事件配置之前被调用。</td></tr><tr><td align="left">created</td><td align="left">创建vue实例并初始化。在这一步，实例已完成以下的配置：数据观测 (data observer)， 属性和方法的运算，watch&#x2F;event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</td></tr><tr><td align="left">beforeMount</td><td align="left">在挂载开始之前被调用：相关的 render 函数首次被调用。</td></tr><tr><td align="left">mounted</td><td align="left">挂载dom之后调用，把解析后的模板与页面元素进行绑定，用解析后的模板内容替换页面</td></tr><tr><td align="left">beforeUpdate</td><td align="left">数据更新时调用</td></tr><tr><td align="left">updated</td><td align="left">数据更新后调用</td></tr><tr><td align="left">activated</td><td align="left">keep-alive 组件激活时调用</td></tr><tr><td align="left">deactivated</td><td align="left">keep-alive 组件停用时调用</td></tr><tr><td align="left">beforeDestroy</td><td align="left">实例销毁之前调用。在这一步，实例仍然完全可用</td></tr><tr><td align="left">destroyed</td><td align="left">Vue 实例销毁后调用</td></tr><tr><td align="left">errorCaptured</td><td align="left">当捕获一个来自子孙组件的错误时被调用</td></tr></tbody></table><h4 id="一般在vue的哪个生命周期进行接口请求，为什么"><a href="#一般在vue的哪个生命周期进行接口请求，为什么" class="headerlink" title="一般在vue的哪个生命周期进行接口请求，为什么"></a>一般在vue的哪个生命周期进行接口请求，为什么</h4><p>不考虑服务器端渲染，一般选在 mounted 周期内请求数据，因为这个周期开始时，当前组件已经被挂载到真实的元素上了。<br>若是从服务器端渲染的话，在created 周期内</p><h4 id="destroyed这个阶段执行了哪些操作"><a href="#destroyed这个阶段执行了哪些操作" class="headerlink" title="destroyed这个阶段执行了哪些操作"></a>destroyed这个阶段执行了哪些操作</h4><p>首先触发我们自己编写的beforeDestroy生命周期函数<br>然后递归清除vnode子节点，接着清除watchers所有对应的依赖<br>最后再清除相关节点的引用就结束了<br>更详细查看<a href="https://juejin.cn/post/6844904116666236942">刁钻面试官：vue 节点销毁的时候做了些什么？</a></p><h4 id="v-model语法糖的实现"><a href="#v-model语法糖的实现" class="headerlink" title="v-model语法糖的实现"></a>v-model语法糖的实现</h4><p>动态绑定了 input 的 value 指向了 messgae 变量，并且在触发 input 事件的时候去动态把 message 设置为目标值</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">&lt;<span class="hljs-keyword">input</span> v-model=<span class="hljs-string">&quot;sth&quot;</span> /&gt;<br><span class="hljs-comment">//  等同于</span><br>&lt;<span class="hljs-keyword">input</span> v-<span class="hljs-keyword">bind</span>:value=<span class="hljs-string">&quot;message&quot;</span>  @<span class="hljs-keyword">input</span>=<span class="hljs-string">&quot;message=$event.target.value&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="vue双向绑定原理"><a href="#vue双向绑定原理" class="headerlink" title="vue双向绑定原理"></a>vue双向绑定原理</h4><blockquote><p>Vue双向绑定原理是采用发布订阅者模式，在初始化时劫持数据的各个属性的setter&#x2F;getter，在数据变动时发布消息给订阅者，触发响应的监听回调。</p></blockquote><h5 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h5><p>vue2中使用的Object.defineProperty对于数据进行拦截，其实还是有缺陷的</p><ol><li>对象属性的新加或者删除无法监听(vue2解决方案深度遍历)</li><li>数组元素的增加和删除无法监听(为了解决这个问题，Vue对数组的方法进行了重写)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 重写push</span><br><span class="hljs-keyword">let</span> oldPush = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;这里触发view更新&#x27;</span>)<br>    oldPush.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,...<span class="hljs-variable language_">arguments</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h5><blockquote><p>针对Object.defineProperty的缺点，ES6 Proxy都能够完美得解决，它唯一的缺 点就是，对IE不友好,所以vue3在检测到如果是使用IE的情况下（没错，IE11都不支持Proxy），会自动降级为Object.defineProperty的数据监听系统。</p></blockquote><h4 id="什么是深拷贝-amp-浅拷贝"><a href="#什么是深拷贝-amp-浅拷贝" class="headerlink" title="什么是深拷贝&amp;浅拷贝"></a>什么是深拷贝&amp;浅拷贝</h4><p><a href="https://xypecho.github.io/2019/06/25/%E4%BA%94%E5%B9%B4%E9%9D%A2%E8%AF%95%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F/#18-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB">定义</a></p><p><a href="https://xypecho.github.io/2018/07/02/%E6%B5%85%E8%B0%88%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/">实现</a></p><h4 id="vue中更新了数据后获取最新dom对象"><a href="#vue中更新了数据后获取最新dom对象" class="headerlink" title="vue中更新了数据后获取最新dom对象"></a>vue中更新了数据后获取最新dom对象</h4><p>vue中数据是同步更新的，不过更新dom是异步的，所以需要更新数据后获取最新dom，需要使用nextTick获取最新的DOM</p><h4 id="vue路由懒加载的实现"><a href="#vue路由懒加载的实现" class="headerlink" title="vue路由懒加载的实现"></a>vue路由懒加载的实现</h4><blockquote><p>懒加载定义：把不同路由对应的组件分割成不同的代码块，然后当路由被访问时才加载对应的组件即为路由的懒加载，可以加快项目的加载速度，提高效率</p></blockquote><h5 id="vue异步组件"><a href="#vue异步组件" class="headerlink" title="vue异步组件"></a>vue异步组件</h5><h5 id="es6的import"><a href="#es6的import" class="headerlink" title="es6的import()"></a>es6的import()</h5><p>修改后的做法是定义了一个函数，由于函数不调用不执行，所有，一开始时，并不会引入该组件，只有路由跳转时才会调用该函数。</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">原来是：<span class="hljs-keyword">import</span> ShopCar <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/pages/ShopCar&#x27;</span><br><br>修改后：const ShopCar = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/pages/ShopCar&#x27;</span>);<br></code></pre></td></tr></table></figure><h5 id="webpack的require-ensure"><a href="#webpack的require-ensure" class="headerlink" title="webpack的require,ensure():"></a>webpack的require,ensure():</h5><h4 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h4><h5 id="this"><a href="#this" class="headerlink" title="this"></a>this</h5><p>数箭头函数没有 prototype (原型)，所以箭头函数本身没有this​​​​​​​，它只会从自己的作用域链的上一层继承this。<br>普通函数this指向直接调用者，没有直接调用者，this指向window</p><p>ps:.call()&#x2F;.apply()&#x2F;.bind()无法改变箭头函数中this的指向</p><h5 id="箭头函数没有自己的arguments"><a href="#箭头函数没有自己的arguments" class="headerlink" title="箭头函数没有自己的arguments"></a>箭头函数没有自己的arguments</h5><h5 id="箭头函数不能作为构造函数使用"><a href="#箭头函数不能作为构造函数使用" class="headerlink" title="箭头函数不能作为构造函数使用"></a>箭头函数不能作为构造函数使用</h5><p>箭头函数没有自己的this，它的this其实是继承了外层执行环境中的this，且this指向永远不会随在哪里调用、被谁调用而改变，所以箭头函数不能作为构造函数使用，或者说构造函数不能定义成箭头函数，否则用new调用时会报错！</p><h4 id="前端如何实现分页组件"><a href="#前端如何实现分页组件" class="headerlink" title="前端如何实现分页组件"></a>前端如何实现分页组件</h4><p>思路:一次性将数据获取，将需要的部分显示，不需要的部分隐藏</p><ol><li>计算出一共分为几页</li><li>计算开始显示的行数，和最后显示的行数</li><li>遍历显示数据实现分页</li></ol><h4 id="实现图片懒加载"><a href="#实现图片懒加载" class="headerlink" title="实现图片懒加载"></a>实现图片懒加载</h4><p>思路：将页面里所有img属性src属性用data-xx代替，当页面滚动直至此图片出现在可视区域时，用js取到该图片的data-xx的值赋给src。</p><h5 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect"></a>getBoundingClientRect</h5><p>Element.getBoundingClientRect() 方法返回元素的大小及其相对于视口的位置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 伪代码</span><br><span class="hljs-comment">// clientHeight 代表当前视口的高度</span><br><span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.getBoundingClientRect</span>()<span class="hljs-selector-class">.top</span> &lt; document<span class="hljs-selector-class">.documentElement</span>.clientHeight<br></code></pre></td></tr></table></figure><h5 id="IntersectionObserver"><a href="#IntersectionObserver" class="headerlink" title="IntersectionObserver"></a>IntersectionObserver</h5><p>该方法能够监听元素是否到了当前视口的事件，一步到位！</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">const observer = new <span class="hljs-built_in">IntersectionObserver</span>((changes) =&gt; &#123;<br>  <span class="hljs-comment">// changes: 目标元素集合</span><br>  changes<span class="hljs-selector-class">.forEach</span>((change) =&gt; &#123;<br>    <span class="hljs-comment">// intersectionRatio</span><br>    <span class="hljs-keyword">if</span> (change.isIntersecting) &#123;<br>      const <span class="hljs-selector-tag">img</span> = change<span class="hljs-selector-class">.target</span><br>      <span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.src</span> = <span class="hljs-selector-tag">img</span><span class="hljs-selector-class">.dataset</span><span class="hljs-selector-class">.src</span><br>      observer<span class="hljs-selector-class">.unobserve</span>(img)<br>    &#125;<br>  &#125;)<br>&#125;)<br><br>observer<span class="hljs-selector-class">.observe</span>(img)<br></code></pre></td></tr></table></figure><h5 id="LazyLoading属性"><a href="#LazyLoading属性" class="headerlink" title="LazyLoading属性"></a>LazyLoading属性</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;shanyue.jpg&quot;</span> <span class="hljs-attribute">loading</span>=<span class="hljs-string">&quot;lazy&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="对promise和await的理解"><a href="#对promise和await的理解" class="headerlink" title="对promise和await的理解"></a>对promise和await的理解</h4><p><a href="https://segmentfault.com/a/1190000038251758">压箱底笔记：Promise和Async&#x2F;await的理解和使用</a></p><h4 id="事件捕获和事件冒泡区别"><a href="#事件捕获和事件冒泡区别" class="headerlink" title="事件捕获和事件冒泡区别"></a>事件捕获和事件冒泡区别</h4><p>事件捕获：当你使用事件捕获时，父级元素先触发，子级元素后触发，即div先触发，p后触发。<br>事件冒泡：当你使用事件冒泡时，子级元素先触发，父级元素后触发，即p先触发，div后触发。</p><h4 id="怎么阻止捕获和冒泡"><a href="#怎么阻止捕获和冒泡" class="headerlink" title="怎么阻止捕获和冒泡"></a>怎么阻止捕获和冒泡</h4><h5 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h5><p>事件的对象有的stopPropagation()方法</p><h5 id="阻止事件捕获"><a href="#阻止事件捕获" class="headerlink" title="阻止事件捕获"></a>阻止事件捕获</h5><p>stopPropagation和stopImmediatePropagation</p><p>这两方法区别:stopPropagation只会阻止冒泡或者是捕获,但是stopImmediatePropagation除此之外还会阻止该元素的其他事件发生</p><h4 id="用解构赋值的方法取数组最后一位"><a href="#用解构赋值的方法取数组最后一位" class="headerlink" title="用解构赋值的方法取数组最后一位"></a>用解构赋值的方法取数组最后一位</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-built_in">let</span> [<span class="hljs-built_in">last</span>, ...<span class="hljs-built_in">rest</span>] = [...arr].<span class="hljs-built_in">reverse</span>();<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">last</span>) // <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="正则表达式取0-10的数字"><a href="#正则表达式取0-10的数字" class="headerlink" title="正则表达式取0-10的数字"></a>正则表达式取0-10的数字</h4><p><code>^([1-9]|10)$</code></p><h4 id="vue异步加载组件的方法"><a href="#vue异步加载组件的方法" class="headerlink" title="vue异步加载组件的方法"></a>vue异步加载组件的方法</h4><p>异步组件的核心可以给组件定义变成一个函数，函数里面可以用import语法，实现文件的分割加载，import语法是webpack提供的，采用的就是jsonp。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue中父子组件通信的方式</title>
    <link href="/2021/03/23/vue%E4%B8%AD%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/03/23/vue%E4%B8%AD%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="props-x2F-emit"><a href="#props-x2F-emit" class="headerlink" title="props &#x2F; $emit"></a>props &#x2F; $emit</h2><p>最经典&amp;使用最多的通信方式，父组件通过props的方式向子组件传递数据，子组件通过$emit向父组件通信</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">// 父组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">&#x27;msg&#x27;</span> @<span class="hljs-attr">onChangeFatherMsg</span>=<span class="hljs-string">&#x27;onChangeFatherMsg&#x27;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Welcome to Your Vue.js App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">HelloWorld</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">onChangeFatherMsg</span>(<span class="hljs-params">e</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">msg</span> = e;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">// 子组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeFatherMsg&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">msg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">msg</span>: <span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">changeFatherMsg</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&quot;onChangeFatherMsg&quot;</span>, <span class="hljs-string">&quot;hello world&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="children-x2F-parent-vue-3-x已移除"><a href="#children-x2F-parent-vue-3-x已移除" class="headerlink" title="$children &#x2F; $parent(vue 3.x已移除)"></a>$children &#x2F; $parent(vue 3.x已移除)</h2><p>要注意边界情况，如在#app上拿$parent得到的是new Vue()的实例，在这实例上再拿$parent得到的是undefined，而在最底层的子组件拿$children是个空数组。也要注意得到$parent和$children的值不一样，$children 的值是数组，而$parent是个对象</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">// 父组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeChildren&quot;</span>&gt;</span>改变子组件值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">fatherMsg</span>: <span class="hljs-string">&quot;hello&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">HelloWorld</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">changeChildren</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$children</span>[<span class="hljs-number">0</span>].<span class="hljs-property">privateMsg</span> = <span class="hljs-string">&quot;嘿嘿嘿&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">// 子组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">privateMsg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">privateMsg</span>: <span class="hljs-string">&quot;子组件&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span>.<span class="hljs-property">fatherMsg</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="provide-x2F-inject"><a href="#provide-x2F-inject" class="headerlink" title="provide&#x2F; inject"></a>provide&#x2F; inject</h2><p>provide 和 inject 主要在开发高阶插件&#x2F;组件库时使用。并不推荐用于普通应用程序代码中。</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">// 父组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">provide</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">for</span>: <span class="hljs-string">&quot;子组件&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">HelloWorld</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">// 子组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">privateMsg</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">inject</span>: [<span class="hljs-string">&quot;for&quot;</span>],</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">privateMsg</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">for</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h2><p>ref如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例，可以通过实例直接调用组件的方法或访问数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml">// 父组件<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span>  <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;helloworld&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/HelloWorld.vue&quot;</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title class_">HelloWorld</span>,</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$refs</span>.<span class="hljs-property">helloworld</span>.<span class="hljs-property">privateMsg</span>)</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>// 子组件同上<br></code></pre></td></tr></table></figure><h2 id="eventBus"><a href="#eventBus" class="headerlink" title="eventBus"></a>eventBus</h2><p>EventBus是消息传递的一种方式，基于一个消息中心，订阅和发布消息的模式，称为发布订阅者模式。(<a href="https://www.jianshu.com/p/cad0b6eabf04">eventBus原理</a>)</p><p>on(‘name’, fn)订阅消息，name:订阅的消息名称， fn: 订阅的消息<br>emit(‘name’, args)发布消息, name:发布的消息名称 ， args：发布的消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在App.vue同级目录创建文件exentBus.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title class_">EventBus</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>();<br><br><span class="hljs-comment">// 同级组件A，发布</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;componentAEvent&quot;</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">EventBus</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../exentBus&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">num</span>: <span class="hljs-number">1</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">componentAEvent</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-title class_">EventBus</span>.$emit(<span class="hljs-string">&quot;add&quot;</span>, &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">num</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">num</span>++,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="hljs-comment">// 同级组件B，订阅</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">EventBus</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../exentBus&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;HelloWorld&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">EventBus</span>.$on(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">count</span> = params.<span class="hljs-property">num</span>;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="attrs与-listeners-vue-3-x-移除了-listeners"><a href="#attrs与-listeners-vue-3-x-移除了-listeners" class="headerlink" title="$attrs与 $listeners(vue 3.x 移除了$listeners)"></a>$attrs与 $listeners(vue 3.x 移除了$listeners)</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xquery">// 父组件<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">HelloWorld</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-attr">age</span>=<span class="hljs-string">&#x27;18&#x27;</span> <span class="hljs-attr">gender</span>=<span class="hljs-string">&#x27;男&#x27;</span> /&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">HelloWorld</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/HelloWorld.vue&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery"> <span class="hljs-built_in"> name</span>: <span class="hljs-string">&quot;App&quot;</span>,</span><br><span class="language-xquery">  components: &#123;</span><br><span class="language-xquery">    HelloWorld,</span><br><span class="language-xquery">  &#125;</span><span class="language-xml">,</span><br><span class="language-xml">&#125;;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br>// 子组件<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="language-xquery">&#123;&#123; num &#125;</span><span class="language-xml">&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery"> <span class="hljs-built_in"> name</span>: <span class="hljs-string">&quot;HelloWorld&quot;</span>,</span><br><span class="language-xquery">  data() &#123;</span><br><span class="language-xquery">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-xquery">      num: <span class="hljs-number">1</span>,</span><br><span class="language-xquery">    &#125;</span><span class="language-xml"><span class="language-javascript">;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">inheritAttrs</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// false是this.$attrs为</span></span></span><span class="language-xquery">&#123;age: <span class="hljs-string">&quot;18&quot;</span>, gender: <span class="hljs-string">&quot;男&quot;</span>&#125;</span><span class="language-xml"></span><br><span class="language-xml">  props: </span><span class="language-xquery">&#123;</span><br><span class="language-xquery">   <span class="hljs-built_in"> name</span>,</span><br><span class="language-xquery">  &#125;</span><span class="language-xml">,</span><br><span class="language-xml">  mounted() </span><span class="language-xquery">&#123;</span><br><span class="language-xquery">    console.log(this.<span class="hljs-variable">$attrs</span>); // inheritAttrs<span class="hljs-built_in">为true</span>时的输出 <span class="hljs-built_in">&#123;name</span>: <span class="hljs-string">&quot;name&quot;</span>, age: <span class="hljs-string">&quot;18&quot;</span>, gender: <span class="hljs-string">&quot;男&quot;</span>&#125;</span><span class="language-xml"></span><br><span class="language-xml">  &#125;,</span><br><span class="language-xml">&#125;;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五年面试，三年模拟(框架篇)</title>
    <link href="/2021/03/18/%E4%BA%94%E5%B9%B4%E9%9D%A2%E8%AF%95%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-%E6%A1%86%E6%9E%B6%E7%AF%87/"/>
    <url>/2021/03/18/%E4%BA%94%E5%B9%B4%E9%9D%A2%E8%AF%95%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-%E6%A1%86%E6%9E%B6%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="vue-相关"><a href="#vue-相关" class="headerlink" title="vue 相关"></a>vue 相关</h2><h3 id="v-if-与-v-for可以一起使用吗？"><a href="#v-if-与-v-for可以一起使用吗？" class="headerlink" title="v-if 与 v-for可以一起使用吗？"></a>v-if 与 v-for可以一起使用吗？</h3><p>当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级，这意味着 v-if 将分别重复运行于每个 v-for 循环中，所以不推荐 v-if 和 v-for 同时使用</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">// 推荐写法</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;shouldShowUsers&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in users&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span>&gt;</span></span><br><span class="language-xml">        </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">user.name</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">// 并不是任何时候都不推荐，想渲染特定节点时，如下代码渲染未完成的todolist</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;todo in todos&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;!todo.isComplete&quot;</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">todo</span> &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="watch-和-computed-区别"><a href="#watch-和-computed-区别" class="headerlink" title="watch 和 computed 区别"></a>watch 和 computed 区别</h3><p>computed 会创建新的响应式数据。并且具有可缓存，可依赖多个属性等特点。<br>watch 是响应式数据的自定义侦听器，用于监听响应数据的变化。</p><p>ps:</p><ol><li>如果一个数据依赖于其他数据，那么把这个数据设计为computed的  </li><li>如果你需要在某个数据变化时做一些事情，使用watch来观察这个数据变化</li></ol><h3 id="watch-deep属性实现原理"><a href="#watch-deep属性实现原理" class="headerlink" title="watch deep属性实现原理"></a>watch deep属性实现原理</h3><p>vue会一层层遍历，给这个对象的所有属性都加上这个监听器。但是这样性能开销会比较大，修改任何一个属性，都会出发这个监听器里的handler.</p><h3 id="keep-alive刷新前一个页面"><a href="#keep-alive刷新前一个页面" class="headerlink" title="keep-alive刷新前一个页面"></a>keep-alive刷新前一个页面</h3><p>使用keep-alive时，再次进入了缓存页面会走以下生命周期：beforeRouteEnter –&gt;activated –&gt; deactivated，<br>所以如果需要在进入页面时刷新数据就在activated 里面做操作</p><h3 id="vue按钮级别鉴权"><a href="#vue按钮级别鉴权" class="headerlink" title="vue按钮级别鉴权"></a>vue按钮级别鉴权</h3><ol><li>储存权限数据</li><li>自定义指令传入当前权限的参数<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">// 示例代码<br>&lt;<span class="hljs-keyword">el</span>-button <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;primary&quot;</span> v-<span class="hljs-built_in">has</span>=<span class="hljs-string">&quot;&#x27;line_add&#x27;&quot;</span>&gt;新增&lt;/<span class="hljs-keyword">el</span>-button&gt;<br></code></pre></td></tr></table></figure></li><li>遍历对比权限数据中字段是否与标签中的自定义参数line_add相等，匹配成功则表明有权限，失败没有权限，返回false</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> permission<span class="hljs-constructor">Judge(<span class="hljs-params">value</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-built_in">list</span> = store.getters.getMenuBtnList;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> <span class="hljs-built_in">list</span>) &#123;<br>    <span class="hljs-keyword">if</span> (item.permission<span class="hljs-operator"> === </span>value) &#123;<br>        return <span class="hljs-literal">true</span>;<br>    &#125;<br>    &#125;<br>    return <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 注册一个全局自定义指令 `v-has`</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Vue</span>.</span></span>directive(&#x27;has&#x27;, &#123;<br>  <span class="hljs-comment">// 当被绑定的元素插入到 DOM 中时触发bind钩子</span><br>  bind: <span class="hljs-keyword">function</span> (el, binding) &#123;<br>    <span class="hljs-keyword">if</span> (permission<span class="hljs-constructor">Judge(<span class="hljs-params">binding</span>.<span class="hljs-params">value</span>)</span>) &#123;<br>      el.parentNode.remove<span class="hljs-constructor">Child(<span class="hljs-params">el</span>)</span>;<br>    &#125;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="vuex多个模块之间action如何调用"><a href="#vuex多个模块之间action如何调用" class="headerlink" title="vuex多个模块之间action如何调用"></a>vuex多个模块之间action如何调用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 用dispatch调用，总共三个参数，每个都必须写，第一个就是action名，第二个是需要传递的参数，第三个代表的是非本模块内的action</span><br><br><span class="hljs-title function_ invoke__">dispatch</span>(“tagsView/delAllViews”, &#123;&#125;, &#123; <span class="hljs-attr">root</span>: <span class="hljs-literal">true</span> &#125;);<br></code></pre></td></tr></table></figure><h3 id="vue-循环时-加key的作用"><a href="#vue-循环时-加key的作用" class="headerlink" title="vue 循环时 加key的作用"></a>vue 循环时 加key的作用</h3><p>vue组件高度复用，增加Key可以标识组件的唯一性，可以更高效的更新虚拟DOM</p><h3 id="vue中data为什么是函数"><a href="#vue中data为什么是函数" class="headerlink" title="vue中data为什么是函数"></a>vue中data为什么是函数</h3><p>函数return的形式会return出不同地址的对象，不会干扰组件之间的数据绑定</p><h3 id="vue二次封装组件，参数如何传递"><a href="#vue二次封装组件，参数如何传递" class="headerlink" title="vue二次封装组件，参数如何传递"></a>vue二次封装组件，参数如何传递</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-bind</span>=<span class="hljs-string">&quot;$props&quot;</span> <span class="hljs-attr">v-on</span>=<span class="hljs-string">&quot;$listeners&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">myProps</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  </span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">Select</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;my-select&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">props</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">            ...<span class="hljs-title class_">Select</span>.<span class="hljs-property">props</span>, <span class="hljs-comment">// 这里继承内在组件的props</span></span></span><br><span class="language-javascript"><span class="language-xml">           <span class="hljs-attr">myProps</span>: <span class="hljs-title class_">String</span> <span class="hljs-comment">// 新增的props</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="vue2和vue3的区别"><a href="#vue2和vue3的区别" class="headerlink" title="vue2和vue3的区别"></a>vue2和vue3的区别</h3><ol><li>双向数据绑定原理不同，vue2是使用Object.definePropert()，vue3是使用ES6的Proxy API对数据代理。</li><li>语法不同，vue2使用选项类型api，选项型api在代码里分割了不同的属性：data,computed,methods等。vue3使用组合式api，相比于旧的api使用属性来分组，这样代码会更加简便和整洁。</li><li>定义数据变量和方法不同，vue2是把数据放入data中。vue3使用ref或者reactive，在setup()方法来返回我们的反应性数据</li><li>生命周期钩子函数不同，vue3删除了beforeCreate、created取代的是setup</li></ol>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五年面试，三年模拟(other篇)</title>
    <link href="/2021/03/18/%E4%BA%94%E5%B9%B4%E9%9D%A2%E8%AF%95%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-other%E7%AF%87/"/>
    <url>/2021/03/18/%E4%BA%94%E5%B9%B4%E9%9D%A2%E8%AF%95%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-other%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h3><blockquote><p>为保护用户信息安全，防止恶意网站窃取用户数据，浏览器限制本域中的脚本只能访问本域中的资源，这就是同源策略。</p></blockquote><p>下表给出了与 URL <a href="http://store.company.com/dir/page.html">http://store.company.com/dir/page.html</a> 的源进行对比的示例:</p><table><thead><tr><th align="left">URL</th><th align="left">结果</th><th align="left">原因</th></tr></thead><tbody><tr><td align="left"><a href="http://store.company.com/dir2/other.html">http://store.company.com/dir2/other.html</a></td><td align="left">同源</td><td align="left">只有路径不同</td></tr><tr><td align="left"><a href="http://store.company.com/dir/inner/another.html">http://store.company.com/dir/inner/another.html</a></td><td align="left">同源</td><td align="left">只有路径不同</td></tr><tr><td align="left"><a href="https://store.company.com/secure.html">https://store.company.com/secure.html</a></td><td align="left">失败</td><td align="left">协议不同</td></tr><tr><td align="left"><a href="http://store.company.com:81/dir/etc.html">http://store.company.com:81/dir/etc.html</a></td><td align="left">失败</td><td align="left">端口不同 ( http:&#x2F;&#x2F; 默认端口是80)</td></tr><tr><td align="left"><a href="http://news.company.com/dir/other.html">http://news.company.com/dir/other.html</a></td><td align="left">失败</td><td align="left">主机不同</td></tr></tbody></table><h3 id="如何跨域"><a href="#如何跨域" class="headerlink" title="如何跨域"></a>如何跨域</h3><h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><p>jsonp能实现跨域是利用了img、script和link标签自身的跨域能力。<br>我们知道当img或者script中的src是一个链接的时候，浏览器会请求这个链接获取资源，那么这个链接如果是跨域的，浏览器也会请求，从而达到了跨域请求的一个功能。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> script = document.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>script.src = <span class="hljs-string">&#x27;http://localhost:3000/api/test.do?a=1&amp;b=2&amp;callback=cb&#x27;</span>;<br>$(<span class="hljs-string">&#x27;body&#x27;</span>).append(script);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">cb</span>(<span class="hljs-params">res</span>)&#123;<br>    <span class="hljs-comment">// do something</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res)<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们创建一个script标签，将src改成我们要请求的接口，并将script添加在body中，那么当浏览器解析到这个script时，会想src对应的服务器发送一个get请求，并将参数带过去。<br>然后当浏览器接收到服务端返回的数据，就会触发参数中callbak对应的回调函数cb，从而完成整个get请求。</p><h4 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h4><p>cors 是一个W3C标准,全称是”跨域资源共享”（Cross-origin resource sharing），它允许浏览器向跨源服务器发送XMLHttpRequest请求。</p><p>具体实现：通过后端设置响应头（Access-Control-Allow-Origin），里面可以设置两种形式，一种是‘*’，允许所有请求跨域，另一种是设置指定的具体地址，它只允许指定的这个地址跨域。</p><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><p>nginx解决跨域的问题跟之前的方法有所不同，它是通过服务器的方向代理，将前端访问域名跟后端服务域名映射到同源的地址下，从而实现前端服务和后端服务的同源。</p><h4 id="vue-proxyTable"><a href="#vue-proxyTable" class="headerlink" title="vue proxyTable"></a>vue proxyTable</h4><p>在我们使用npm run dev命中，启动了一个node服务，然后将前端发出的请求发送到node服务，再将该服务转发到原本的后台服务，在这过程中实现了一层代理，由一个node服务发送一个请求到另外一个后台服务，自然也没有了浏览器所限制的跨域问题。</p><h3 id="https-和-http的区别"><a href="#https-和-http的区别" class="headerlink" title="https 和 http的区别"></a>https 和 http的区别</h3><ol><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl&#x2F;tls加密传输协议</li><li>默认端口不一样，http是80，https是443</li><li>http连接没有状态，https是ssl加密的传输，身份认证的网络协议</li></ol><h3 id="长连接和短连接区别"><a href="#长连接和短连接区别" class="headerlink" title="长连接和短连接区别"></a>长连接和短连接区别</h3><p>短连接：连接-&gt;传输数据-&gt;关闭连接<br>长连接：连接-&gt;传输数据-&gt;保持连接 -&gt; 传输数据-&gt; ………..-&gt;直到一方主动关闭连接</p><h3 id="import-require区别"><a href="#import-require区别" class="headerlink" title="import require区别"></a>import require区别</h3><h4 id="require-x2F-exports-和-import-x2F-export-遵循的规范不同"><a href="#require-x2F-exports-和-import-x2F-export-遵循的规范不同" class="headerlink" title="require&#x2F;exports 和 import&#x2F;export 遵循的规范不同"></a>require&#x2F;exports 和 import&#x2F;export 遵循的规范不同</h4><p>import&#x2F;export是ES2015的模块<br>require&#x2F;exports是CommonJS(在Node中实现)</p><h4 id="require-x2F-exports-和-import-x2F-export-语法不一样"><a href="#require-x2F-exports-和-import-x2F-export-语法不一样" class="headerlink" title="require&#x2F;exports 和 import&#x2F;export 语法不一样"></a>require&#x2F;exports 和 import&#x2F;export 语法不一样</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// require/exports 的用法只有以下三种简单的写法：</span><br><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">fs</span> = fs<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = fs<br><br><span class="hljs-comment">// import/export 的写法</span><br><span class="hljs-keyword">import</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> fs&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> fs <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><span class="hljs-keyword">import</span> &#123;readFile&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><span class="hljs-keyword">import</span> &#123;readFile <span class="hljs-keyword">as</span> read&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><span class="hljs-keyword">import</span> fs, &#123;readFile&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> fs<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> fs<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> readFile<br><span class="hljs-keyword">export</span> &#123;readFile, read&#125;<br><span class="hljs-keyword">export</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;fs&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="开放性问题"><a href="#开放性问题" class="headerlink" title="开放性问题"></a>开放性问题</h3><h4 id="有什么问面试官的吗"><a href="#有什么问面试官的吗" class="headerlink" title="有什么问面试官的吗"></a>有什么问面试官的吗</h4><p>根据我今天的表现，面试官对我有什么建议？</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五年面试，三年模拟(js篇)</title>
    <link href="/2021/03/18/%E4%BA%94%E5%B9%B4%E9%9D%A2%E8%AF%95%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-js%E7%AF%87/"/>
    <url>/2021/03/18/%E4%BA%94%E5%B9%B4%E9%9D%A2%E8%AF%95%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-js%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="构造函数的new都做了些什么"><a href="#构造函数的new都做了些什么" class="headerlink" title="构造函数的new都做了些什么"></a>构造函数的new都做了些什么</h3><ol><li>JS内部首先会先生成一个对象； </li><li>再把函数中的this指向该对象； </li><li>然后执行构造函数中的语句； </li><li>最终返回该对象实例。</li></ol><h3 id="什么是promise"><a href="#什么是promise" class="headerlink" title="什么是promise"></a>什么是promise</h3><p>Promise 是一个允许我们处理异步操作的对象。</p><h3 id="promise有哪些类方法"><a href="#promise有哪些类方法" class="headerlink" title="promise有哪些类方法"></a>promise有哪些类方法</h3><ol><li>promise.all并行执行多个promise，所有传参的promise的resolve 回调都结束才会执行resolve回调，反之执行reject需要用catch捕获</li><li>promise.race返回第一个resolve的promise，剩下的promise哪怕成功resolve了也不会返回</li></ol>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五年面试，三年模拟(css篇)</title>
    <link href="/2021/03/18/%E4%BA%94%E5%B9%B4%E9%9D%A2%E8%AF%95%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-css%E7%AF%87/"/>
    <url>/2021/03/18/%E4%BA%94%E5%B9%B4%E9%9D%A2%E8%AF%95%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-css%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="position哪几个属性？"><a href="#position哪几个属性？" class="headerlink" title="position哪几个属性？"></a>position哪几个属性？</h3><ol><li>static 默认值没有定位，元素出现在正常的流中</li><li>relative 相对定位，相对于其正常位置进行定位(例如：”top:20px” 会向当前元素不加position属性时的位置添加20像素的距离)</li><li>absolute 绝对定位，相对于 static 定位以外的第一个父元素进行定位(若所有父元素都没有position属性即和relative效果一样)</li><li>fixed 绝对定位，相对于浏览器窗口进行定位</li></ol><h3 id="文档流了解过吗？"><a href="#文档流了解过吗？" class="headerlink" title="文档流了解过吗？"></a>文档流了解过吗？</h3><p>文档流指的是元素排版布局过程中，元素会默认自动从左往右，从上往下的流式排列方式。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>了解Event Loop(事件循环)机制</title>
    <link href="/2021/03/11/%E4%BA%86%E8%A7%A3Event-Loop-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/03/11/%E4%BA%86%E8%A7%A3Event-Loop-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>作为前端面试八股文中最重要的一个知识点，每次被问到时总是不知从哪里说起，说的也不够完整，整理众多资料后记下笔记。</p><h3 id="为什么会有事件循环-Event-Loop-机制"><a href="#为什么会有事件循环-Event-Loop-机制" class="headerlink" title="为什么会有事件循环(Event Loop)机制"></a>为什么会有事件循环(Event Loop)机制</h3><p>大家都知道JavaScript是单线程的脚本语言，在同一时间，只能做同一件事，为了协调事件、用户交互、脚本、UI渲染和网络处理等行为，防止主线程阻塞，Event Loop方案应运而生…</p><h3 id="JavaScript为什么是单线程的"><a href="#JavaScript为什么是单线程的" class="headerlink" title="JavaScript为什么是单线程的"></a>JavaScript为什么是单线程的</h3><p>JavaScript的主要用途是与用户互动，以及操作DOM。如果它是多线程的话会有很多复杂的问题要处理，比如有两个线程同时操作DOM，一个线程删除了当前的DOM节点，一个线程是要操作当前的DOM阶段，最后以哪个线程的操作为准？为了避免这种，所以JavaScript是单线程的。</p><h3 id="事件循环的定义"><a href="#事件循环的定义" class="headerlink" title="事件循环的定义"></a>事件循环的定义</h3><p>在执行代码过程中，如果遇到一些异步代码(比如setTimeout,ajax,promise以及用户点击等操作),那么浏览器就会将这些代码放到另一个线程(在这里我们叫做幕后线程)中去执行，在前端由浏览器底层执行，在 node 端由 libuv 执行，这个线程的执行不会阻塞主线程的执行，主线程继续执行栈中剩余的代码。<br>当幕后线程（background thread）里的代码执行完成后(比如setTimeout时间到了，ajax请求得到响应),该线程就会将它的回调函数放到任务队列（又称作事件队列、消息队列）中等待执行。而当主线程执行完栈中的所有代码后，它就会检查任务队列是否有任务要执行，如果有任务要执行的话，那么就将该任务放到执行栈中执行。如果当前任务队列为空的话，它就会一直循环等待任务到来。这就是事件循环。</p><h3 id="由上文任务队列引申出的其他概念"><a href="#由上文任务队列引申出的其他概念" class="headerlink" title="由上文任务队列引申出的其他概念"></a>由上文任务队列引申出的其他概念</h3><p>接上文，如果任务队列中，有很多个任务的话，那么要先执行哪一个任务呢？<br>其实js是有两个任务队列的，一个叫做 Macrotask Queue宏任务, 一个叫做 Microtask Queue微任务</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="企业微信截图_1615261006325.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px">事件循环执行流程</div></center><p><strong>在同步代码执行完成后，才会回去检查是否有异步任务完成，并执行对应的回调，而微任务又会在宏任务之前执行。</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 以一个经典的面试题举例，提前公布答案，输出为：1，2，3，4</span><br><span class="hljs-comment">// new Promise在实例化的过程中所执行的代码都是同步进行的，而then中注册的回调才是异步执行的。</span><br><br>setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">4</span>)<br>&#125;, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">new</span> Promise(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>    resolve()<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>)<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span>)<br>&#125;)<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">// 代码解析，+部分表示同步执行的代码，微任务是先于宏任务执行的</span><br>+setTimeout(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> &#123;<br>-  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">4</span>)<br>+&#125;)<br><br>+<span class="hljs-keyword">new</span> Promise(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>+  resolve()<br>+  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>)<br>+&#125;).then(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> &#123;<br>-  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span>)<br>+&#125;)<br><br>+<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>)<br><br></code></pre></td></tr></table></figure><h3 id="那些常见的宏任务和微任务"><a href="#那些常见的宏任务和微任务" class="headerlink" title="那些常见的宏任务和微任务"></a>那些常见的宏任务和微任务</h3><h4 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h4><p>ps:√表示为当前环境的api，✖表示非当前环境的api</p><table><thead><tr><th>名称</th><th>浏览器</th><th>Node</th></tr></thead><tbody><tr><td>I&#x2F;O</td><td>√</td><td>√</td></tr><tr><td>setTimeout</td><td>√</td><td>√</td></tr><tr><td>setInterval</td><td>√</td><td>√</td></tr><tr><td>setImmediate</td><td>✖</td><td>√</td></tr><tr><td>requestAnimationFrame</td><td>√</td><td>✖</td></tr></tbody></table><h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><table><thead><tr><th>名称</th><th>浏览器</th><th>Node</th></tr></thead><tbody><tr><td>process.nextTick(vue中的nextTick也是微任务)</td><td>✖</td><td>√</td></tr><tr><td>MutationObserver</td><td>√</td><td>✖</td></tr><tr><td>Promise.then catch finally</td><td>√</td><td>√</td></tr></tbody></table><h3 id="常见的面试题"><a href="#常见的面试题" class="headerlink" title="常见的面试题"></a>常见的面试题</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 输出依然为：1，2，3，4</span><br><span class="hljs-comment">// 解析：async函数在await之前的代码都是同步执行的，可以理解为await之前的代码属于new Promise实例化时传入的同步代码，await之后的所有代码都是在Promise.then中的回调</span><br><br>setTimeout(<span class="hljs-function"><span class="hljs-params">_</span> =&gt;</span> <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">4</span>))<br><br>async <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">1</span>)<br>    await Promise.resolve()<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">3</span>)<br>&#125;<br><br>main()<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>参考资料：<br><a href="https://juejin.cn/post/6844903968292749319">面试一定会问到的-js事件循环</a><br><a href="https://zhuanlan.zhihu.com/p/33058983">详解JavaScript中的Event Loop（事件循环）机制</a><br><a href="https://cloud.tencent.com/developer/article/1332957">js事件循环</a><br><a href="https://zh.javascript.info/event-loop">事件循环：微任务和宏任务</a><br><a href="https://cloud.tencent.com/developer/article/1601176">面试题：说说事件循环机制(满分答案来了)</a><br><a href="https://juejin.cn/post/6844903657264136200"> 微任务、宏任务与Event-Loop</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css踩坑集锦</title>
    <link href="/2021/03/04/css%E8%B8%A9%E5%9D%91%E9%9B%86%E9%94%A6/"/>
    <url>/2021/03/04/css%E8%B8%A9%E5%9D%91%E9%9B%86%E9%94%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="flex布局分成两行，设置两行之间的间距"><a href="#flex布局分成两行，设置两行之间的间距" class="headerlink" title="flex布局分成两行，设置两行之间的间距"></a>flex布局分成两行，设置两行之间的间距</h4><p><a href="https://segmentfault.com/q/1010000009817671#">如何设置flex两行之间的间距？</a></p><p>给父容器设置固定的高度，然后加上属性<code>align-content: space-between;</code></p><h4 id="css中mixin怎么理解"><a href="#css中mixin怎么理解" class="headerlink" title="css中mixin怎么理解"></a>css中mixin怎么理解</h4><p>less，sass这类css预处理语言中的混合，可以理解成自定义了一段代码，后面可以用@include调用，如设置一个有默认宽高的mixin</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// scss</span><br><span class="hljs-keyword">@mixin</span> box-size(<span class="hljs-variable">$width</span>:<span class="hljs-number">100px</span>,<span class="hljs-variable">$height</span>:<span class="hljs-number">100px</span>) &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-variable">$width</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-variable">$height</span>;<br>&#125;<br><span class="hljs-selector-class">.demo</span>&#123;<br>    <span class="hljs-keyword">@include</span> box-size;<br>&#125;<br><br><span class="hljs-selector-class">.demo2</span>&#123;<br>    <span class="hljs-keyword">@include</span> box-size(<span class="hljs-number">200px</span>,<span class="hljs-number">300px</span>);<br>&#125;<br><br><br><span class="hljs-comment">// 编译成css后</span><br><span class="hljs-selector-class">.demo</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.demo2</span>&#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="两个display-inline-block元素间的间距"><a href="#两个display-inline-block元素间的间距" class="headerlink" title="两个display:inline-block元素间的间距"></a>两个display:inline-block元素间的间距</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// 代码</span><br><span class="hljs-selector-class">.parent</span> <span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>&#125;<br><br><span class="hljs-selector-class">.left</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><br><span class="hljs-selector-class">.right</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: rosybrown;<br>&#125;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&quot;parent&quot;</span>&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&#x27;left&#x27;</span>&gt;&lt;/div&gt;<br>    &lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&#x27;right&#x27;</span>&gt;&lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="screen.png"></center><p>产生原因：换行显示或者空格隔开的情况下会有间距，这是因为浏览器在解析时，会将换行等读取成一个空格导致。</p><p>解决方案：</p><ol><li>手动在代码层面清除空格</li></ol><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta">&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;<br>    &lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;left&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;right&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li>父元素flex或者grid</li><li>父元素font-size：0<br><a href="https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/">其他一下hack方法</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解JavaScript中的原型和原型链(二)</title>
    <link href="/2021/02/03/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE-%E4%BA%8C/"/>
    <url>/2021/02/03/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p><a href="https://xypecho.github.io/2018/05/30/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/">之前关于原型和原型链</a>的笔记现在看来理解还是浮于表面，于是新开一章。</p><h3 id="通俗易懂的介绍下原型和原型链"><a href="#通俗易懂的介绍下原型和原型链" class="headerlink" title="通俗易懂的介绍下原型和原型链"></a>通俗易懂的介绍下原型和原型链</h3><p>刚毕业的小王没有自己的房子，但是可以住父母的房子，父母就可以看作是小王的<strong>原型</strong>，父母的爸爸妈妈也就是爷爷奶奶也有自己的房子(原型)。自己、父母、爷爷奶奶这一条链条就是<strong>原型链</strong>。</p><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><h4 id="面试题：什么是原型"><a href="#面试题：什么是原型" class="headerlink" title="面试题：什么是原型"></a>面试题：什么是原型</h4><p>每个对象在其内部初始化拥有的一个属性，就是原型(prototype)。<br>对象以其原型为模板，从原型继承方法和属性，这些属性和方法定义在对象的构造器函数的 prototype 属性上，而非对象实例本身</p><p>ps:也有例外，看下面的代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// <span class="hljs-keyword">Object</span>.creat第一个参数为创建的对象指定原型，我们赋值为<span class="hljs-keyword">null</span><br>// obj是完全的数据字典对象<br>let obj = <span class="hljs-keyword">Object</span>.<span class="hljs-keyword">create</span>(<span class="hljs-keyword">null</span>, &#123;<br>    <span class="hljs-type">name</span>: &#123;<br>        <span class="hljs-keyword">value</span>: <span class="hljs-string">&#x27;jack&#x27;</span><br>    &#125;<br>&#125;);<br>console.log(obj) // &#123;<span class="hljs-type">name</span>: &quot;jack&quot;&#125;<br>console.log(<span class="hljs-keyword">Object</span>.getPrototypeOf(obj)) // <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><h4 id="prototype-和-proto-区别"><a href="#prototype-和-proto-区别" class="headerlink" title="prototype 和 __proto__区别"></a>prototype 和 __proto__区别</h4><ol><li>prototype是函数的属性,<code>__proto__</code>是对象的，除了字符串、数字、true、false、null和undefined外，JavaScript中的其他值都是对象，所以函数两个都有</li><li>每个变量都会有一个__proto__属性，表示的是隐式原型。一个对象的隐式原型指向的是构造该对象的构造函数的原型。例子如下：</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">[].__proto__ <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> [].constructor.prototype<span class="hljs-comment">;  // true</span><br>[].__proto__ <span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span> Array.prototype<span class="hljs-comment">;  // true</span><br></code></pre></td></tr></table></figure><h4 id="对象自身的方法和原型上的方法冲突了？"><a href="#对象自身的方法和原型上的方法冲突了？" class="headerlink" title="对象自身的方法和原型上的方法冲突了？"></a>对象自身的方法和原型上的方法冲突了？</h4><p>引用文章开头的例子，自己有房子了当然不需要住在父母的房子里了呀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> hd = &#123;<br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(hd)<br>hd.<span class="hljs-property">__proto__</span>.<span class="hljs-property">show</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(hd)<br>hd.<span class="hljs-title function_">show</span>() <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><blockquote><p>原型链：是指一个对象继承的所有对象，称为这个对象的原型链</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搞懂Javascript闭包概念(二)</title>
    <link href="/2021/01/31/%E6%90%9E%E6%87%82Javascript%E9%97%AD%E5%8C%85%E6%A6%82%E5%BF%B5-%E4%BA%8C/"/>
    <url>/2021/01/31/%E6%90%9E%E6%87%82Javascript%E9%97%AD%E5%8C%85%E6%A6%82%E5%BF%B5-%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<p>这是闭包系列的第二章，<a href="https://xypecho.github.io/2019/12/02/%E6%90%9E%E6%87%82Javascript%E9%97%AD%E5%8C%85%E6%A6%82%E5%BF%B5/">第一章</a>只是囫囵吞枣般的记笔记，根本没多深入理解，最近在看了<a href="https://developer.mozilla.org/zh-cn/docs/Web/JavaScript/Closures">MDN上关于闭包的文章</a>以及<a href="https://www.bilibili.com/video/BV1YJ411R7ap?p=4">B站几个闭包视频</a>后有了些许理解，于是用小本本记下来。</p><h3 id="首先我们先来理解几个概念"><a href="#首先我们先来理解几个概念" class="headerlink" title="首先我们先来理解几个概念"></a>首先我们先来理解几个概念</h3><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><blockquote><p>作用域就是变量与函数的可访问范围。在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let a = <span class="hljs-number">1</span>; <span class="hljs-comment">// 定义一个全局变量，全局变量在js文件任意位置均可使用(在chrome的控制台也是可以输出的)，会一直存在，直到网页也就是window对象关闭后释放</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">// 1</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    let b = <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a) <span class="hljs-comment">// 函数内部输出了a，此时，找不到a，按照作用域链特性向外层寻找，找到了a为‘1’；所以结果输出的是1</span><br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b) <span class="hljs-comment">// 2</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b) <span class="hljs-comment">// b is not defined,执行fn函数计算机会为函数开辟一个新的内存地址，在函数内部创建变量并赋值为2，函数执行完即释放，所以在函数外部不可访问</span><br>fn()<br>fn() <span class="hljs-comment">// 调用多次即会生成多个内存地址</span><br><br></code></pre></td></tr></table></figure><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><p>上面的代码形象的解释了全局作用域和局部作用域这两个概念。接下来看看下面这个例子。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params"></span>) </span>&#123;<br>        console.<span class="hljs-title function_ invoke__">log</span>(++a)<br>    &#125;<br>    <span class="hljs-title function_ invoke__">sum</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"></span>)</span>; <span class="hljs-comment">// 1</span><br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"></span>)</span>; <span class="hljs-comment">// 1，因为上面提到，每次调用是新开辟内存地址，也是重新给a赋值为0，所以不管调用多少次，结果都是1</span><br></code></pre></td></tr></table></figure><p>那么，有没有什么办法可以实现每次调用fn，输出值就自增1呢，我们把代码修改一下</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span><span class="hljs-params">()</span> </span>&#123;<br>        console.log(++a)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> test = <span class="hljs-function"><span class="hljs-keyword">fn</span><span class="hljs-params">()</span></span>;<br>test(); <span class="hljs-comment">// 1</span><br>test(); <span class="hljs-comment">// 2</span><br>test(); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>为什么每次调用都会自增而不是一直输出1呢，我们来分析一下上面的代码:</p><ol><li>执行fn函数而fn函数的返回值还是一个函数就相当于将sum函数赋值给一个全局变量test，全局变量我们上文提到过，只有当网页关闭时才会卸载，这就导致sum函数始终在内存中。</li><li>那么此时的test是什么呢，我们来打印一下看看,输出如下</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ƒ <span class="hljs-built_in">sum</span>() &#123;<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(++a)<br>        &#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>每次执行test()即相当于执行sum函数，++a则相当于a&#x3D;a+1，代码可简化下</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> test() 相当于执行一次  a = a + <span class="hljs-number">1</span><br><span class="hljs-regexp">//</span> test() 相当于再执行一次  a = a + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol start="4"><li>因为sum一直在内存中，而fn是sum的父函数，sum的存在依赖于fn，因此fn也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收，所以整个fn函数内部数据都会被保留，a自增的结果也就一直存在</li></ol><p><strong>仔细回想一下刚刚我们查找变量a的过程发生了什么？</strong></p><ul><li>先从当前上下文的变量对象中查找</li><li>如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找</li><li>一直找到全局上下文的变量对象，也就是全局对象(ps:作用域链的顶端就是全局对象)</li></ul><p><strong>这样由多个执行上下文的变量对象构成的链表就叫做作用域链。</strong></p><p><strong>课外小拓展：fn函数中不return函数，直接return变量a行不行</strong></p><p>答案是：<strong>不行</strong>，上代码，每次调用完fn，内部的变量a就会被释放，所以每次调用都是返回1</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> ++a;<br>&#125;<br>let test = fn();<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(test) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(test) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(test) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="主角登场-闭包"><a href="#主角登场-闭包" class="headerlink" title="主角登场-闭包"></a>主角登场-闭包</h3><h4 id="面试题问什么是闭包"><a href="#面试题问什么是闭包" class="headerlink" title="面试题问什么是闭包"></a>面试题问什么是闭包</h4><p>现在我们来尝试回答一下：<br>0. 内部函数可以访问外部函数的变量称之为闭包</p><ol><li>闭包就是能够读取其他函数内部变量的函数，在本质上是函数内部和函数外部链接的桥梁</li><li>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行</li><li>函数和对其周围状态（词法环境）的引用捆绑在一起构成闭包（closure）（ps：回答最官方最靠谱的一个）</li></ol><h4 id="利用闭包搞点事"><a href="#利用闭包搞点事" class="headerlink" title="利用闭包搞点事"></a>利用闭包搞点事</h4><p>给定一个数组，里面有若干数字，要求返回数字大于3且小于9的</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">56</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, , <span class="hljs-number">44</span>];<br>let a = arr.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item &gt;= <span class="hljs-number">3</span> &amp;&amp; item &lt;= <span class="hljs-number">9</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a) <span class="hljs-comment">// [7, 5, 7, 3, 4]</span><br></code></pre></td></tr></table></figure><p>一顿操作轻轻松松实现了需求，如果此时万恶的pm改了一下需求，要求返回4-8的呢？既然我们目前在学闭包，那就利用闭包的特性来实现一下</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">56</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">44</span>];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">between</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-keyword">return</span> value &gt;= a &amp;&amp; value &lt;= b;<br>    &#125;<br>&#125;<br>let a = arr.<span class="hljs-built_in">filter</span>(between(<span class="hljs-number">4</span>, <span class="hljs-number">8</span>));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a) <span class="hljs-comment">// [7, 5, 7, 4]</span><br></code></pre></td></tr></table></figure><p>代码是不是更加健壮了呢，我们来分析一下上面的代码</p><ol><li>首先运行between函数而between函数返回一个函数，这个函数作为filter的回调函数来使用</li><li>filter循环下，不断执行between中的子函数，因为闭包的特性，子函数可以访问到父函数between函数的参数，然后就不断开辟空间执行return value &gt;&#x3D; a &amp;&amp; value &lt;&#x3D; b这段代码</li></ol><h4 id="闭包中的历史遗留问题"><a href="#闭包中的历史遗留问题" class="headerlink" title="闭包中的历史遗留问题"></a>闭包中的历史遗留问题</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> hd = &#123;<br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>) <span class="hljs-comment">// hd的对象</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a = hd.<span class="hljs-title function_">get</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">a</span>()) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>根据闭包的特性<code>return this.user;</code>此处的this应该是get函数中的this即hd对象，可为什么输出是undefined<br><strong>this永远指向调用他的的对象</strong>，我们将<code>hd.get()</code>赋值给全局的对象a，所以此处this指向全局变量Window，而Window下是没有user的对象的，所以输出undefined</p><p>解决方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 以前经常看到的 var that = this;</span><br><span class="hljs-keyword">let</span> hd = &#123;<br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> that.<span class="hljs-property">user</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a = hd.<span class="hljs-title function_">get</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">a</span>()) <span class="hljs-comment">//test</span><br><br><span class="hljs-comment">// 第二种方法，箭头函数，箭头函数没有this，默认绑定外层this</span><br><span class="hljs-keyword">let</span> hd = &#123;<br>    <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> a = hd.<span class="hljs-title function_">get</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">a</span>()) <span class="hljs-comment">//test</span><br></code></pre></td></tr></table></figure><h4 id="闭包的优点"><a href="#闭包的优点" class="headerlink" title="闭包的优点"></a>闭包的优点</h4><p>延长外部函数局部变量生命周期</p><h4 id="闭包的一些缺陷"><a href="#闭包的一些缺陷" class="headerlink" title="闭包的一些缺陷"></a>闭包的一些缺陷</h4><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量手动删除。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-comment">// 手动释放f的引用</span><br><br><span class="hljs-function"><span class="hljs-keyword">fn</span> </span>= <span class="hljs-built_in">null</span><br></code></pre></td></tr></table></figure><p>参考资料：<br><a href="https://developer.mozilla.org/zh-cn/docs/Web/JavaScript/Closures">MDN 闭包</a><br><a href="https://www.cnblogs.com/gaosirs/p/10579059.html">JS 作用域及作用域链</a><br><a href="https://blog.csdn.net/ther_su/article/details/108479789">前端知识总结（二） 闭包</a><br><a href="https://webbj97.github.io/summary/blog/js-basics/3.html#%E5%8F%82%E8%80%83">JavaScript基础（三）作用域</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些优雅的代码</title>
    <link href="/2021/01/26/%E4%B8%80%E4%BA%9B%E4%BC%98%E9%9B%85%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <url>/2021/01/26/%E4%B8%80%E4%BA%9B%E4%BC%98%E9%9B%85%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>这里用来收藏一下看到的优雅的、惊为天人的代码</p><h4 id="json-array-过滤指定的属性"><a href="#json-array-过滤指定的属性" class="headerlink" title="json array 过滤指定的属性"></a>json array 过滤指定的属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 原始值</span><br><span class="hljs-keyword">let</span> data = [<br>    &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;1234&quot;</span>,<br>        <span class="hljs-string">&quot;key1&quot;</span>: <span class="hljs-string">&quot;val1&quot;</span>,<br>        <span class="hljs-string">&quot;key2&quot;</span>: <span class="hljs-string">&quot;val2&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;someone&quot;</span>,<br>        <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">39</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;1234&quot;</span>,<br>        <span class="hljs-string">&quot;key1&quot;</span>: <span class="hljs-string">&quot;val1&quot;</span>,<br>        <span class="hljs-string">&quot;key2&quot;</span>: <span class="hljs-string">&quot;val2&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;someone&quot;</span>,<br>        <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">39</span><br>    &#125;<br>]<br><br><span class="hljs-comment">// 期望得到</span><br>[<br>    &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;1234&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;someone&quot;</span>,<br>        <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">39</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;1234&quot;</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;someone&quot;</span>,<br>        <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">39</span><br>    &#125;<br>]<br><br><span class="hljs-comment">// 代码</span><br>data.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">&#123; key1, key2, ...other &#125;</span>) =&gt;</span> other)<br></code></pre></td></tr></table></figure><h4 id="删除v站包含特定关键词的主题"><a href="#删除v站包含特定关键词的主题" class="headerlink" title="删除v站包含特定关键词的主题"></a>删除v站包含特定关键词的主题</h4><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="微信图片_20210310195633.png"></center><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">document.query<span class="hljs-constructor">SelectorAll(<span class="hljs-string">&quot;.cell.item&quot;</span>)</span>.<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">node</span> =&gt; <span class="hljs-params">node</span>.<span class="hljs-params">textContent</span>.<span class="hljs-params">includes</span>(<span class="hljs-string">&quot;王伟&quot;</span>)</span><span class="hljs-operator"> &amp;&amp; </span>node.remove<span class="hljs-literal">()</span>)<br></code></pre></td></tr></table></figure><h4 id="获取数组中的最大值"><a href="#获取数组中的最大值" class="headerlink" title="获取数组中的最大值"></a>获取数组中的最大值</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">let</span> <span class="hljs-built_in">values</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>];<br>console.<span class="hljs-built_in">log</span>(Math.<span class="hljs-built_in">max</span>(...<span class="hljs-built_in">values</span>)) // <span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h4 id="数组中的值求和"><a href="#数组中的值求和" class="headerlink" title="数组中的值求和"></a>数组中的值求和</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>let <span class="hljs-built_in">sum</span> = arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, current, index, arr</span>) =&gt;</span> prev + current); <span class="hljs-comment">// 15</span><br></code></pre></td></tr></table></figure><h4 id="js精度丢失问题"><a href="#js精度丢失问题" class="headerlink" title="js精度丢失问题"></a>js精度丢失问题</h4><blockquote><p>计算机存储双精度浮点数需要先把十进制数转换为二进制的科学记数法的形式，然后计算机以自己的规则{符号位+(指数位+指数偏移量的二进制)+小数部分}存储二进制的科学记数法,因为存储时有位数限制（64位），并且某些十进制的浮点数在转换为二进制数时会出现无限循环，会造成二进制的舍入操作(0舍1入)，当再转换为十进制时就造成了计算误差。</p></blockquote><p><a href="https://zhuanlan.zhihu.com/p/100353781">参考资料</a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 加法运算</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num1, num2</span>) &#123;<br>    const num1Digits = (num1.toString().<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>] || <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-built_in">length</span><br>    const num2Digits = (num2.toString().<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>] || <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-built_in">length</span><br>    const baseNum = Math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">10</span>, Math.<span class="hljs-built_in">max</span>(num1Digits, num2Digits))<br>    <span class="hljs-keyword">return</span> (num1 * baseNum + num2 * baseNum) / baseNum<br>&#125;<br></code></pre></td></tr></table></figure><details><summary>加减乘除运算</summary><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> operationObj = &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 处理传入的参数，不管传入的是数组还是以逗号分隔的参数都处理为数组</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> <span class="hljs-variable">args</span></span><br><span class="hljs-comment">        * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">*</span>&#125;</span><br><span class="hljs-comment">        */</span><br>    <span class="hljs-title function_">getParam</span>(<span class="hljs-params">args</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">concat</span>.<span class="hljs-title function_">apply</span>([], args);<br>    &#125;,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 获取每个数的乘数因子，根据小数位数计算</span><br><span class="hljs-comment">        * 1.首先判断是否有小数点，如果没有，则返回1；</span><br><span class="hljs-comment">        * 2.有小数点时，将小数位数的长度作为Math.pow()函数的参数进行计算</span><br><span class="hljs-comment">        * 例如2的乘数因子为1，2.01的乘数因子为100</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> <span class="hljs-variable">x</span></span><br><span class="hljs-comment">        * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment">        */</span><br>    <span class="hljs-title function_">multiplier</span>(<span class="hljs-params">x</span>) &#123;<br>        <span class="hljs-keyword">let</span> parts = x.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-keyword">return</span> parts.<span class="hljs-property">length</span> &lt; <span class="hljs-number">2</span> ? <span class="hljs-number">1</span> : <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">10</span>, parts[<span class="hljs-number">1</span>].<span class="hljs-property">length</span>);<br>    &#125;,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 获取多个数据中最大的乘数因子</span><br><span class="hljs-comment">        * 例如1.3的乘数因子为10，2.13的乘数因子为100</span><br><span class="hljs-comment">        * 则1.3和2.13的最大乘数因子为100</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">*</span>&#125;</span><br><span class="hljs-comment">        */</span><br>    <span class="hljs-title function_">correctionFactor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>        <span class="hljs-keyword">let</span> argArr = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getParam</span>(args);<br>        <span class="hljs-keyword">return</span> argArr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accum, next</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> num = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">multiplier</span>(next);<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(accum, num);<br>        &#125;, <span class="hljs-number">1</span>);<br>    &#125;,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 加法运算</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> <span class="hljs-variable">args</span></span><br><span class="hljs-comment">        * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment">        */</span><br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">let</span> calArr = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getParam</span>(args);<br>        <span class="hljs-comment">// 获取参与运算值的最大乘数因子</span><br>        <span class="hljs-keyword">let</span> corrFactor = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">correctionFactor</span>(calArr);<br>        <span class="hljs-keyword">let</span> sum = calArr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accum, curr</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// 将浮点数乘以最大乘数因子，转换为整数参与运算</span><br>            <span class="hljs-keyword">return</span> accum + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(curr * corrFactor);<br>        &#125;, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 除以最大乘数因子</span><br>        <span class="hljs-keyword">return</span> sum / corrFactor;<br>    &#125;,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 减法运算</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> <span class="hljs-variable">args</span></span><br><span class="hljs-comment">        * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment">        */</span><br>    <span class="hljs-title function_">subtract</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">let</span> calArr = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getParam</span>(args);<br>        <span class="hljs-keyword">let</span> corrFactor = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">correctionFactor</span>(calArr);<br>        <span class="hljs-keyword">let</span> diﬀ = calArr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accum, curr, curIndex</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// reduce()函数在未传入初始值时，curIndex从1开始，第一位参与运算的值需要</span><br>            <span class="hljs-comment">// 乘以最大乘数因子</span><br>            <span class="hljs-keyword">if</span> (curIndex === <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(accum * corrFactor) - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(curr * corrFactor);<br>            &#125;<br>            <span class="hljs-comment">// accum作为上一次运算的结果，就无须再乘以最大因子</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(accum) - <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(curr * corrFactor);<br>        &#125;);<br>        <span class="hljs-comment">// 除以最大乘数因子</span><br>        <span class="hljs-keyword">return</span> diﬀ / corrFactor;<br>    &#125;,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 乘法运算</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> <span class="hljs-variable">args</span></span><br><span class="hljs-comment">        * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">*</span>&#125;</span><br><span class="hljs-comment">        */</span><br>    <span class="hljs-title function_">multiply</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">let</span> calArr = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getParam</span>(args);<br>        <span class="hljs-keyword">let</span> corrFactor = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">correctionFactor</span>(calArr);<br>        calArr = calArr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// 乘以最大乘数因子</span><br>            <span class="hljs-keyword">return</span> item * corrFactor;<br>        &#125;);<br>        <span class="hljs-keyword">let</span> multi = calArr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accum, curr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(accum) * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(curr);<br>        &#125;, <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 除以最大乘数因子</span><br>        <span class="hljs-keyword">return</span> multi / <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(corrFactor, calArr.<span class="hljs-property">length</span>);<br>    &#125;,<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * 除法运算</span><br><span class="hljs-comment">        * <span class="hljs-doctag">@param</span> <span class="hljs-variable">args</span></span><br><span class="hljs-comment">        * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">*</span>&#125;</span><br><span class="hljs-comment">        */</span><br>    <span class="hljs-title function_">divide</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">let</span> calArr = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getParam</span>(args);<br>        <span class="hljs-keyword">let</span> quotient = calArr.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">accum, curr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">let</span> corrFactor = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">correctionFactor</span>(accum, curr);<br>            <span class="hljs-comment">// 同时转换为整数参与运算</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(accum * corrFactor) / <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(curr * corrFactor);<br>        &#125;);<br>        <span class="hljs-keyword">return</span> quotient;<br>    &#125;<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(operationObj.<span class="hljs-title function_">add</span>(<span class="hljs-number">0.1</span>, <span class="hljs-number">0.7</span>));      <span class="hljs-comment">// 0.8</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(operationObj.<span class="hljs-title function_">subtract</span>(<span class="hljs-number">0.3</span>, <span class="hljs-number">0.2</span>)); <span class="hljs-comment">// 0.1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(operationObj.<span class="hljs-title function_">multiply</span>(<span class="hljs-number">0.7</span>, <span class="hljs-number">180</span>)); <span class="hljs-comment">// 126</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(operationObj.<span class="hljs-title function_">divide</span>(<span class="hljs-number">0.3</span>, <span class="hljs-number">0.1</span>));   <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure></details><h4 id="统计页面一共有多少种HTML标签"><a href="#统计页面一共有多少种HTML标签" class="headerlink" title="统计页面一共有多少种HTML标签"></a>统计页面一共有多少种HTML标签</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([...<span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelectorAll</span>(<span class="hljs-string">&#x27;*&#x27;</span>)].map(n =&gt; n.nodeName)).size<br></code></pre></td></tr></table></figure><h4 id="批量给对象中的value设为空"><a href="#批量给对象中的value设为空" class="headerlink" title="批量给对象中的value设为空"></a>批量给对象中的value设为空</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const obj = &#123;<br>    <span class="hljs-string">&quot;holiday&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;元旦&quot;</span>,<br>    <span class="hljs-string">&quot;wage&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>    <span class="hljs-string">&quot;date&quot;</span>: <span class="hljs-string">&quot;2022-01-01&quot;</span>,<br>    <span class="hljs-string">&quot;rest&quot;</span>: <span class="hljs-string">&quot;85&quot;</span><br>&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>keys(obj).<span class="hljs-keyword">for</span><span class="hljs-constructor">Each(<span class="hljs-params">item</span> =&gt; <span class="hljs-params">obj</span>[<span class="hljs-params">item</span>] = &#x27;&#x27;)</span><br></code></pre></td></tr></table></figure><h4 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h4><p>是的，几乎算是每个前端写的最多的代码了。但是最近看到微信小程序demo里面的代码，感慨其优雅。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const formatTime = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-built_in">date</span></span>) =&gt;</span> &#123;<br>    const <span class="hljs-built_in">year</span> = <span class="hljs-built_in">date</span>.getFullYear()<br>    const <span class="hljs-built_in">month</span> = <span class="hljs-built_in">date</span>.getMonth() + <span class="hljs-number">1</span><br>    const <span class="hljs-built_in">day</span> = <span class="hljs-built_in">date</span>.getDate()<br>    const <span class="hljs-built_in">hour</span> = <span class="hljs-built_in">date</span>.getHours()<br>    const <span class="hljs-built_in">minute</span> = <span class="hljs-built_in">date</span>.getMinutes()<br>    const <span class="hljs-built_in">second</span> = <span class="hljs-built_in">date</span>.getSeconds()<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;[<span class="hljs-built_in">year</span>, <span class="hljs-built_in">month</span>, <span class="hljs-built_in">day</span>].<span class="hljs-built_in">map</span>(formatNumber).join(<span class="hljs-string">&quot;-&quot;</span>)&#125;</span> <span class="hljs-subst">$&#123;[</span></span><br><span class="hljs-subst"><span class="hljs-string">        <span class="hljs-built_in">hour</span>,</span></span><br><span class="hljs-subst"><span class="hljs-string">        <span class="hljs-built_in">minute</span>,</span></span><br><span class="hljs-subst"><span class="hljs-string">        <span class="hljs-built_in">second</span>,</span></span><br><span class="hljs-subst"><span class="hljs-string">    ]</span></span><br><span class="hljs-subst"><span class="hljs-string">        .<span class="hljs-built_in">map</span>(formatNumber)</span></span><br><span class="hljs-subst"><span class="hljs-string">        .join(<span class="hljs-string">&quot;:&quot;</span>)&#125;</span>`</span><br>&#125;<br><br>const formatNumber = <span class="hljs-function">(<span class="hljs-params">n</span>) =&gt;</span> &#123;<br>    n = n.toString()<br>    <span class="hljs-keyword">return</span> n[<span class="hljs-number">1</span>] ? n : <span class="hljs-string">`0<span class="hljs-subst">$&#123;n&#125;</span>`</span><br>&#125;<br><br><span class="hljs-comment">// 2022-11-14 21:39:01</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>((formatTime(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())));<br></code></pre></td></tr></table></figure><h4 id="可拓展的格式化时间"><a href="#可拓展的格式化时间" class="headerlink" title="可拓展的格式化时间"></a>可拓展的格式化时间</h4><p>预先定义一个对象，key为可能的正则表达式，即y、M、d、H、m、s、q（季度）、S（毫秒）等，value为每个正则表达式对应的实际值。<br>预先匹配年份，确定年份的值。然后遍历对象，确定可能有的月份、天、时、分和秒。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Date</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">format</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fmt</span>) &#123;<br>    <span class="hljs-keyword">var</span> o = &#123;<br>        <span class="hljs-string">&quot;M+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>, <span class="hljs-comment">//月份</span><br>        <span class="hljs-string">&quot;d+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getDate</span>(), <span class="hljs-comment">//日</span><br>        <span class="hljs-string">&quot;H+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getHours</span>(), <span class="hljs-comment">//小时</span><br>        <span class="hljs-string">&quot;m+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMinutes</span>(), <span class="hljs-comment">//分</span><br>        <span class="hljs-string">&quot;s+&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSeconds</span>(), <span class="hljs-comment">//秒</span><br>        <span class="hljs-string">&quot;q+&quot;</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>((<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">3</span>) / <span class="hljs-number">3</span>), <span class="hljs-comment">//季度</span><br>        <span class="hljs-string">&quot;S&quot;</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getMilliseconds</span>() <span class="hljs-comment">//毫秒</span><br>    &#125;;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/(y+)/</span>.<span class="hljs-title function_">test</span>(fmt)) &#123;<br>        <span class="hljs-comment">// RegExp.$1是RegExp的一个属性，指的是与正则表达式匹配的第一个子匹配(以括号为标志)字符串。类推RegExp.$2是第二个匹配对象</span><br>        fmt = fmt.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>, (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getFullYear</span>() + <span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_">substr</span>(<span class="hljs-number">4</span> -<br>            <span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>.<span class="hljs-property">length</span>));<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> k <span class="hljs-keyword">in</span> o) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;(&quot;</span> + k + <span class="hljs-string">&quot;)&quot;</span>).<span class="hljs-title function_">test</span>(fmt)) &#123;<br>            fmt = fmt.<span class="hljs-title function_">replace</span>(<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>, (<span class="hljs-title class_">RegExp</span>.<span class="hljs-property">$1</span>.<span class="hljs-property">length</span> == <span class="hljs-number">1</span>) ? (o[k]) :<br>                ((<span class="hljs-string">&quot;00&quot;</span> + o[k]).<span class="hljs-title function_">substr</span>((<span class="hljs-string">&quot;&quot;</span> + o[k]).<span class="hljs-property">length</span>)));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fmt;<br>&#125;;<br><br><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d.<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;yyyy-MM-dd HH:mm:ss.S&#x27;</span>)); <span class="hljs-comment">// 2017-11-26 14:46:13.894</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d.<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;yyyy-MM-dd&#x27;</span>)); <span class="hljs-comment">// 2017-11-26</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(d.<span class="hljs-title function_">format</span>(<span class="hljs-string">&#x27;yyyy-MM-dd q HH:mm:ss&#x27;</span>)); <span class="hljs-comment">// 2017-11-26 4 14:46:13</span><br></code></pre></td></tr></table></figure><h4 id="比较日期大小"><a href="#比较日期大小" class="headerlink" title="比较日期大小"></a>比较日期大小</h4><p>如果是时间戳则直接比较数字大小</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">CompareDate</span>(<span class="hljs-params">dateStr1, dateStr2</span>) &#123;<br>    <span class="hljs-keyword">var</span> date1 = dateStr1.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/-/g</span>, <span class="hljs-string">&quot;\/&quot;</span>);<br>    <span class="hljs-keyword">var</span> date2 = dateStr2.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/-/g</span>, <span class="hljs-string">&quot;\/&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(date1) &gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(date2);<br>&#125;<br><br>CompareDate(<span class="hljs-string">&quot;2018-07-30 7:31&quot;</span>, <span class="hljs-string">&quot;2018-07-31 7:30&quot;</span>);  <span class="hljs-comment">// false</span><br>CompareDate(<span class="hljs-string">&quot;2018-08-01 17:31&quot;</span>, <span class="hljs-string">&quot;2018-08-01 17:30&quot;</span>);  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>还有另外一种办法，回顾一下为什么可以用数字和对象做比较呢？<strong>JavaScript会自动做类型转换，对象的话会调用valueOf()函数转换为时间戳</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lisp">setInterval(<span class="hljs-name">function</span> () &#123;<br>if (<span class="hljs-name">Date</span>.now() &gt;= new Date(<span class="hljs-string">&quot;2016-09-12 15:59:00&quot;</span>)) &#123;<br>    $(<span class="hljs-string">&quot;#seckillQuantity&quot;</span>).val(<span class="hljs-number">1</span>)<span class="hljs-comment">; //1盒</span><br>    $(<span class="hljs-string">&quot;.buyButtons.J_buyButtons&quot;</span>).click()<span class="hljs-comment">; //抢购按钮</span><br>    var value = $(<span class="hljs-string">&quot;.answerList&quot;</span>).children().eq(<span class="hljs-number">0</span>).html()<span class="hljs-comment">; //验证码取值</span><br>    $(<span class="hljs-string">&quot;#randomAnswer&quot;</span>).val(<span class="hljs-name">value</span>)<span class="hljs-comment">; //验证码填值</span><br>    $(<span class="hljs-string">&quot;.answer-button&quot;</span>).children().eq(<span class="hljs-number">0</span>).click()<span class="hljs-comment">; //提交验证码</span><br>&#125;<br>&#125;, <span class="hljs-number">10</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="计算当前日期前后N天的日期"><a href="#计算当前日期前后N天的日期" class="headerlink" title="计算当前日期前后N天的日期"></a>计算当前日期前后N天的日期</h4><p>假如知道一个日期为2018-08-01，需要求出该时期前、后3天的日期。前3天日期为2018-07-29，后3天日期为2018-08-04。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">GetDateStr(AddDayCount)</span> &#123;<br>    var dd = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>;<br>    dd.set<span class="hljs-constructor">Date(<span class="hljs-params">dd</span>.<span class="hljs-params">getDate</span>()</span> + AddDayCount);  <span class="hljs-comment">//获取AddDayCount天后的日期</span><br>    var y = dd.get<span class="hljs-constructor">FullYear()</span>;<br>    <span class="hljs-comment">//获取当前月份的日期，不足10补0</span><br>    var m = (dd.get<span class="hljs-constructor">Month()</span> + <span class="hljs-number">1</span>) &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + (dd.get<span class="hljs-constructor">Month()</span> + <span class="hljs-number">1</span>) : (dd.get<span class="hljs-constructor">Month()</span> + <span class="hljs-number">1</span>);<br>    var d = dd.get<span class="hljs-constructor">Date()</span> &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + dd.get<span class="hljs-constructor">Date()</span> : dd.get<span class="hljs-constructor">Date()</span>;  <span class="hljs-comment">//获取当前几号，</span><br>    <span class="hljs-comment">//不足10补0</span><br>    return y + <span class="hljs-string">&quot;-&quot;</span> + m + <span class="hljs-string">&quot;-&quot;</span> + d;<br>&#125;<br><br>console.log(<span class="hljs-string">&quot;半年前：&quot;</span> + <span class="hljs-constructor">GetDateStr(-180)</span>); <span class="hljs-comment">// 半年前：2018-02-02</span><br>console.log(<span class="hljs-string">&quot;三月前：&quot;</span> + <span class="hljs-constructor">GetDateStr(-90)</span>);  <span class="hljs-comment">// 三月前：2018-05-03</span><br>console.log(<span class="hljs-string">&quot;一月前：&quot;</span> + <span class="hljs-constructor">GetDateStr(-30)</span>);  <span class="hljs-comment">// 一月前：2018-07-02</span><br>console.log(<span class="hljs-string">&quot;昨天：&quot;</span> + <span class="hljs-constructor">GetDateStr(-1)</span>);     <span class="hljs-comment">// 昨天：2018-07-31</span><br>console.log(<span class="hljs-string">&quot;今天：&quot;</span> + <span class="hljs-constructor">GetDateStr(0)</span>);      <span class="hljs-comment">// 今天：2018-08-01</span><br>console.log(<span class="hljs-string">&quot;明天：&quot;</span> + <span class="hljs-constructor">GetDateStr(1)</span>);      <span class="hljs-comment">// 明天：2018-08-02</span><br>console.log(<span class="hljs-string">&quot;后天：&quot;</span> + <span class="hljs-constructor">GetDateStr(2)</span>);      <span class="hljs-comment">// 后天：2018-08-03</span><br>console.log(<span class="hljs-string">&quot;一月后：&quot;</span> + <span class="hljs-constructor">GetDateStr(30)</span>);   <span class="hljs-comment">// 一月后：2018-08-31</span><br>console.log(<span class="hljs-string">&quot;三月后：&quot;</span> + <span class="hljs-constructor">GetDateStr(90)</span>);   <span class="hljs-comment">// 三月后：2018-10-30</span><br>console.log(<span class="hljs-string">&quot;半年后：&quot;</span> + <span class="hljs-constructor">GetDateStr(180)</span>);  <span class="hljs-comment">// 半年后：2019-01-28</span><br></code></pre></td></tr></table></figure><h4 id="计算两个日期的时间差"><a href="#计算两个日期的时间差" class="headerlink" title="计算两个日期的时间差"></a>计算两个日期的时间差</h4><p>设计的规则是向下取整法。大于1天，不满2天的按照1天处理；大于1小时，不满2小时的按照1小时处理。</p><p>计算两个日期的时间差的主要思路如下。<br>· 将传入的时间字符串中的“-”分隔符转换为“&#x2F;”。<br>· 将转换后的字符串构造成新的Date对象。<br>· 以毫秒作为最小的处理单位，然后根据处理维度，进行相应的描述计算。例如天换算成毫秒，就为“1000 * 3600 * 24”。<br>· 两个时间都换算成秒后，进行减法运算，与维度值相除即可得到两个时间的差值。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetDateDi</span>ﬀ(<span class="hljs-params">startTime, endTime, diﬀType</span>) </span>&#123;<br>    <span class="hljs-comment">// 将yyyy-MM-dd的时间格式转换为yyyy/MM/dd的时间格式</span><br>    startTime = startTime.replace(<span class="hljs-regexp">/\-/g</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>    endTime = endTime.replace(<span class="hljs-regexp">/\-/g</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>    <span class="hljs-comment">// 将计算间隔类性字符转换为小写</span><br>    diﬀType = diﬀType.toLowerCase();<br>    <span class="hljs-keyword">var</span> sTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(startTime);  <span class="hljs-comment">// 开始时间</span><br>    <span class="hljs-keyword">var</span> eTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(endTime);  <span class="hljs-comment">// 结束时间</span><br>    <span class="hljs-comment">//作为除数的数字</span><br>    <span class="hljs-keyword">var</span> divNum = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">switch</span> (diﬀType) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;second&quot;</span>:<br>            divNum = <span class="hljs-number">1000</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;minute&quot;</span>:<br>            divNum = <span class="hljs-number">1000</span> * <span class="hljs-number">60</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hour&quot;</span>:<br>            divNum = <span class="hljs-number">1000</span> * <span class="hljs-number">3600</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;day&quot;</span>:<br>            divNum = <span class="hljs-number">1000</span> * <span class="hljs-number">3600</span> * <span class="hljs-number">24</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-attribute">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseInt</span>((eTime.getTime() - sTime.getTime()) / <span class="hljs-built_in">parseInt</span>(divNum));<br>&#125;<br><br><span class="hljs-keyword">var</span> result1 = GetDateDiﬀ(<span class="hljs-string">&quot;2018-07-30 18:12:34&quot;</span>, <span class="hljs-string">&#x27;2018-08-01 9:17:30&#x27;</span>, <span class="hljs-string">&quot;day&quot;</span>);<br><span class="hljs-keyword">var</span> result2 = GetDateDiﬀ(<span class="hljs-string">&quot;2018-07-29 20:56:34&quot;</span>, <span class="hljs-string">&#x27;2018-08-01 9:17:30&#x27;</span>, <span class="hljs-string">&quot;hour&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;两者时间差为：&quot;</span> + result1 + <span class="hljs-string">&quot;天。&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;两者时间差为：&quot;</span> + result2 + <span class="hljs-string">&quot;小时。&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="获取字符串中所有的数字，并进行求和"><a href="#获取字符串中所有的数字，并进行求和" class="headerlink" title="获取字符串中所有的数字，并进行求和"></a>获取字符串中所有的数字，并进行求和</h4><p>由于平常使用小米笔记记账，全是文本类型，月底汇总时手动相加显得太蠢，就写了一段代码来实现。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 提取字符串中的数字</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getNumFormStr</span>(<span class="hljs-params">str</span>) &#123;<br>    const result = str.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/[\u4e00-\u9fa5\s]/g</span>, <span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-comment">// 将字符串中的数字转成数字数组，并排序</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">str2NumArray</span>(<span class="hljs-params">str</span>) &#123;<br>    const numStr = getNumFormStr(str)<br>    const res = numStr.match(<span class="hljs-regexp">/\d+(\.\d+)?/g</span>).<span class="hljs-built_in">map</span>(<span class="hljs-built_in">Number</span>).<span class="hljs-built_in">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b - a);<br>    <span class="hljs-keyword">return</span> res<br>&#125;<br><br><span class="hljs-comment">// 求和</span><br>const <span class="hljs-built_in">sum</span> = str2NumArray(str).<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">prev, current, index, arr</span>) =&gt;</span> prev + current); <span class="hljs-comment">// 15</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">sum</span>);<br></code></pre></td></tr></table></figure><h4 id="扁平数据结构转Tree"><a href="#扁平数据结构转Tree" class="headerlink" title="扁平数据结构转Tree"></a>扁平数据结构转Tree</h4><p>实际开发中经常遇到的问题，将后端返回的数据转成tree结构。</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">// 例如接口返回</span><br><span class="hljs-keyword">const</span> <span class="hljs-built_in">list</span> = [<br>    &#123; <span class="hljs-attribute">id:</span><span class="hljs-string"> 1, name</span>: <span class="hljs-string">&#x27;部门1&#x27;</span>, <span class="hljs-attribute">parentId</span>: <span class="hljs-number">0</span> &#125;,<br>    &#123; <span class="hljs-attribute">id:</span><span class="hljs-string"> 2, name</span>: <span class="hljs-string">&#x27;部门2&#x27;</span>, <span class="hljs-attribute">parentId</span>: <span class="hljs-number">1</span> &#125;,<br>    &#123; <span class="hljs-attribute">id:</span><span class="hljs-string"> 3, name</span>: <span class="hljs-string">&#x27;部门3&#x27;</span>, <span class="hljs-attribute">parentId</span>: <span class="hljs-number">1</span> &#125;,<br>    &#123; <span class="hljs-attribute">id:</span><span class="hljs-string"> 4, name</span>: <span class="hljs-string">&#x27;部门4&#x27;</span>, <span class="hljs-attribute">parentId</span>: <span class="hljs-number">3</span> &#125;,<br>    &#123; <span class="hljs-attribute">id:</span><span class="hljs-string"> 5, name</span>: <span class="hljs-string">&#x27;部门5&#x27;</span>, <span class="hljs-attribute">parentId</span>: <span class="hljs-number">4</span> &#125;,<br>];<br><br><span class="hljs-comment">// 期望</span><br>[<br>    &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;部门1&quot;</span>,<br>        <span class="hljs-string">&quot;pid&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;children&quot;</span>: [<br>            &#123;<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>,<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;部门2&quot;</span>,<br>                <span class="hljs-string">&quot;pid&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-string">&quot;children&quot;</span>: []<br>            &#125;,<br>            &#123;<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">3</span>,<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;部门3&quot;</span>,<br>                <span class="hljs-string">&quot;pid&quot;</span>: <span class="hljs-number">1</span>,<br>                <span class="hljs-string">&quot;children&quot;</span>: [<br>                    <span class="hljs-comment">// 结果 ,,,</span><br>                ]<br>            &#125;<br>        ]<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const convert = <span class="hljs-function">(<span class="hljs-params">arr</span>) =&gt;</span> &#123;<br>    const result = [];<br>    const <span class="hljs-built_in">map</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>    arr.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">map</span>.set(item.id, item);<br>    &#125;);<br>    arr.forEach(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>        const parent = <span class="hljs-built_in">map</span>.get(item.parentId);<br>        <span class="hljs-keyword">if</span> (parent) &#123;<br>            <span class="hljs-keyword">if</span> (parent.children) &#123;<br>                parent.children.<span class="hljs-built_in">push</span>(item);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                parent.children = [item];<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            result.<span class="hljs-built_in">push</span>(item);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>代码片段</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020年终小结</title>
    <link href="/2021/01/01/2020%E5%B9%B4%E7%BB%88%E5%B0%8F%E7%BB%93/"/>
    <url>/2021/01/01/2020%E5%B9%B4%E7%BB%88%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>混乱的2020终于过去了，因为疫情没能…，等等，好像也没什么因为疫情而打乱的计划，该跳槽的还是跳槽，该旅游的依然旅游，不过该找的对象依然没找到…</p></blockquote><center>    <img style="border-radius: 0.3125em;    width:30%;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="be6320d0ly1gbbfckziaxj20u01hcn3q.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">疫情爆发前离职...当时还小小的焦虑了下</div></center><h4 id="先看看去年立的flag实现的咋样了"><a href="#先看看去年立的flag实现的咋样了" class="headerlink" title="先看看去年立的flag实现的咋样了"></a>先看看去年立的flag实现的咋样了</h4><ol><li><del>月入过12k</del>  达成</li><li><del>一次说走就走的旅行<code>(很想去日本看看，不过很怕语言不通啊)</code></del>  虽然没能出境游，但是去过了丽江、大理了呀</li><li><del>继续执行每月存工资的百分之80的规划<code>(不知道跳槽到其他城市的话，加上房租有没有可能存百分之80...)</code></del>  完成度不高，有几个月超支了</li></ol><p>总体来看，还行8。<br>还是有很多不足之处的，今年(2020)精力更多的花在其他方面，社交、短视频、健身，技术上反而没以前那么重视了，今年除了学会写小程序以外，没学习其他新技术。</p><h4 id="2020的一些其他"><a href="#2020的一些其他" class="headerlink" title="2020的一些其他"></a>2020的一些其他</h4><p>过了一次有史以来最长的年，毕业后难得和家里人相处这么久。</p><p>开始接触理财，今年定投的基金收益达到7.78%，年收益小1w。最大的收获倒不是这收益，而是让我转变了思维，趁现在抗风险能力还很强的时候，应该适当接触理财。</p><p>辞职后选择城市时，因为疫情不能太远，就在南京和苏州间挑选。<br>因为一个妹子，选择了南京，以为会有一段 <del>轰轰烈烈</del> 的感情，人生三大幻觉啊啊啊<br>第一次单独约妹子，第一次和一个非亲非故的妹子产生了如此多的交集，二十多年来的首次…<br>也算是有点收获，不过没能和这个妹子谈一段恋爱还是有点小小的遗憾，求而不得，这才是人生呐…</p><p>认识了新的朋友，并不断尝试新事物，新体验。一个人睡紫金山、睡机场，一个人出去旅游，第一次真正意义上的跨年，第一次玩狼人杀，第一次参加那么多从前都不会去参加的社交活动…</p><h4 id="给2021年立一些flag吧"><a href="#给2021年立一些flag吧" class="headerlink" title="给2021年立一些flag吧"></a>给2021年立一些flag吧</h4><ol><li>location &#x3D;&#x3D;&#x3D; ‘南京’ ? ‘月入过16k’ : (location &#x3D;&#x3D;&#x3D; ‘上海’ ? ‘20k+’ : ‘auto’)</li><li>改变穿搭，在衣服上舍得投入</li><li>坚持跑步，继续学习护肤相关知识</li><li>学习新技术，保持学习，多coding</li><li>每年都会立的flag…脱单，要学会真诚大胆的追求妹子，希望明年写小结的时候不再是一个人吧</li><li>整一个自己喜欢的产品，例如最近在写的小程序</li></ol>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序踩坑指北</title>
    <link href="/2020/11/21/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8C%97/"/>
    <url>/2020/11/21/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8C%97/</url>
    
    <content type="html"><![CDATA[<h3 id="iOS端border-radius失效"><a href="#iOS端border-radius失效" class="headerlink" title="iOS端border-radius失效"></a>iOS端border-radius失效</h3><p>一般我们想设置圆角，都是父元素设置border-radius然后overflow:hidden，然鹅iOS上这个基础属性却并不是支持的很好，需要<a href="https://blog.csdn.net/wangshuo0407/article/details/79844596">hack</a>一下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">// 给父元素加上如下属性即可<br><span class="hljs-selector-class">.father_wrapper</span> &#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    -webkit-<span class="hljs-attribute">backface-visibility</span>: hidden;<br>    -moz-<span class="hljs-attribute">backface-visibility</span>: hidden;<br>    -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    -moz-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="iOS端滑动特性引起的遮罩失效、白屏"><a href="#iOS端滑动特性引起的遮罩失效、白屏" class="headerlink" title="iOS端滑动特性引起的遮罩失效、白屏"></a>iOS端滑动特性引起的遮罩失效、白屏</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="微信图片_20201121152323.jpg">    <br></center><p>如上图，商品栏是一个横向滚动的scroll-view，父容器position:relation,子容器内的商品状态遮罩(已售罄、已售33%)position:absolute。在iOS端需要滑动到可视区域才会出现，且最后一个元素始终不能出现遮罩。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">// 给父元素加上如下属性即可</span><br><span class="hljs-selector-class">.father_wrapper</span> &#123;<br>  <span class="hljs-attribute">will-change</span>: transform;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="cover-view文字截断问题"><a href="#cover-view文字截断问题" class="headerlink" title="cover-view文字截断问题"></a>cover-view文字截断问题</h3><p>这个在Android上出现的更频繁，出现的原因是cover-view自带overflow:hidden属性，如果是固定文字则直接写死cover-view的宽度即可。<br>如果不是固定的文字，是从接口获取的则需要动态设置宽度。</p><h4 id="解决方法1-动态设置宽度"><a href="#解决方法1-动态设置宽度" class="headerlink" title="解决方法1 动态设置宽度"></a>解决方法1 动态设置宽度</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 封装一下获取宽度的函数</span><br><span class="hljs-title function_">setCoverViewWidth</span>(<span class="hljs-params">dom, cb</span>) &#123;<br>    wx.<span class="hljs-title function_">createSelectorQuery</span>().<span class="hljs-title function_">in</span>(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">select</span>(dom).<span class="hljs-title function_">boundingClientRect</span>(<span class="hljs-function">(<span class="hljs-params">rects</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">typeof</span> cb === <span class="hljs-string">&quot;function&quot;</span> &amp;&amp; <span class="hljs-title function_">cb</span>(rects);<br>    &#125;).<span class="hljs-title function_">exec</span>()<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setCoverViewWidth</span>(<span class="hljs-string">&#x27;#cash-dom&#x27;</span>, <span class="hljs-function"><span class="hljs-params">rects</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">coverViewWidth</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">Math</span>.ceil(rects.width + <span class="hljs-number">1</span>)&#125;</span>px`</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h4><p>给cover-view加上样式white-space: pre-wrap;不过这个有大部分情况下会引起更多问题。</p><h3 id="组件内fixed无效的问题"><a href="#组件内fixed无效的问题" class="headerlink" title="组件内fixed无效的问题"></a>组件内fixed无效的问题</h3><p>封装了一个模态框组件，遮罩是用的<code>position:fixed;top:0;left:0;right:0;bottom:0</code>实现的，但是遮罩不能全屏展示。<br>逐级向上查找，去住父级的<code>transform</code>属性即可。</p><h3 id="iOS时间格式化问题"><a href="#iOS时间格式化问题" class="headerlink" title="iOS时间格式化问题"></a>iOS时间格式化问题</h3><p>ios真机下，日期格式只能是<code>2022/09/21</code>像<code>2022-09-21</code>这种格式无法转时间戳会直接显示NaN</p>]]></content>
    
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>检查嵌套对象属性是否为空的优雅方法</title>
    <link href="/2020/10/15/%E6%A3%80%E6%9F%A5%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E7%9A%84%E4%BC%98%E9%9B%85%E6%96%B9%E6%B3%95/"/>
    <url>/2020/10/15/%E6%A3%80%E6%9F%A5%E5%B5%8C%E5%A5%97%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E7%9A%84%E4%BC%98%E9%9B%85%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>在项目中经常会遇到这样的情况，要对对象下的属性进行操作，由于js里面访问undefined或者null的成员会报错，所以我们一般<code>a &amp;&amp; a.b &amp;&amp; a.b.c</code>这么实现。可是如果属性嵌套层级很多呢？一直写&amp;&amp;判断？显然，不，就是不优雅。</p><p>下面就是几种优雅的检查嵌套对象属性是否为空的方法~~~</p><h3 id="使用极为先进的Lodash"><a href="#使用极为先进的Lodash" class="headerlink" title="使用极为先进的Lodash"></a>使用极为先进的Lodash</h3><p><a href="https://www.lodashjs.com/docs/lodash.get">lodash文档</a></p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-comment">// 引入lodash库</span><br><br>let <span class="hljs-built_in">object</span> = &#123;<br>    user: &#123;<br>        loc: &#123;<br>            lat: <span class="hljs-number">50</span>,<br>            long: <span class="hljs-number">9</span><br>        &#125;<br>    &#125;<br>&#125;<br>console.<span class="hljs-built_in">log</span>(_.<span class="hljs-built_in">get</span>(<span class="hljs-built_in">object</span>, <span class="hljs-string">&#x27;user.lat.loc&#x27;</span>))  <span class="hljs-comment">// 输出undefined</span><br><span class="hljs-comment">// 直接调用不存在的对象下的值也不会报错TypeError: Cannot read property &#x27;loc&#x27; of undefined</span><br>console.<span class="hljs-built_in">log</span>(_.<span class="hljs-built_in">get</span>(<span class="hljs-built_in">object</span>, <span class="hljs-string">&#x27;user.loc&#x27;</span>)) <span class="hljs-comment">//  &#123;lat: 50, long: 9&#125;</span><br>console.<span class="hljs-built_in">log</span>(_.<span class="hljs-built_in">get</span>(<span class="hljs-built_in">object</span>, <span class="hljs-string">&#x27;user.loc.lat&#x27;</span>)) <span class="hljs-comment">// 50</span><br>console.<span class="hljs-built_in">log</span>(_.<span class="hljs-built_in">get</span>(<span class="hljs-built_in">object</span>, <span class="hljs-string">&#x27;user.loc.lat1&#x27;</span>)) <span class="hljs-comment">// undefined </span><br>console.<span class="hljs-built_in">log</span>(_.<span class="hljs-built_in">get</span>(<span class="hljs-built_in">object</span>, <span class="hljs-string">&#x27;user.loc.lat1&#x27;</span>, <span class="hljs-string">&#x27;默认值&#x27;</span>)) <span class="hljs-comment">// 默认值</span><br></code></pre></td></tr></table></figure><h3 id="ES2020新语法-可选链-、-双问号"><a href="#ES2020新语法-可选链-、-双问号" class="headerlink" title="ES2020新语法[可选链]、[双问号]"></a>ES2020新语法[可选链]、[双问号]</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/%E5%8F%AF%E9%80%89%E9%93%BE">可选链操作符</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> object = &#123;<br>    user: &#123;<br>        <span class="hljs-keyword">loc</span>: &#123;<br>            <span class="hljs-keyword">lat</span>: <span class="hljs-number">50</span>,<br>            long: <span class="hljs-number">9</span><br>        &#125;<br>    &#125;<br>&#125;<br>console.<span class="hljs-built_in">log</span>(object.<span class="hljs-keyword">lat</span>.<span class="hljs-keyword">loc</span>) <br>// Uncaught TypeError: Cannot <span class="hljs-keyword">read</span> property <span class="hljs-string">&#x27;loc&#x27;</span> of undefined<br>console.<span class="hljs-built_in">log</span>(object?.<span class="hljs-keyword">lat</span>?.<span class="hljs-keyword">loc</span>) // undefined<br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator">双问号操作符</a></p><p>双问号操作符其实就和lodash的get功能一样，可以设置默认值</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> object = &#123;<br>    user: &#123;<br>        <span class="hljs-keyword">loc</span>: &#123;<br>            <span class="hljs-keyword">lat</span>: <span class="hljs-number">50</span>,<br>            long: <span class="hljs-number">9</span><br>        &#125;<br>    &#125;<br>&#125;<br>console.<span class="hljs-built_in">log</span>(object?.<span class="hljs-keyword">lat</span>?.<span class="hljs-keyword">loc</span>) // undefined<br>console.<span class="hljs-built_in">log</span>(object?.<span class="hljs-keyword">lat</span>?.<span class="hljs-keyword">loc</span> ?? <span class="hljs-string">&#x27;默认值&#x27;</span>) // 默认值<br></code></pre></td></tr></table></figure><h3 id="自己封装函数实现"><a href="#自己封装函数实现" class="headerlink" title="自己封装函数实现"></a>自己封装函数实现</h3><p>reduce的参数有点多，如果不是很了解，可以<a href="https://aotu.io/notes/2016/04/14/js-reduce/index.html">康康这里</a></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const getObjectValue = <span class="hljs-function">(<span class="hljs-params">object, key</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> key.<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>).<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">pre, current</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">typeof</span> pre === <span class="hljs-string">&#x27;undefined&#x27;</span> || pre === <span class="hljs-literal">null</span>) ? pre : pre[current];<br>    &#125;, object)<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getObjectValue(object, <span class="hljs-string">&#x27;user.loc.lat&#x27;</span>)) <span class="hljs-comment">// 50</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getObjectValue(object, <span class="hljs-string">&#x27;user.loc.lat2&#x27;</span>)) <span class="hljs-comment">// undefined</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(getObjectValue(object, <span class="hljs-string">&#x27;user.loc2.lat&#x27;</span>))<span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><h3 id="拓展题，检查对象是否为空"><a href="#拓展题，检查对象是否为空" class="headerlink" title="拓展题，检查对象是否为空"></a>拓展题，检查对象是否为空</h3><p>一般来说，我们都是直接<code>if(!x)&#123;&#125;</code>来判断对象是否为空，那么是否有正规的方法呢？</p><blockquote><p>判断一个变量是否为空对象时，可以通过for…in语句遍历变量的属性，然后调用hasOwnProperty()函数，判断是否有自身存在的属性，如果存在则不为空对象，如果不存在自身的属性（不包括继承的属性），那么变量为空对象。</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> is<span class="hljs-constructor">Empty(<span class="hljs-params">obj</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>        <span class="hljs-keyword">if</span> (obj.has<span class="hljs-constructor">OwnProperty(<span class="hljs-params">key</span>)</span>) &#123;<br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    return <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css最强布局方案-grid</title>
    <link href="/2020/08/26/css%E6%9C%80%E5%BC%BA%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88-grid/"/>
    <url>/2020/08/26/css%E6%9C%80%E5%BC%BA%E5%B8%83%E5%B1%80%E6%96%B9%E6%A1%88-grid/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>flex</code>已经强大到足够实现很多种布局方案了，为什么又出来一个新的布局方案<code>grid</code>呢?<br>一个新的技术的出现必然是为了解决现有技术的不足之处的。<br>与flex的一纬布局不同，grid布局是一个二维布局系统，也就意味着它可以同时处理列和行。</p><h3 id="通过一个示例来窥探grid的神奇之处"><a href="#通过一个示例来窥探grid的神奇之处" class="headerlink" title="通过一个示例来窥探grid的神奇之处"></a>通过一个示例来窥探grid的神奇之处</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="layout.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px">实现这样一个经典布局</div></center><p>grid有着更加语义化的属性，可以让我们像搭积木一样进行的网页布局。<br>grid的还有一个特性就是grid可以让我们的布局与html语义结构解耦出来，不用根据html所定义的结构顺序来渲染。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">body &#123;<br>    font-weight: <span class="hljs-number">900</span>;<br>    color: #ffffff;<br>&#125;<br><br>.wrapper &#123;<br>    width: <span class="hljs-number">100</span>vw;<br>    height: <span class="hljs-number">100</span>vh;<br>    display: grid;<br>    grid-template-columns: <span class="hljs-number">200</span>px <span class="hljs-built_in">auto</span>; <span class="hljs-comment">// 定义每一列的列宽</span><br>    grid-template-rows: <span class="hljs-number">60</span>px <span class="hljs-built_in">auto</span> <span class="hljs-number">60</span>px; <span class="hljs-comment">// 定义每一行的行高</span><br>    grid-template-areas:<br>        <span class="hljs-string">&quot;header header header&quot;</span><br>        <span class="hljs-string">&quot;menu content content&quot;</span><br>        <span class="hljs-string">&quot;footer footer footer&quot;</span>;<br>&#125;<br><br>.header,<br>.footer &#123;<br>    background: #<span class="hljs-number">5</span>b5b8e;<br>&#125;<br><br>.header &#123;<br>    grid-area: header;<br>&#125;<br><br>.footer &#123;<br>    grid-area: footer;<br>&#125;<br><br>.menu &#123;<br>    background: #<span class="hljs-number">66</span>cc99;<br>    grid-area: menu;<br>&#125;<br><br>.content &#123;<br>    background: #f9cc6e;<br>    grid-area: content;<br>&#125;<br><br><br>&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">wrapper</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">header</span>&quot;&gt;<span class="hljs-symbol">HEADER</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">menu</span>&quot;&gt;<span class="hljs-symbol">MENU</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">content</span>&quot;&gt;<span class="hljs-symbol">CONTENT</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">footer</span>&quot;&gt;<span class="hljs-symbol">FOOTER</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><p><a href="https://xypecho.github.io/test/grid/demo1.html">点此看demo</a></p><h3 id="grid的一些属性"><a href="#grid的一些属性" class="headerlink" title="grid的一些属性"></a>grid的一些属性</h3><p>grid布局相关的属性以及值远比flex多，需要好好的厘清一下。</p><h4 id="display-grid-和-inline-grid"><a href="#display-grid-和-inline-grid" class="headerlink" title="display:grid 和 inline-grid"></a>display:grid 和 inline-grid</h4><p>给父元素加上grid或者inline-grid属性即可创建一个网格容器。<br>一个是块级一个是行内元素，一张图就能明白。</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="display-1.png"></center><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="display-2.png"></center><h4 id="grid-template-columns-和-grid-template-rows"><a href="#grid-template-columns-和-grid-template-rows" class="headerlink" title="grid-template-columns 和 grid-template-rows"></a>grid-template-columns 和 grid-template-rows</h4><p>同样是应用在父级的属性，grid-template-columns设置列宽，grid-template-rows设置行高，<strong>这两个属性在grid布局中尤为重要</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">.<span class="hljs-keyword">wrapper</span> &#123;<br>    display: grid;<br>    <span class="hljs-comment">/*  声明了三列，宽度分别为 200px 200px 200px */</span><br>    grid-<span class="hljs-keyword">template</span>-<span class="hljs-keyword">columns</span>: <span class="hljs-number">200</span>px <span class="hljs-number">200</span>px <span class="hljs-number">200</span>px;<br>    <span class="hljs-comment">/* 行与列之间的间距 */</span><br>    grid-gap: <span class="hljs-number">5</span>px;<br>    <span class="hljs-comment">/*  声明了一行，行高为 50px */</span><br>    grid-<span class="hljs-keyword">template</span>-<span class="hljs-keyword">rows</span>: <span class="hljs-number">50</span>px;<br>&#125;<br><br>&lt;div <span class="hljs-keyword">class</span>=&quot;wrapper&quot;&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;item one&quot;&gt;<span class="hljs-number">1</span>&lt;/div&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;item two&quot;&gt;<span class="hljs-number">2</span>&lt;/div&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;item three&quot;&gt;<span class="hljs-number">3</span>&lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="grid-template-columns.png"></center><h5 id="repeat函数"><a href="#repeat函数" class="headerlink" title="repeat函数"></a>repeat函数</h5><p>三列的话200px要写三次，如果更多呢？<br>我们可以使用<strong>repeat() 函数</strong>简化重复的值，该函数接受两个参数，第一个参数是重复的次数，第二个参数是所要重复的值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">// 上面的css可以简写为<br><span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-built_in">repeat</span>(<span class="hljs-number">3</span>, <span class="hljs-number">200px</span>);<br></code></pre></td></tr></table></figure><h5 id="auto-fill关键字"><a href="#auto-fill关键字" class="headerlink" title="auto-fill关键字"></a>auto-fill关键字</h5><p><strong>auto-fill</strong>：表示自动填充，让一行（或者一列）中尽可能的容纳更多的单元格。grid-template-columns: repeat(auto-fill, 200px) 表示列宽是 200 px，但列的数量是不固定的，只要浏览器能够容纳得下，就可以放置元素，代码以及效果如下图所示：</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="auto-fill.gif"></center><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">.<span class="hljs-keyword">wrapper</span> &#123;<br>    display: grid;<br>    grid-<span class="hljs-keyword">template</span>-<span class="hljs-keyword">columns</span>: repeat(auto-fill, <span class="hljs-number">200</span>px);<br>    grid-gap: <span class="hljs-number">5</span>px;<br>    <span class="hljs-comment">/* 设置隐式创建子元素高度，隐式创建即没有具体声明的列数 */</span><br>    grid-auto-<span class="hljs-keyword">rows</span>: <span class="hljs-number">50</span>px;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="fr关键字"><a href="#fr关键字" class="headerlink" title="fr关键字"></a>fr关键字</h5><p>grid中的长度单位，和vw，vh类似，<strong>1fr单位代表网格容器中可用空间的一等份</strong>。</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="fr.gif"></center><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">.wrapper &#123;<br>    display: grid;<br>    <span class="hljs-comment">// 表示第一个列宽设置为 200px，后面剩余的宽度分为两部分，宽度分别为剩余宽度的 1/3 和 2/3。</span><br>    grid-template-columns: <span class="hljs-number">200</span>px <span class="hljs-number">1f</span>r <span class="hljs-number">2f</span>r;<br>    grid-gap: <span class="hljs-number">5</span>px;<br>    grid-template-rows: <span class="hljs-number">50</span>px;<br>&#125;<br><br>&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">wrapper</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">one</span>&quot;&gt;<span class="hljs-symbol">1</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">two</span>&quot;&gt;<span class="hljs-symbol">2</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">three</span>&quot;&gt;<span class="hljs-symbol">3</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="minmax-函数"><a href="#minmax-函数" class="headerlink" title="minmax()函数"></a>minmax()函数</h5><p><strong>minmax()函数包含两个参数，最小值 和 最大值，表示长度就在这个范围之中都可以应用到网格项目中。</strong>概念有点晦涩难懂蛤，那就直接上代码。</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="minmax.gif"></center><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">.<span class="hljs-keyword">wrapper</span> &#123;<br>    display: grid;<br>    // 第三个列宽最少也是要<span class="hljs-number">200</span>px，但是最大不能大于第一第二列宽的两倍<br>    grid-<span class="hljs-keyword">template</span>-<span class="hljs-keyword">columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr minmax(<span class="hljs-number">200</span>px, <span class="hljs-number">2</span>fr);<br>    grid-gap: <span class="hljs-number">5</span>px;<br>    grid-<span class="hljs-keyword">template</span>-<span class="hljs-keyword">rows</span>: <span class="hljs-number">50</span>px;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="auto-关键字"><a href="#auto-关键字" class="headerlink" title="auto 关键字"></a>auto 关键字</h5><p>和<code>flex：1</code>一样的效果，由浏览器决定长度。</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="auto.gif"></center><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">.<span class="hljs-keyword">wrapper</span> &#123;<br>    display: grid;<br>    // 表示第一第三列为<span class="hljs-number">200</span>px，中间由浏览器决定长度<br>    grid-<span class="hljs-keyword">template</span>-<span class="hljs-keyword">columns</span>: <span class="hljs-number">200</span>px auto <span class="hljs-number">200</span>px;<br>    grid-<span class="hljs-keyword">template</span>-<span class="hljs-keyword">rows</span>: <span class="hljs-number">50</span>px;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="grid-row-gap-属性、grid-column-gap-属性以及-grid-gap-属性"><a href="#grid-row-gap-属性、grid-column-gap-属性以及-grid-gap-属性" class="headerlink" title="grid-row-gap 属性、grid-column-gap 属性以及 grid-gap 属性"></a>grid-row-gap 属性、grid-column-gap 属性以及 grid-gap 属性</h4><p><code>grid-row-gap</code>属性、<code>grid-column-gap</code>属性分别设置行间距和列间距。<code>grid-gap</code> 属性是两者的简写形式。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">grid-row</span>-<span class="hljs-attribute">gap</span>: <span class="hljs-number">10px</span>;<br><span class="hljs-attribute">grid-column</span>-<span class="hljs-attribute">gap</span>: <span class="hljs-number">20px</span>;<br><br><span class="hljs-comment">// 可以简写为：</span><br><span class="hljs-attribute">grid-gap</span>: <span class="hljs-number">10px</span> <span class="hljs-number">20px</span>;<br></code></pre></td></tr></table></figure><h4 id="grid-template-areas-属性"><a href="#grid-template-areas-属性" class="headerlink" title="grid-template-areas 属性"></a>grid-template-areas 属性</h4><p>一个布局样式，<code>grid-template-areas</code> 属性用于定义区域，一个区域由一个或者多个单元格组成</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-id">#page</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-comment">// 因为是两列，所有&quot;head head&quot;不能简写为&quot;head&quot;</span><br>    <span class="hljs-attribute">grid-template-areas</span>: <span class="hljs-string">&quot;head head&quot;</span> <span class="hljs-string">&quot;nav  main&quot;</span> <span class="hljs-string">&quot;nav  foot&quot;</span>;<br>    <span class="hljs-comment">// 区域划分 当前为 三行 两列</span><br>    <span class="hljs-attribute">grid-template-rows</span>: <span class="hljs-number">50px</span> <span class="hljs-number">1</span>fr <span class="hljs-number">30px</span>;<br>    <span class="hljs-comment">// 各区域 宽高设置</span><br>    <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">150px</span> <span class="hljs-number">1</span>fr;<br>&#125;<br>#page&gt;<span class="hljs-selector-tag">header</span> &#123;<br>    <span class="hljs-attribute">grid-area</span>: head;<br>    <span class="hljs-comment">// 指定当前元素所在的区域位置, 从grid-template-areas选取值</span><br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#8ca0ff</span>;<br>&#125;<br><br>#page&gt;<span class="hljs-selector-tag">nav</span> &#123;<br>    <span class="hljs-attribute">grid-area</span>: nav;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffa08c</span>;<br>&#125;<br><br>#page&gt;<span class="hljs-selector-tag">main</span> &#123;<br>    <span class="hljs-attribute">grid-area</span>: main;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffff64</span>;<br>&#125;<br><br>#page&gt;<span class="hljs-selector-tag">footer</span> &#123;<br>    <span class="hljs-attribute">grid-area</span>: foot;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#8cffa0</span>;<br>&#125;<br>&lt;<span class="hljs-selector-tag">section</span> id=<span class="hljs-string">&quot;page&quot;</span>&gt;<br>    &lt;header&gt;Header&lt;/header&gt;<br>    &lt;nav&gt;Navigation&lt;/nav&gt;<br>    &lt;main&gt;Main area&lt;/main&gt;<br>    &lt;footer&gt;Footer&lt;/footer&gt;<br>&lt;/section&gt;<br></code></pre></td></tr></table></figure><p><a href="https://xypecho.github.io/test/grid/demo3.html">演示地址</a></p><h4 id="grid-auto-flow-属性"><a href="#grid-auto-flow-属性" class="headerlink" title="grid-auto-flow 属性"></a>grid-auto-flow 属性</h4><p><code>grid-auto-flow</code> 属性控制着自动布局算法怎样运作，精确指定在网格中被自动布局的元素怎样排列。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行。</p><p>理解起来复杂，直接<a href="https://xypecho.github.io/test/grid/demo4.html">戳这边看演示demo</a></p><h4 id="justify-items-属性、align-items-属性以及-place-items-属性"><a href="#justify-items-属性、align-items-属性以及-place-items-属性" class="headerlink" title="justify-items 属性、align-items 属性以及 place-items 属性"></a>justify-items 属性、align-items 属性以及 place-items 属性</h4><p><code>justify-items</code> 属性设置单元格内容的水平位置（左中右），<code>align-items</code> 属性设置单元格的垂直位置（上中下），<code>place-items</code> 是align-items和justify-items的简写属性。</p><p>同样<a href="https://xypecho.github.io/test/grid/demo5.html">戳这边看演示demo</a></p><h4 id="justify-content-属性、align-content-属性以及-place-content-属性"><a href="#justify-content-属性、align-content-属性以及-place-content-属性" class="headerlink" title="justify-content 属性、align-content 属性以及 place-content 属性"></a>justify-content 属性、align-content 属性以及 place-content 属性</h4><p><code>*-content</code> 属性是整个内容区域在容器里面的位置，效果同flex不再过多介绍。</p><h4 id="grid-auto-columns-属性和-grid-auto-rows-属性"><a href="#grid-auto-columns-属性和-grid-auto-rows-属性" class="headerlink" title="grid-auto-columns 属性和 grid-auto-rows 属性"></a>grid-auto-columns 属性和 grid-auto-rows 属性</h4><p><code>grid-auto-columns</code>和<code>grid-auto-rows</code>是作用于隐式网格的两个属性。</p><p>先来看看隐式和显式网格的概念，显式网格包含了你在 grid-template-columns 和 grid-template-rows 属性中定义的行和列。如果你在网格定义之外又放了一些东西，或者因为内容的数量而需要的更多网格轨道的时候，网格将会在隐式网格中创建行和列。</p><p>如果不给隐式网格设置<code>grid-auto-columns</code>和<code>grid-auto-rows</code>属性，则浏览器会根据单元格内容的大小，自行决定网格的列宽和行高</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">.wrapper &#123;<br>    display: grid;<br>    <span class="hljs-comment">// 只设置了两行，但实际的数量会超出两行，超出的行高会以grid-auto-rows和grid-auto-columns属性值为准</span><br>    grid-template-columns: <span class="hljs-number">100</span>px <span class="hljs-number">100</span>px;<br>    grid-template-rows: <span class="hljs-number">100</span>px <span class="hljs-number">100</span>px;<br>    grid-gap: <span class="hljs-number">50</span>px;<br>    grid-<span class="hljs-built_in">auto</span>-columns: <span class="hljs-number">50</span>px;<br>    grid-<span class="hljs-built_in">auto</span>-rows: <span class="hljs-number">50</span>px;<br>&#125;<br><br>&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">wrapper</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">one</span>&quot;&gt;<span class="hljs-symbol">1</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">two</span>&quot;&gt;<span class="hljs-symbol">2</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">three</span>&quot;&gt;<span class="hljs-symbol">3</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">four</span>&quot;&gt;<span class="hljs-symbol">3</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">five</span>&quot;&gt;<span class="hljs-symbol">3</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">six</span>&quot;&gt;<span class="hljs-symbol">3</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="grid-auto-rows.png"></center><h3 id="grid子元素的一些属性"><a href="#grid子元素的一些属性" class="headerlink" title="grid子元素的一些属性"></a>grid子元素的一些属性</h3><h4 id="grid-column-start、grid-column-end、grid-row-start-以及grid-row-end"><a href="#grid-column-start、grid-column-end、grid-row-start-以及grid-row-end" class="headerlink" title="grid-column-start、grid-column-end、grid-row-start 以及grid-row-end"></a>grid-column-start、grid-column-end、grid-row-start 以及grid-row-end</h4><p>可以指定网格项目所在的四个边框，分别定位在哪根网格线，从而指定项目的位置</p><ul><li>grid-column-start 属性：左边框所在的垂直网格线</li><li>grid-column-end 属性：右边框所在的垂直网格线</li><li>grid-row-start 属性：上边框所在的水平网格线</li><li>grid-row-end 属性：下边框所在的水平网格线</li></ul><p>上代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">.<span class="hljs-keyword">wrapper</span> &#123;<br>    display: grid;<br>    grid-<span class="hljs-keyword">template</span>-<span class="hljs-keyword">columns</span>: repeat(<span class="hljs-number">3</span>, <span class="hljs-number">100</span>px);<br>    grid-<span class="hljs-keyword">template</span>-<span class="hljs-keyword">rows</span>: repeat(<span class="hljs-number">3</span>, <span class="hljs-number">100</span>px);<br>    background-color: #cccccc;<br>&#125;<br><br>.two &#123;<br>    grid-<span class="hljs-keyword">column</span>-<span class="hljs-keyword">start</span>: <span class="hljs-number">2</span>;<br>    grid-<span class="hljs-keyword">column</span>-<span class="hljs-keyword">end</span>: <span class="hljs-number">4</span>;<br>    // 上面两个属性可以写为grid-<span class="hljs-keyword">column</span>-<span class="hljs-keyword">start</span>: span <span class="hljs-number">2</span>; 或者 grid-<span class="hljs-keyword">column</span>-<span class="hljs-keyword">end</span>: span <span class="hljs-number">2</span>;<br>&#125;<br><br>&lt;div <span class="hljs-keyword">class</span>=&quot;wrapper&quot;&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;item one&quot;&gt;<span class="hljs-number">1</span>&lt;/div&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;item two&quot;&gt;<span class="hljs-number">2</span>&lt;/div&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;item three&quot;&gt;<span class="hljs-number">3</span>&lt;/div&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;item four&quot;&gt;<span class="hljs-number">4</span>&lt;/div&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;item five&quot;&gt;<span class="hljs-number">5</span>&lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="grid-column-start.png"></center><p>grid-column-start的一个demo</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">.three &#123;<br>    grid-column-start: <span class="hljs-number">1</span>;<br>    grid-column-end: <span class="hljs-number">3</span>;<br>&#125;<br><br>&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">wrapper</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">one</span>&quot;&gt;<span class="hljs-symbol">1</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">two</span>&quot;&gt;<span class="hljs-symbol">2</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">item</span> <span class="hljs-symbol">three</span>&quot;&gt;<span class="hljs-symbol">3</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="grid-column-start2.png"></center><p>grid-row-start的一个demo</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">.<span class="hljs-keyword">wrapper</span> &#123;<br>    display: grid;<br>    grid-<span class="hljs-keyword">template</span>-<span class="hljs-keyword">columns</span>: repeat(<span class="hljs-number">2</span>, <span class="hljs-number">100</span>px);<br>    grid-<span class="hljs-keyword">template</span>-<span class="hljs-keyword">rows</span>: repeat(<span class="hljs-number">2</span>, <span class="hljs-number">100</span>px);<br>    background-color: #cccccc;<br>    margin-left: <span class="hljs-number">100</span>px;<br>&#125;<br><br>.one &#123;<br>    grid-<span class="hljs-keyword">row</span>-<span class="hljs-keyword">start</span>: <span class="hljs-number">1</span>;<br>    grid-<span class="hljs-keyword">row</span>-<span class="hljs-keyword">end</span>: <span class="hljs-number">3</span>;<br>    // 上面两个属性同样可以简写为grid-<span class="hljs-keyword">row</span>-<span class="hljs-keyword">start</span>: span <span class="hljs-number">2</span>;或者grid-<span class="hljs-keyword">row</span>-<span class="hljs-keyword">end</span>: span <span class="hljs-number">2</span>;<br>&#125;<br><br>&lt;div <span class="hljs-keyword">class</span>=&quot;wrapper&quot;&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;item one&quot;&gt;<span class="hljs-number">1</span>&lt;/div&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;item two&quot;&gt;<span class="hljs-number">2</span>&lt;/div&gt;<br>    &lt;div <span class="hljs-keyword">class</span>=&quot;item three&quot;&gt;<span class="hljs-number">3</span>&lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="grid-row-start.png"></center><h4 id="justify-self-、align-self-以及-place-self"><a href="#justify-self-、align-self-以及-place-self" class="headerlink" title="justify-self 、align-self 以及 place-self"></a>justify-self 、align-self 以及 place-self</h4><p><code>justify-self</code>属性设置单元格内容的水平位置（左中右），跟 justify-items 属性的用法完全一致，但只作用于单个项目<br><code>align-self</code>属性设置单元格内容的垂直位置（上中下），跟align-items属性的用法完全一致，也是只作用于单个项目<br><code>place-self</code>则是<code>align-self</code>和<code>justify-self</code>的简写</p><p><a href="https://xypecho.github.io/test/grid/demo2.html">点此处看演示demo</a></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://juejin.cn/post/6854573220306255880">最强大的 CSS 布局 —— Grid 布局</a><br><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文字超出显示省略号最全攻略</title>
    <link href="/2020/08/05/%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7%E6%9C%80%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <url>/2020/08/05/%E6%96%87%E5%AD%97%E8%B6%85%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7%E6%9C%80%E5%85%A8%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="单行文本溢出省略"><a href="#单行文本溢出省略" class="headerlink" title="单行文本溢出省略"></a>单行文本溢出省略</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">overflow</span>: hidden;<br><span class="hljs-attribute">text-overflow</span>: ellipsis;<br><span class="hljs-attribute">white-space</span>: nowrap;<br></code></pre></td></tr></table></figure><p>优点：</p><ol><li>无兼容问题</li><li>响应式截断</li><li>文本溢出范围才显示省略号，否则不显示省略号</li></ol><p>缺点：</p><ol><li>只支持单行文本截断</li></ol><p>适用场景：</p><ol><li>适用于单行文本溢出显示省略号的情况</li></ol><h3 id="多行文本溢出省略"><a href="#多行文本溢出省略" class="headerlink" title="多行文本溢出省略"></a>多行文本溢出省略</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">-webkit-line-clamp: <span class="hljs-number">2</span>;<br><span class="hljs-comment">/* （用来限制在一个块元素显示的文本的行数,2表示最多显示2行。 为了实现该效果，它需要组合其他的WebKit属性） */</span><br><span class="hljs-attribute">display</span>: -webkit-box;<br><span class="hljs-comment">/* （和1结合使用，将对象作为弹性伸缩盒子模型显示 ） */</span><br>-webkit-box-orient: vertical;<br><span class="hljs-comment">/* （和1结合使用 ，设置或检索伸缩盒对象的子元素的排列方式 ） */</span><br><span class="hljs-attribute">overflow</span>: hidden;<br><span class="hljs-comment">/* （文本溢出限定的宽度就隐藏内容） */</span><br><span class="hljs-attribute">text-overflow</span>: ellipsis;<br><span class="hljs-comment">/* （多行文本的情况下，用省略号“…”隐藏溢出范围的文本) */</span><br></code></pre></td></tr></table></figure><p>查看<a href="https://xypecho.github.io/test/ellipsis/demo1.html">示例</a></p><p>优点：</p><ol><li>响应式截断</li><li>文本溢出范围才显示省略号，否则不显示省略号</li></ol><p>缺点：</p><ol><li>兼容性一般： -webkit-line-clamp 属性只有 WebKit 内核的浏览器才支持</li></ol><p>适用场景：</p><ol><li>多适用于移动端页面，因为移动设备浏览器更多是基于 WebKit 内核</li></ol><h3 id="flex布局下超出显示省略号"><a href="#flex布局下超出显示省略号" class="headerlink" title="flex布局下超出显示省略号"></a>flex布局下超出显示省略号</h3><h4 id="方案1：min-width-0"><a href="#方案1：min-width-0" class="headerlink" title="方案1：min-width: 0"></a>方案1：min-width: 0</h4><p>页面布局</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">father</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">son</span>&quot;&gt;<span class="hljs-symbol">1</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">son</span>&quot;&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">text</span>&quot;&gt;<br>            这里是你想要超过长度显示省略号的一段文字这里是你想要超过长度显示省略号的一段文字这里是你想要超过长度显示省略号的一段文字<br>        &lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;/<span class="hljs-symbol">div</span>&gt;<br>    &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">son</span>&quot;&gt;<span class="hljs-symbol">3</span>&lt;/<span class="hljs-symbol">div</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><p>css样式</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.father</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: row;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.son</span> &#123;<br>    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: row;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">align-items</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.son</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-attribute">min-width</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.text</span> &#123;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">text-overflow</span>: ellipsis;<br>    <span class="hljs-attribute">white-space</span>: nowrap;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css实现帧动画</title>
    <link href="/2020/07/07/css%E5%AE%9E%E7%8E%B0%E5%B8%A7%E5%8A%A8%E7%94%BB/"/>
    <url>/2020/07/07/css%E5%AE%9E%E7%8E%B0%E5%B8%A7%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<p>一般项目里面需要用的类似gif动效的地方，我都是让ui直接切好图片给我的，要是他们知道可以用css实现会不会打死我(逃…</p><p>话不多说，先上个<a href="https://xypecho.github.io/test/css3Demo/animation.html">demo</a>，这两个动画都是纯css实现的哦，甚至没有js的参与，是不是如丝滑般流畅…</p><p>下面我们来分析一下如何实现css帧动画</p><ol><li><p>巧妇难为无米之炊，我们需要类似这张的<a href="https://xypecho.github.io/test/css3Demo/guide.png">素材</a>，当然还是需要ui小姐姐帮忙了</p></li><li><p>让他动起来的原理，利用 keyframes，修改背景图的 background-position</p></li></ol><p><strong>以手机滑动的那个demo为栗子</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&quot;animation2&quot;</span>&gt;&lt;/div&gt;<br><br><span class="hljs-selector-class">.animation2</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">280px</span>; <span class="hljs-comment">// 这个宽度一般是素材里面单个元素的宽度</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">340px</span>; <span class="hljs-comment">// 素材的高度，例如本素材尺寸为 13440 * 340，则这边高度为340</span><br>    <span class="hljs-attribute">background-image</span>: url(<span class="hljs-string">&#x27;./guide.png&#x27;</span>);<br>    <span class="hljs-attribute">background-size</span>: auto <span class="hljs-number">340px</span>; <span class="hljs-comment">// 背景图宽度自适应，高度为素材高度</span><br>    <span class="hljs-attribute">animation</span>: swiper <span class="hljs-number">1s</span> steps(<span class="hljs-number">48</span>, start) <span class="hljs-number">0ms</span> infinite normal backwards;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">42px</span>;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> swiper &#123;<br>    <span class="hljs-number">0%</span> &#123;<br>        <span class="hljs-attribute">background-position</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-number">100%</span> &#123;<br>        <span class="hljs-attribute">background-position</span>: -<span class="hljs-number">13440px</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 从图片负边移动实现动画效果</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分别说一下animation各属性的涵义</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">animation</span>: swiper <span class="hljs-number">1s</span> <span class="hljs-built_in">steps</span>(<span class="hljs-number">48</span>, start) <span class="hljs-number">0ms</span> infinite normal backwards;<br><br><span class="hljs-attribute">animation-name</span>: swiper; <span class="hljs-comment">/* keyframes动画的名称 */</span><br><span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">1s</span>; <span class="hljs-comment">/* 动画持续时间 1s */</span><br><span class="hljs-attribute">animation-timing-function</span>: <span class="hljs-built_in">steps</span>(<span class="hljs-number">48</span>, start); <span class="hljs-comment">/* 动画函数，分48步执行，每一帧显示帧结束时的状态，此处写48是因为素材里面的完整动作就是分为48个小png */</span><br><span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">0ms</span>; <span class="hljs-comment">/* 延迟多长时间后开始执行动画 */</span><br><span class="hljs-attribute">animation-iteration-count</span>: infinite; <span class="hljs-comment">/* 动画执行无限次 */</span><br><span class="hljs-attribute">animation-direction</span>: normal; <span class="hljs-comment">/* 是否应该轮流反向播放动画 normal/alternate */</span><br><span class="hljs-attribute">animation-fill-mode</span>: backwards; <span class="hljs-comment">/* 会在向元素应用动画样式时迅速应用动画的初始帧 */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闲聊下毕业工作四年的时光</title>
    <link href="/2020/06/27/%E9%97%B2%E8%81%8A%E4%B8%8B%E6%AF%95%E4%B8%9A%E5%B7%A5%E4%BD%9C%E5%9B%9B%E5%B9%B4%E7%9A%84%E6%97%B6%E5%85%89/"/>
    <url>/2020/06/27/%E9%97%B2%E8%81%8A%E4%B8%8B%E6%AF%95%E4%B8%9A%E5%B7%A5%E4%BD%9C%E5%9B%9B%E5%B9%B4%E7%9A%84%E6%97%B6%E5%85%89/</url>
    
    <content type="html"><![CDATA[<p>生日还没过，算是 26 岁吧，不过越来越在意年龄了，或许老了吧，笑。</p><blockquote><p>2012年进入大学，2016年毕业。回忆毕业后的这四年，经历了各种各样的事情，以前看跨不去的坎，现在回顾也不过如此。</p></blockquote><h3 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">2016.7</span> <span class="hljs-bullet">-</span> <span class="hljs-number">2017.2</span><br><br><span class="hljs-string">这段时间应该是刚毕业时的混沌时期，空有抱负却又无一技之长只能从事门槛较低的销售工作，不过也有了很多不一样的经历。</span><br><span class="hljs-string">去豪森面试，第一次坐5个多小时硬座的火车到连云港；在苏州住青旅，认识了好多新朋友听到了很多新奇有趣的故事；</span><br><br><span class="hljs-number">2017.2</span><span class="hljs-number">.21</span> <span class="hljs-bullet">-</span> <span class="hljs-number">2017.8</span><br><br><span class="hljs-string">毕业后做的最重大的一个决策了，转行！</span><br><span class="hljs-number">2015</span><span class="hljs-string">年大三在上海实习时其实就已经开始琢磨转行了，当年的双十一还买了本书《head</span> <span class="hljs-string">first</span> <span class="hljs-string">java》打算自学转行当Java开发，不过当前没能坚持下去，如果当时能够多坚持一会儿说不定就...</span><br><span class="hljs-string">苏州干将西路288号的人才市场对于我来说，可真是有特殊的意义，做销售的那段时间每周六我都会去转转，转行的契机发生在2月份某天的周六，在人才市场随意转悠的时候看到一家公司招聘&#x27;程序员&#x27;，是的，你没看错，没有写具体的职能也没有具体的岗位描述。当时在犹豫要不要培训转行的我立马被这个职位吸引了，于是一翻面试(屁嘞，其实就是问了下工作经历和教育经历其他啥也没问)后成功入职，开启了转行之路。</span><br><br><span class="hljs-number">2017.8</span> <span class="hljs-bullet">-</span> <span class="hljs-number">2020.3</span><br><br><span class="hljs-string">在老家新手村升级打怪的一段经历。</span><br><span class="hljs-string">相比优秀的同龄人，我这升级可太慢了啊，用了4年才实现了我毕业时立下的&#x27;毕业3年月入过万&#x27;的flag，如果能够早点出新手村，如果当时在苏州多找一段时间工作或许就可以升级快一点了，不过时间线也许就会走向另一个方向了，也许就不会有上家公司那一年的愉快的工作经历了。</span><br><br><span class="hljs-number">2020.3</span> <span class="hljs-bullet">-</span> <span class="hljs-string">至今</span><br><br><span class="hljs-string">解锁了新场景:南京。来到了南京，工资得到了小幅增长，与之增长的还有消费欲望。前几天的618花光了这个月的工资，哈哈哈，贼爽。</span><br><span class="hljs-string">这篇文章就是在新租的房子里面写的，此时有种和当年苏州周末一个人无所事事的不知道干嘛一样感觉。还会一样吗？应该不会的吧？会吗？不造...</span><br></code></pre></td></tr></table></figure><h3 id="现况-amp-感情状况"><a href="#现况-amp-感情状况" class="headerlink" title="现况&amp;感情状况"></a>现况&amp;感情状况</h3><p>2020突如其来的疫情差点让跳槽变成翻车，不过一周的海投&amp;面试总归找到了新工作。不过2020还是成功的让我的计划泡汤了，本来准备今年出去旅游转转。</p><p>刚毕业的两年，工资巅峰时期也才3500，大学时曾由于经济上的拮据让妹子有了不好的体验，所以3500的我根本不敢找对象啊同时也拒绝了家里安排的相亲(其实是因为丑，经济条件又差)。</p><p>第三年工资有了大幅增长，在当地也属于中高收入人群了。两点一线的生活也接触不到更多的妹子，于是也不再拒绝相亲，终于…经历了6次的相亲…现在依然是单身…(讲道理，第二个相亲的妹子就就很中意，然而妹子个子比我高…)</p><p><del>今年和前三年不一样的是，感情上有了点波澜</del>也仅仅是波澜而已…(我哭了，你们呢)。朋友介绍了妹子，约了两次后，由于我的直男式聊天给聊崩了…(哭晕在厕所)</p><h3 id="一点点小感悟"><a href="#一点点小感悟" class="headerlink" title="一点点小感悟"></a>一点点小感悟</h3><p>工作多年后总是时不时的有种韭菜的感觉，每天上班下班，一直持续到退休or猝死下线。真的好想好想裸辞然后和女朋友出去玩个两三个月啊，然而现实是:裸辞是不敢裸辞的，不打工就没钱用了，女朋友也是不存在的，难受😣。</p><p>每天下班的学习还是要恢复的，不能因为加班就松懈了学习不然就没有了下次跳槽的资本了。</p><p>‘一个有理想有希望的人是不会害怕孤独的 并且他可以在这张孤独中提升自我 他耐得住寂寞 所以他们容易成功’，独处时不要放飞自我，嗯…我前几天一时兴起把电脑里面的小黄片全删了，然后我就研究了好久的数据恢复(微笑脸)。</p><h3 id="未来三年内的一些期望"><a href="#未来三年内的一些期望" class="headerlink" title="未来三年内的一些期望"></a>未来三年内的一些期望</h3><ol><li><pre><code class="工资达到15k~~~这也太没追求了吧，20k吧"></code></pre></li><li><p>其实我本来想在这写买房的，可是看了好多人的房奴生活又退却了…嗯，这边就写找到一个相对稳定的工作吧，能工作3-5年的那种</p></li><li><p>裸辞&amp;出去玩两三个月，不然年纪越大羁绊越多更没机会了</p></li><li><p>脱单…嗯…是的你没看错</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序常用操作</title>
    <link href="/2020/05/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/05/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="setData操作优化"><a href="#setData操作优化" class="headerlink" title="setData操作优化"></a>setData操作优化</h3><h4 id="避免列表数据全局刷新、局部更新单条数据"><a href="#避免列表数据全局刷新、局部更新单条数据" class="headerlink" title="避免列表数据全局刷新、局部更新单条数据"></a>避免列表数据全局刷新、局部更新单条数据</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.setData(&#123;<br>  <span class="hljs-string">&#x27;ceng.show&#x27;</span>: <span class="hljs-literal">false</span><br>&#125;)<br><br><span class="hljs-keyword">this</span>.setData(&#123;<br>  [<span class="hljs-string">&#x27;people[&#x27;</span> + index + <span class="hljs-string">&#x27;].age&#x27;</span>]: <span class="hljs-number">25</span><br>&#125;)<br><br><span class="hljs-comment">// 也可以写成这样</span><br><span class="hljs-keyword">this</span>.setData(&#123;<br>  [`people[$&#123;index&#125;].age`]: <span class="hljs-number">25</span><br>&#125;)<br><br><span class="hljs-comment">// 动态设置变量，filed为动态设置的变量</span><br><span class="hljs-keyword">this</span>.setData(&#123;<br>  [filed]: <span class="hljs-number">25</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="下拉加载更多避免直接使用concat或者push等方法"><a href="#下拉加载更多避免直接使用concat或者push等方法" class="headerlink" title="下拉加载更多避免直接使用concat或者push等方法"></a>下拉加载更多避免直接使用concat或者push等方法</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 核心思想是使用二维数组的方式去存储列表，不过这样渲染时就需要渲染两层了</span><br>wx.request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;test.php&#x27;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        let <span class="hljs-built_in">Length</span> = this.data.arr.<span class="hljs-built_in">length</span>;<br>        that.setData(&#123;<br>            [<span class="hljs-string">`arr<span class="hljs-subst">$&#123;<span class="hljs-built_in">Length</span>&#125;</span>`</span>]: res.data <span class="hljs-comment">// res.data 每一页请求过来的数据</span><br>        &#125;)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="主包体积优化"><a href="#主包体积优化" class="headerlink" title="主包体积优化"></a>主包体积优化</h3><h4 id="剔除不必要的打包文件"><a href="#剔除不必要的打包文件" class="headerlink" title="剔除不必要的打包文件"></a>剔除不必要的打包文件</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html">packOptions配置项文档</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 写在project.config.json文件里面<br><br><span class="hljs-string">&quot;packOptions&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;ignore&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;file&quot;</span>,<br>      <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;package-lock.json&quot;</span><br>    &#125;<br>  ]<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="组件内使用全局样式"><a href="#组件内使用全局样式" class="headerlink" title="组件内使用全局样式"></a>组件内使用全局样式</h3><h4 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h4><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">Component</span>(&#123;</span><br><span class="hljs-function">  <span class="hljs-variable">options</span>: &#123;</span><br><span class="hljs-function">    <span class="hljs-variable">addGlobalClass</span>: <span class="hljs-variable"><span class="hljs-literal">true</span></span></span><br><span class="hljs-function">  &#125;</span><br><span class="hljs-function">&#125;)</span><br></code></pre></td></tr></table></figure><h4 id="如果只想使用全局的某个class"><a href="#如果只想使用全局的某个class" class="headerlink" title="如果只想使用全局的某个class"></a>如果只想使用全局的某个class</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/wxml-wxss.html">具体描述可以查看文档</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">app.js 文件<br><br>.text-blue &#123;<br>  color: blue;<br>&#125;<br><br>组件内<br><br>&lt;<span class="hljs-keyword">view</span> <span class="hljs-keyword">class</span>=&quot;~text-blue&quot;&gt;&lt;/<span class="hljs-keyword">view</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="实现1px边框"><a href="#实现1px边框" class="headerlink" title="实现1px边框"></a>实现1px边框</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.border-b</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">1px</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#e3e5e9</span>;<br>    -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0.5</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0.5</span>);<br>    -webkit-<span class="hljs-attribute">transform-origin</span>: center bottom;<br>    <span class="hljs-attribute">transform-origin</span>: center bottom;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小程序登录逻辑"><a href="#小程序登录逻辑" class="headerlink" title="小程序登录逻辑"></a>小程序登录逻辑</h3><ol><li>调用wx.getUserProfile获取用户头像、昵称等信息</li><li>调用wx.login获取登录凭证（code）</li><li>请求我们的后端，我们后端把 appid , appsecret 和 code 一起发送到微信服务器换取 openid</li><li>我们在自己的数据库中，查找 openid ，如果没有查到记录，说明该用户没有注册执行注册逻辑，如果有记录，则用自行维护的登录态判断token是否失效</li></ol><p>参考资料：<br><a href="https://aotu.io/notes/2020/03/25/high-performance-miniprogram/index.html">如何打造高性能小程序门户</a><br><a href="https://www.cnblogs.com/xuhuang/p/10606499.html">小程序如何避免setData的列表数据过大</a><br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/open-ability/login.html">小程序登录流程</a><br><a href="https://zhuanlan.zhihu.com/p/116506244">登录流程2</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序性能优化</title>
    <link href="/2020/05/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2020/05/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>我们先来看看小程序官方性能指标，小程序官方针对小程序性能表现制订了权威的数值指标，主要围绕 渲染表现、setData 数据量、元素节点数 和 网络请求延时 这几个维度来给予定义（下面只列出部分关键指标）：</p><ol><li>首屏时间不超过 5 秒；</li><li>渲染时间不超过 500ms；</li><li>每秒调用 setData 的次数不超过 20 次；</li><li>setData 的数据在 JSON.stringify 后不超过 256kb；</li><li>页面 WXML 节点少于 1000 个，节点树深度少于 30 层，子节点数不大于 60 个；</li><li>所有网络请求都在 1 秒内返回结果；</li></ol><h3 id="1、渲染优化"><a href="#1、渲染优化" class="headerlink" title="1、渲染优化"></a>1、渲染优化</h3><h4 id="1-1-setData操作优化"><a href="#1-1-setData操作优化" class="headerlink" title="1.1 setData操作优化"></a>1.1 setData操作优化</h4><h5 id="1-1-1-避免列表数据全局刷新、局部更新单条数据"><a href="#1-1-1-避免列表数据全局刷新、局部更新单条数据" class="headerlink" title="1.1.1 避免列表数据全局刷新、局部更新单条数据"></a>1.1.1 避免列表数据全局刷新、局部更新单条数据</h5><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">this</span>.setData(&#123;<br>  [<span class="hljs-string">&#x27;people[&#x27;</span> + <span class="hljs-keyword">index</span> + <span class="hljs-string">&#x27;].age&#x27;</span>]: <span class="hljs-number">25</span><br>&#125;)<br><br><span class="hljs-comment">// 也可以写成这样</span><br><span class="hljs-keyword">this</span>.setData(&#123;<br>  [`people[$&#123;<span class="hljs-keyword">index</span>&#125;].age`]: <span class="hljs-number">25</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="1-1-2-下拉加载更多避免直接使用concat或者push等方法"><a href="#1-1-2-下拉加载更多避免直接使用concat或者push等方法" class="headerlink" title="1.1.2 下拉加载更多避免直接使用concat或者push等方法"></a>1.1.2 下拉加载更多避免直接使用concat或者push等方法</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 核心思想是使用二维数组的方式去存储列表，不过这样渲染时就需要渲染两层了</span><br>wx.request(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;test.php&#x27;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        let <span class="hljs-built_in">Length</span> = this.data.arr.<span class="hljs-built_in">length</span>;<br>        that.setData(&#123;<br>            [<span class="hljs-string">`arr<span class="hljs-subst">$&#123;<span class="hljs-built_in">Length</span>&#125;</span>`</span>]: res.data <span class="hljs-comment">// res.data 每一页请求过来的数据</span><br>        &#125;)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>参考资料：<br><a href="https://aotu.io/notes/2020/03/25/high-performance-miniprogram/index.html">如何打造高性能小程序门户</a><br><a href="https://www.cnblogs.com/xuhuang/p/10606499.html">小程序如何避免setData的列表数据过大</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript知识点记录</title>
    <link href="/2020/05/07/TypeScript%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <url>/2020/05/07/TypeScript%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1、变量定义"><a href="#1、变量定义" class="headerlink" title="1、变量定义"></a>1、变量定义</h3><p><strong>在ts中:(冒号)后面都是在声明类型，要牢记</strong></p><h4 id="1-1-定义基本数据类型"><a href="#1-1-定义基本数据类型" class="headerlink" title="1.1 定义基本数据类型"></a>1.1 定义基本数据类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">isone</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span> = <span class="hljs-number">18</span>;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;str&#x27;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">str1</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">`hello <span class="hljs-subst">$&#123;str&#125;</span>`</span>; <span class="hljs-comment">// 也支持模版字符串的写法</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">u</span>: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">n</span>: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// undefined和null是所有类型的子类型，可以赋值给任意类型，如下</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: <span class="hljs-built_in">number</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// any是任意类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">anyValue</span>: <span class="hljs-built_in">any</span> = <span class="hljs-number">8</span>;<br>anyValue = <span class="hljs-string">&quot;小王&quot;</span>;<br>anyValue = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// 联合数据类型，代表numOrString这个变量可以是数字也可以是字符串，其他类型均会报错</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">numOrString</span>: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span> = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">numOrString</span>: <span class="hljs-built_in">number</span> | <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;1&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="1-2-定义数组"><a href="#1-2-定义数组" class="headerlink" title="1.2 定义数组"></a>1.2 定义数组</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// 定义子元素全是number的数组</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;123&#x27;</span>); <span class="hljs-comment">// push其他类型元素会报错</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">arr1</span>: <span class="hljs-built_in">any</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-literal">true</span>]; <span class="hljs-comment">// 定义任意类型的数组</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">arr3</span>: [<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>] = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;321&#x27;</span>]; <span class="hljs-comment">// 定义指定子元素类型的数组，少写或者多写子元素都会报错</span><br></code></pre></td></tr></table></figure><h4 id="1-3-定义对象"><a href="#1-3-定义对象" class="headerlink" title="1.3 定义对象"></a>1.3 定义对象</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xquery">interface Person &#123;<br>   <span class="hljs-built_in"> name</span>:<span class="hljs-built_in"> string</span>;<br>    age:<span class="hljs-built_in"> number</span>;<br>&#125;<br><br>// 和上面一样，多写或者少些属性都会报错<br><span class="hljs-keyword">let</span> man: Person = &#123;<br>   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;dd&#x27;</span>,<br>    age: <span class="hljs-number">18</span><br>&#125;<br><br><br>// 如果希望属性的可选的，不一定存在的使用?即可，这样即使缺少age属性也不会报错<br>interface Person &#123;<br>   <span class="hljs-built_in"> name</span>:<span class="hljs-built_in"> string</span>;<br>    age?:<span class="hljs-built_in"> number</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> man: Person = &#123;<br>   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;dd&#x27;</span><br>&#125;<br><br><br>// 给对象增加只读属性<br>// 和const不同的地方在于：readonly用在属性上面，而const用在变量上面<br>interface Person &#123;<br>    readonly<span class="hljs-built_in"> id</span>:<span class="hljs-built_in"> number</span>;<br>   <span class="hljs-built_in"> name</span>:<span class="hljs-built_in"> string</span>;<br>    age?:<span class="hljs-built_in"> number</span>;<br>&#125;<br><br><span class="hljs-keyword">let</span> man: Person = &#123;<br>   <span class="hljs-built_in"> id</span>: <span class="hljs-number">123</span>,<br>   <span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;dd&#x27;</span>,<br>    age: <span class="hljs-number">18</span>,<br>&#125;<br><br>man<span class="hljs-built_in">.id</span> = <span class="hljs-number">123</span>; //重新赋<span class="hljs-built_in">值id</span>会报错<br></code></pre></td></tr></table></figure><h4 id="1-4-定义函数"><a href="#1-4-定义函数" class="headerlink" title="1.4 定义函数"></a>1.4 定义函数</h4><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xquery">// 第三<span class="hljs-built_in">个number</span>代表返回值的类型，这种写法参数只能是两个，少些或者多写会报错<br><span class="hljs-keyword">function</span> add(x:<span class="hljs-built_in"> number</span>, y:<span class="hljs-built_in"> number</span>):<span class="hljs-built_in"> number</span> &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-keyword">let</span> result = add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><br>// 这种写法代表，z是可选参数，可选参数必须写在最后一项，不然会报错<br><span class="hljs-keyword">function</span> add(x:<span class="hljs-built_in"> number</span>, y:<span class="hljs-built_in"> number</span>, z?:<span class="hljs-built_in"> number</span>):<span class="hljs-built_in"> number</span> &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><br>// 参数设置默认值的写法<br><span class="hljs-keyword">function</span> add(x:<span class="hljs-built_in"> number</span>, y:<span class="hljs-built_in"> number</span> = <span class="hljs-number">10</span>, z?:<span class="hljs-built_in"> number</span>):<span class="hljs-built_in"> number</span> &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><br>// 函数的多种写法<br>const add1 = <span class="hljs-keyword">function</span> (x:<span class="hljs-built_in"> number</span>, y:<span class="hljs-built_in"> number</span> = <span class="hljs-number">10</span>, z?:<span class="hljs-built_in"> number</span>):<span class="hljs-built_in"> number</span> &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br>// 将add1复制给新函数add2<br>const add2: (x:<span class="hljs-built_in"> number</span>, y:<span class="hljs-built_in"> number</span>, z?:<span class="hljs-built_in"> number</span>) =&gt;<span class="hljs-built_in"> number</span> = add1;<br></code></pre></td></tr></table></figure><h4 id="1-5-定义class"><a href="#1-5-定义class" class="headerlink" title="1.5 定义class"></a>1.5 定义class</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">// public 公共的，在类里面、子类、类外面均可以访问，不写默认为public</span><br>    <span class="hljs-comment">// private 私有的，只有在类里面可以访问，只有Animal类可以访问</span><br>    <span class="hljs-comment">// protected 在类里面、子类均可以访问，类外面无法访问</span><br>    <span class="hljs-comment">// readonly 只读，不能修改</span><br>    <span class="hljs-keyword">readonly</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-comment">// 静态属性 无需实例化即可读取</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-attr">categoies</span>: <span class="hljs-built_in">string</span>[] = [<span class="hljs-string">&#x27;animal&#x27;</span>, <span class="hljs-string">&#x27;bird&#x27;</span>];<br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">isAnimal</span>(<span class="hljs-params">a</span>) &#123;<br>        <span class="hljs-keyword">return</span> a <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Animal</span>;<br>    &#125;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>    <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> is running`</span><br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Animal</span>.<span class="hljs-property">categoies</span>);<br><span class="hljs-keyword">const</span> snake = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;呆呆&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Animal</span>.<span class="hljs-title function_">isAnimal</span>(snake));<br><br><br><span class="hljs-comment">// 继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>    <span class="hljs-title function_">bark</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span> is braking`</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> xiaohei = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&#x27;xiaohei&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xiaohei.<span class="hljs-title function_">bark</span>())<br><br><span class="hljs-comment">// 重写父类方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Animal</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-comment">// 重写父类方法必须用super调用</span><br>        <span class="hljs-variable language_">super</span>(name);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    &#125;<br>    <span class="hljs-comment">// 重写父类的run方法</span><br>    <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">`咪咪<span class="hljs-subst">$&#123;<span class="hljs-variable language_">super</span>.run()&#125;</span>`</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> maomao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&#x27;maomao&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(maomao.<span class="hljs-title function_">run</span>())<br></code></pre></td></tr></table></figure><h4 id="1-6-定义泛型函数"><a href="#1-6-定义泛型函数" class="headerlink" title="1.6 定义泛型函数"></a>1.6 定义泛型函数</h4><p>泛型函数是参数和返回值类型相同的函数。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">function <span class="hljs-title">echo</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">arg: T</span>): T</span> &#123;<br>    <span class="hljs-keyword">return</span> arg;<br>&#125;<br><br><span class="hljs-keyword">const</span> res = echo(<span class="hljs-string">&#x27;123&#x27;</span>);<br><br><span class="hljs-comment">// 两个参数时的写法</span><br><span class="hljs-function">function <span class="hljs-title">echo</span>&lt;<span class="hljs-title">T</span>, <span class="hljs-title">U</span>&gt;(<span class="hljs-params">arg: [T, U]</span>): [U, T]</span> &#123;<br>    <span class="hljs-keyword">return</span> [arg[<span class="hljs-number">1</span>], arg[<span class="hljs-number">0</span>]];<br>&#125;<br><br><span class="hljs-keyword">const</span> res = echo([<span class="hljs-string">&#x27;123&#x27;</span>, <span class="hljs-number">233</span>]);<br></code></pre></td></tr></table></figure><h4 id="1-5-定义枚举类型"><a href="#1-5-定义枚举类型" class="headerlink" title="1.5 定义枚举类型"></a>1.5 定义枚举类型</h4><p>枚举类型可以用于定义标识符，例如后端返回的字段 1代表成功 0 失败，可以不用写注释来记住。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">enum</span> flag &#123;<br>    success=<span class="hljs-number">1</span>, <br>    error = <span class="hljs-number">-1</span><br>&#125;;<br>let s: flag = flag.<span class="hljs-property">error</span>;<br>console.<span class="hljs-property">log</span>(s) <span class="hljs-comment">// -1</span><br><br><br><span class="hljs-keyword">enum</span> Color &#123;<br>    <span class="hljs-built_in">red</span>,<br>    <span class="hljs-built_in">blue</span>,<br>    <span class="hljs-built_in">green</span><br>&#125;<br>let a: Color = Color.<span class="hljs-property">blue</span>;<br>console.<span class="hljs-property">log</span>(a) <span class="hljs-comment">// 1，不赋值默认输出索引</span><br><br><span class="hljs-keyword">enum</span> Color &#123;<br>    <span class="hljs-built_in">red</span>,<br>    <span class="hljs-built_in">blue</span> = <span class="hljs-number">5</span>,<br>    <span class="hljs-built_in">green</span><br>&#125;<br>let a: Color = Color.<span class="hljs-property">green</span>;<br>console.<span class="hljs-property">log</span>(a) <span class="hljs-comment">// 6，red依然是0</span><br></code></pre></td></tr></table></figure><h4 id="1-6-定义any类型"><a href="#1-6-定义any类型" class="headerlink" title="1.6 定义any类型"></a>1.6 定义any类型</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">dom</span>: <span class="hljs-built_in">any</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#test&#x27;</span>);<br>dom.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = <span class="hljs-string">&#x27;red&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="1-7-定义void类型"><a href="#1-7-定义void类型" class="headerlink" title="1.7 定义void类型"></a>1.7 定义void类型</h4><p>用于定义没有返回值的函数</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">run</span>(): void &#123;<br>    console<span class="hljs-selector-class">.log</span>(&#x27;run&#x27;)<br>&#125;<br><span class="hljs-built_in">run</span>();<br></code></pre></td></tr></table></figure><h4 id="定义特殊类型变量"><a href="#定义特殊类型变量" class="headerlink" title="定义特殊类型变量"></a>定义特殊类型变量</h4><p>关于宿主环境里的类型，TypeScript 全部都给我们提供了，我们可以直接在代码中书写：Window 是 window 的类型，HTMLElement 是 dom 元素类型，NodeList 是节点列表类型，MouseEvent 是鼠标点击事件的类型……<br><a href="https://ts.xcatliu.com/basics/built-in-objects.html">查看更多类型</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">w</span>:<span class="hljs-title class_">Window</span> = <span class="hljs-variable language_">window</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">ele</span>:<span class="hljs-title class_">HTMLElement</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br><span class="hljs-keyword">let</span> <span class="hljs-attr">allDiv</span>: <span class="hljs-title class_">NodeList</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br><br>ele.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e:MouseEvent</span>)&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-attr">args</span>:<span class="hljs-title class_">IArguments</span> = <span class="hljs-variable language_">arguments</span><br>    w.<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args)<br>&#125;,<span class="hljs-literal">false</span>)<br><br><br> <span class="hljs-keyword">import</span> &#123; ref , <span class="hljs-title class_">Ref</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Todo</span>&#123; <br>     <span class="hljs-attr">title</span>:<span class="hljs-built_in">string</span>,<br>      <span class="hljs-attr">done</span>:<span class="hljs-built_in">boolean</span><br> &#125;<br> <span class="hljs-keyword">let</span> <span class="hljs-attr">todos</span>:<span class="hljs-title class_">Ref</span> = <span class="hljs-title function_">ref</span>([&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;学习Vue&#x27;</span>,<span class="hljs-attr">done</span>:<span class="hljs-literal">false</span>&#125;])<br><br></code></pre></td></tr></table></figure><h4 id="extends-继承"><a href="#extends-继承" class="headerlink" title="extends 继承"></a>extends 继承</h4><p>user对象不加age属性会报错:Property ‘age’ is missing in type ‘{ name: string; }’ but required in type ‘User’</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">interface Name &#123;<br>  name: <span class="hljs-keyword">string</span><br>&#125;<br>interface <span class="hljs-keyword">User</span> <span class="hljs-title">extends</span> Name &#123;<br>  age: <span class="hljs-keyword">number</span><br>&#125;<br>const user: <span class="hljs-keyword">User</span> <span class="hljs-title">= &#123;</span><br><span class="hljs-title">  name</span>: <span class="hljs-string">&quot;sda&quot;</span>,<br>  age: <span class="hljs-number">213</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="interface-和-type-有什么区别"><a href="#interface-和-type-有什么区别" class="headerlink" title="interface 和 type 有什么区别"></a>interface 和 type 有什么区别</h4><p><strong>相同点</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">// 都可以用来描述函数或者对象<br>interface <span class="hljs-keyword">User</span> <span class="hljs-title">&#123;</span><br><span class="hljs-title">  name</span>: <span class="hljs-keyword">string</span><br>  age: <span class="hljs-keyword">number</span><br>&#125;<br><br>interface SetUser &#123;<br>  (name: <span class="hljs-keyword">string</span>, age: <span class="hljs-keyword">number</span>): void<br>&#125;<br><br><br><span class="hljs-keyword">type</span> <span class="hljs-keyword">User</span> <span class="hljs-title">= &#123;</span><br><span class="hljs-title">  name</span>: <span class="hljs-keyword">string</span><br>  age: <span class="hljs-keyword">number</span><br>&#125;;<br><br><span class="hljs-keyword">type</span> SetUser = (name: <span class="hljs-keyword">string</span>, age: <span class="hljs-keyword">number</span>): void;<br></code></pre></td></tr></table></figure><h4 id="keyof语法"><a href="#keyof语法" class="headerlink" title="keyof语法"></a>keyof语法</h4><p><code>keyof</code> 与 <code>Object.keys</code> 略有相似，只不过 <code>keyof</code> 取 <code>interface</code>或者<code>type</code> 的键。</p><center>    <img     src="db2b5a6255e64b4aa3ae63f88c2703aa_tplv-k3u1fbpfcp-watermark.jpg"></center><p>实际应用:</p><p>假设有一个 <code>object</code> 如下所示，我们需要使用 <code>typescript</code> 实现一个 <code>get</code> 函数来获取它的属性值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">const</span> <span class="hljs-keyword">data</span> = &#123;<br>  a: <span class="hljs-number">3</span>,<br>  hello: <span class="hljs-string">&quot;world&quot;</span>,<br>&#125;<br><br>function <span class="hljs-keyword">get</span>(o: <span class="hljs-keyword">object</span>, name: string) &#123;<br>  <span class="hljs-keyword">return</span> o[name]<br>&#125;<br></code></pre></td></tr></table></figure><p>我们刚开始可能会这么写，不过它有很多缺点</p><ol><li>无法确认返回类型：这将损失 ts 最大的类型校验功能</li><li>无法对 key 做约束：可能会犯拼写错误的问题</li></ol><p>这时可以使用 <code>keyof</code> 来加强 <code>get</code> 函数的类型功能。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 代码解读</span><br><span class="hljs-comment">// T extends object，入参T必须为object 类型</span><br><span class="hljs-comment">// K extends keyof T，限制K的类型必须是T的属性之一</span><br>function get&lt;<span class="hljs-type">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-class"><span class="hljs-keyword">object</span>, <span class="hljs-title">K</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">keyof</span> <span class="hljs-title">T&gt;</span>(<span class="hljs-params">o: <span class="hljs-type">T</span>, name: <span class="hljs-type">K</span></span>)</span>: <span class="hljs-type">T</span>[<span class="hljs-type">K</span>] &#123;<br>  <span class="hljs-keyword">return</span> o[name]<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://github.com/type-challenges/type-challenges/blob/main/README.zh-CN.md">学习资料</a></p>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公务员备考攻略</title>
    <link href="/2020/04/24/%E5%85%AC%E5%8A%A1%E5%91%98%E5%A4%87%E8%80%83%E6%94%BB%E7%95%A5/"/>
    <url>/2020/04/24/%E5%85%AC%E5%8A%A1%E5%91%98%E5%A4%87%E8%80%83%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="考试时间"><a href="#考试时间" class="headerlink" title="考试时间"></a>考试时间</h2><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="TIM图片20200424195724.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px">[数据来源:华图官网](http://www.huatu.com/guojia/)</div></center><h2 id="考试流程"><a href="#考试流程" class="headerlink" title="考试流程"></a>考试流程</h2><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="lslc.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px">[考试流程详解](http://www.huatu.com/z/gkkslc/)</div></center><p><a href="http://www.gjgwy.net/szrd/zyzx/268500.html">报名全部流程</a></p><h2 id="考试内容"><a href="#考试内容" class="headerlink" title="考试内容"></a>考试内容</h2><p>科目 | 题型 | 题目数量 | 考试时间 | 总分<br>:- | :-<br>行政职业能力测验 | 单项选择题 | 130个左右的选择题 | 120分钟 | 100分<br>申论 | 阅读理解 | 3个阅读理解，1个大作文 | 180分钟 | 100分</p><h2 id="题型解析"><a href="#题型解析" class="headerlink" title="题型解析"></a>题型解析</h2><h3 id="行政职业能力测验"><a href="#行政职业能力测验" class="headerlink" title="行政职业能力测验"></a>行政职业能力测验</h3><p>行测包括十个部分，130道题，120分钟，分别为</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ada">  <span class="hljs-number">1</span>. 数量关系<span class="hljs-comment">--数学运算</span><br>  <span class="hljs-number">2</span>. 言语理解与表达<span class="hljs-comment">--逻辑填空</span><br>  <span class="hljs-number">3</span>. 言语理解与表达<span class="hljs-comment">--语句表达</span><br>  <span class="hljs-number">4</span>. 言语理解与表达<span class="hljs-comment">--阅读理解</span><br>  <span class="hljs-number">5</span>. 判断推理<span class="hljs-comment">--逻辑判断</span><br>  <span class="hljs-number">6</span>. 判断推理<span class="hljs-comment">--图形推理</span><br>  <span class="hljs-number">7</span>. 判断推理<span class="hljs-comment">--定义判断</span><br>  <span class="hljs-number">8</span>. 判断推理<span class="hljs-comment">--类比推理</span><br>  <span class="hljs-number">9</span>. 资料分析<br>  <span class="hljs-number">10</span>. 常识判断<br></code></pre></td></tr></table></figure><h3 id="申论"><a href="#申论" class="headerlink" title="申论"></a>申论</h3><p>申论一共有5个题型，分别为</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 概括归纳题（从材料中提炼出一些要素，再加以概括。如：问题、原因、影响）<br><span class="hljs-bullet">2.</span> 综合分析题（将题干中给定的词语/句子/观点等放入原文，深入理解、分析，并将分析的内容进行整合、梳理逻辑）<br><span class="hljs-bullet">3.</span> 提出建议题（针对材料中的问题，提出解决措施）<br><span class="hljs-bullet">4.</span> 贯彻执行题（涉及到一些特定的文种，包括应用文、公文，即用指定的文种形式，根据题干要求对材料做出提炼整合或其他处理）<br><span class="hljs-bullet">5.</span> 申发论述题（即通常所说的大作文，申论中主要考察议论文）<br></code></pre></td></tr></table></figure><h2 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h2><h3 id="贴吧攻略"><a href="#贴吧攻略" class="headerlink" title="贴吧攻略"></a>贴吧攻略</h3><p><a href="https://tieba.baidu.com/p/5995995816?pn=1">各模块的备考方法</a></p><h3 id="知乎收集的一些攻略"><a href="#知乎收集的一些攻略" class="headerlink" title="知乎收集的一些攻略"></a>知乎收集的一些攻略</h3><p><a href="https://www.zhihu.com/question/28345057/answer/41074035">如何更有效地准备公务员考试？</a></p><p><a href="https://www.zhihu.com/question/28345057/answer/267088186">如何更有效地准备公务员考试？</a></p><p><a href="https://www.zhihu.com/question/297357354">公务员考试国考和省考怎么准备？</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript中判断数据类型的几种方法</title>
    <link href="/2020/03/11/JavaScript%E4%B8%AD%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2020/03/11/JavaScript%E4%B8%AD%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1. typeof"></a>1. typeof</h3><h4 id="1-1-用法"><a href="#1-1-用法" class="headerlink" title="1.1 用法"></a>1.1 用法</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">typeof</span> <span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-comment">// string</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span> <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">function</span> <span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-comment">// function</span><br></code></pre></td></tr></table></figure><h4 id="1-1-缺陷"><a href="#1-1-缺陷" class="headerlink" title="1.1 缺陷"></a>1.1 缺陷</h4><p>判断数组，对象，null都返回object</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">typeof</span> [] <span class="hljs-comment">// object</span><br><span class="hljs-keyword">typeof</span> &#123;&#125; <span class="hljs-comment">// object</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span> <span class="hljs-comment">// object</span><br></code></pre></td></tr></table></figure><h3 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2. instanceof"></a>2. instanceof</h3><h4 id="2-1-用法"><a href="#2-1-用法" class="headerlink" title="2.1 用法"></a>2.1 用法</h4><p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br>obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="2-1-缺陷"><a href="#2-1-缺陷" class="headerlink" title="2.1 缺陷"></a>2.1 缺陷</h4><p>可以区分引用类型，但是无法区分基本数据类型</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">num</span> instanceof Number <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>instanceof判断数组时结果失真，所以应该先判断数组类型，然后再去判断对象类型。如果先判断对象，那么数组值也会被判断为对象类型，这无法满足要求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>);  <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> b = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;kingx&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>);  <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="3-constructor（判断构造函数）"><a href="#3-constructor（判断构造函数）" class="headerlink" title="3. constructor（判断构造函数）"></a>3. constructor（判断构造函数）</h3><blockquote><p>判断一个变量是否是数组或者对象，从另一个层面讲，就是判断变量的构造函数是Array类型还是Object类型。因为一个对象的实例都是通过构造函数生成的，所以，我们可以直接判断一个变量的constructor属性。</p></blockquote><h4 id="3-1-用法"><a href="#3-1-用法" class="headerlink" title="3.1 用法"></a>3.1 用法</h4><p>constructor 在其对应对象的原型下面，是自动生成的。</p><p>当我们写一个构造函数的时候，程序会自动添加：构造函数名.prototype.constructor &#x3D; 构造函数名</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">var</span> arr = <span class="hljs-string">&#x27;123&#x27;</span>;<br>arr.<span class="hljs-keyword">constructor</span> === <span class="hljs-keyword">String</span> <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>arr.<span class="hljs-keyword">constructor</span> === <span class="hljs-keyword">Array</span> <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">var</span> obj = <span class="hljs-comment">&#123;&#125;</span>;<br>obj.<span class="hljs-keyword">constructor</span> == <span class="hljs-keyword">Object</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="3-1-缺陷"><a href="#3-1-缺陷" class="headerlink" title="3.1 缺陷"></a>3.1 缺陷</h4><p>不能判断undefined和null的类型，因为null和undefined是无效的对象，因此是不会有constructor存在的</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = <span class="hljs-literal">undefined</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.constructor === <span class="hljs-literal">Undefined</span>) <span class="hljs-comment">// Cannot read property &#x27;constructor&#x27; of undefined</span><br><br><span class="hljs-keyword">var</span> obj = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.constructor === <span class="hljs-literal">Null</span>) <span class="hljs-comment">// Cannot read property &#x27;constructor&#x27; of undefined</span><br></code></pre></td></tr></table></figure><h3 id="4-toString"><a href="#4-toString" class="headerlink" title="4. toString()"></a>4. toString()</h3><h4 id="4-1-用法"><a href="#4-1-用法" class="headerlink" title="4.1 用法"></a>4.1 用法</h4><p>可以检测出所有的类型</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf">var <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Object</span>.prototype.<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(<span class="hljs-built_in">str</span>)); <span class="hljs-comment">//[object String]</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Object</span>.prototype.<span class="hljs-built_in">toString</span>.<span class="hljs-built_in">call</span>(<span class="hljs-built_in">str</span>) === <span class="hljs-string">&#x27;[object String]&#x27;</span>);  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="4-1-缺陷"><a href="#4-1-缺陷" class="headerlink" title="4.1 缺陷"></a>4.1 缺陷</h4><p>IE6下，undefined和null均为Object</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><table><thead><tr><th align="left">方法</th><th align="left">用法</th><th align="left">缺陷</th></tr></thead><tbody><tr><td align="left">typeof</td><td align="left">typeof ‘123’ &#x2F;&#x2F; string</td><td align="left">数组、对象、null都返回object</td></tr><tr><td align="left">instanceof</td><td align="left">[1, 2, 3] instanceof Array &#x2F;&#x2F; true</td><td align="left">无法用来判断基本数据类型；[] instanceof Object同样返回true</td></tr><tr><td align="left">constructor</td><td align="left">[].constructor &#x3D;&#x3D;&#x3D; Array &#x2F;&#x2F; true</td><td align="left">无法判断undefined和null</td></tr><tr><td align="left">toString</td><td align="left">Object.prototype.toString.call({}) &#x3D;&#x3D;&#x3D; ‘[object Object]’</td><td align="left">无，可以检测所有类型</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组里面的那些遍历方法</title>
    <link href="/2020/02/28/%E6%95%B0%E7%BB%84%E9%87%8C%E9%9D%A2%E7%9A%84%E9%82%A3%E4%BA%9B%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/"/>
    <url>/2020/02/28/%E6%95%B0%E7%BB%84%E9%87%8C%E9%9D%A2%E7%9A%84%E9%82%A3%E4%BA%9B%E9%81%8D%E5%8E%86%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>面试时经常被问到，记录一下数组的所有遍历方法(持续更新中…)</p><p>截止目前(2020年2月28日)，数组的遍历方法共15个：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">ES5：<br>    <span class="hljs-keyword">for</span>、forEach、every 、some、 <span class="hljs-built_in">filter</span>、<span class="hljs-keyword">map</span>、reduce、reduceRight、<span class="hljs-keyword">for</span>...in<br>ES6：<br>    <span class="hljs-keyword">find</span>、findIndex、<span class="hljs-built_in">keys</span>、<span class="hljs-built_in">values</span>、entries、<span class="hljs-keyword">for</span>...of<br></code></pre></td></tr></table></figure><h3 id="经典遍历方法"><a href="#经典遍历方法" class="headerlink" title="经典遍历方法"></a>经典遍历方法</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> something<br>&#125;<br><br><span class="hljs-regexp">//</span> 优化版写法<br><span class="hljs-regexp">//</span> 使用临时变量，将长度缓存起来，避免重复获取数组长度<br><span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>, len = arr.length; i &lt; len; i++) &#123;<br>    <span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> something<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>针对每一个元素执行提供的函数。会修改原来的数组，不会返回执行结果</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs smali">let arr = [1, 2, 3]<br>arr.forEach((currentValue, index, array) =&gt; &#123;<br>    // currentValue 当前元素<br>    // index 索引<br>    //<span class="hljs-built_in"> array </span>正在操作的数组<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="every"><a href="#every" class="headerlink" title="every"></a>every</h4><p>测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值</p><p>ps:<strong>若收到一个空数组，此方法在一切情况下都会返回 true</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.every(<span class="hljs-function">(<span class="hljs-params">currentValue, index, <span class="hljs-built_in">array</span></span>) =&gt;</span> currentValue &gt; <span class="hljs-number">1</span>)) <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.every(<span class="hljs-function">(<span class="hljs-params">currentValue, index, <span class="hljs-built_in">array</span></span>) =&gt;</span> currentValue &gt; <span class="hljs-number">0</span>)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="some"><a href="#some" class="headerlink" title="some"></a>some</h4><p>测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回一个布尔值</p><p>ps:<strong>若收到一个空数组，此方法在一切情况下都会返回 false</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.some(<span class="hljs-function">(<span class="hljs-params">currentValue, index, <span class="hljs-built_in">array</span></span>) =&gt;</span> currentValue &gt; <span class="hljs-number">1</span>)) <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.some(<span class="hljs-function">(<span class="hljs-params">currentValue, index, <span class="hljs-built_in">array</span></span>) =&gt;</span> currentValue &gt; <span class="hljs-number">4</span>)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>创建一个新数组, 返回通过所提供函数实现的测试的所有元素</p><p>ps:<strong>如果数组中没有元素符合函数测试条件，则返回空数组</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.filte(<span class="hljs-function">(<span class="hljs-params">currentValue, index, <span class="hljs-built_in">array</span></span>) =&gt;</span> currentValue &gt; <span class="hljs-number">4</span>)) <span class="hljs-comment">// []</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">filter</span>(<span class="hljs-function">(<span class="hljs-params">currentValue, index, <span class="hljs-built_in">array</span></span>) =&gt;</span> currentValue &gt; <span class="hljs-number">1</span>)) <span class="hljs-comment">// [2, 3]</span><br></code></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">map</span>(<span class="hljs-function">(<span class="hljs-params">currentValue, index, <span class="hljs-built_in">array</span></span>) =&gt;</span> currentValue * <span class="hljs-number">2</span>)) <span class="hljs-comment">// [2, 4, 6]</span><br></code></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>let res = arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">acc, cur, idx, src</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// Accumulator (acc) (累计器)，它是上一次调用回调时返回的累积值，如果没有return值则为undefined</span><br>    <span class="hljs-comment">// Current Value (cur) (当前值)</span><br>    <span class="hljs-comment">// Current Index (idx) (当前索引)</span><br>    <span class="hljs-comment">// Source Array (src) (源数组)</span><br>    <span class="hljs-keyword">return</span> acc + cur<br>&#125;)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res) <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><h4 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h4><p>与reduce基本相同，唯一的区别就是：reduceRight是从右向左遍历</p><h4 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h4><p>遍历数组循环出key</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key) <span class="hljs-comment">// 0 1 2</span><br>&#125;<br><br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;呆呆&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">17</span>, <span class="hljs-attr">job</span>: <span class="hljs-string">&#x27;coder&#x27;</span> &#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="es6后新增遍历方法"><a href="#es6后新增遍历方法" class="headerlink" title="es6后新增遍历方法"></a>es6后新增遍历方法</h3><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>返回数组中满足提供的测试函数的第一个元素的值</p><p>ps:<strong>如果数组中没有元素符合函数测试条件，则返回undefined</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">find</span>(<span class="hljs-function">(<span class="hljs-params">currentValue, index, <span class="hljs-built_in">array</span></span>) =&gt;</span> currentValue &gt; <span class="hljs-number">0</span>)) <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">find</span>(<span class="hljs-function">(<span class="hljs-params">currentValue, index, <span class="hljs-built_in">array</span></span>) =&gt;</span> currentValue &gt; <span class="hljs-number">10</span>)) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h4><p>返回数组中满足提供的测试函数的第一个元素的索引</p><p>ps:<strong>如果数组中没有元素符合函数测试条件，则返回-1</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.findIndex(<span class="hljs-function">(<span class="hljs-params">currentValue, index, <span class="hljs-built_in">array</span></span>) =&gt;</span> currentValue &gt; <span class="hljs-number">20</span>)) <span class="hljs-comment">// -1</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.findIndex(<span class="hljs-function">(<span class="hljs-params">currentValue, index, <span class="hljs-built_in">array</span></span>) =&gt;</span> currentValue &gt; <span class="hljs-number">0</span>)) <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><p>返回一个由一个给定对象的自身可枚举属性组成的数组</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>console.<span class="hljs-built_in">log</span>(Object.<span class="hljs-built_in">keys</span>(arr)) // [<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>]<br><br><span class="hljs-keyword">let</span> arr = &#123; name: <span class="hljs-string">&#x27;呆呆&#x27;</span>, age: <span class="hljs-number">17</span>, job: <span class="hljs-string">&#x27;coder&#x27;</span> &#125;<br>console.<span class="hljs-built_in">log</span>(Object.<span class="hljs-built_in">keys</span>(arr)) //  [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;job&quot;</span>]<br></code></pre></td></tr></table></figure><h4 id="values"><a href="#values" class="headerlink" title="values"></a>values</h4><p>返回一个给定对象自身的所有可枚举属性值的数组</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>console.log(<span class="hljs-keyword">Object</span>.<span class="hljs-keyword">values</span>(arr)) // [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br>let arr1 = &#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;呆呆&#x27;</span>, age: <span class="hljs-number">17</span>, job: <span class="hljs-string">&#x27;coder&#x27;</span> &#125;<br>console.log(<span class="hljs-keyword">Object</span>.<span class="hljs-keyword">values</span>(arr1)) //  [&quot;呆呆&quot;, <span class="hljs-number">17</span>, &quot;coder&quot;]<br></code></pre></td></tr></table></figure><h4 id="entries"><a href="#entries" class="headerlink" title="entries"></a>entries</h4><p>返回一个给定对象自身可枚举属性的键值对数组</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>console.log(<span class="hljs-symbol">Object</span>.entries(arr)) //  [[<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-number">1</span>],[<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">2</span>],[<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">3</span>]]<br><br>let arr1 = &#123; name: <span class="hljs-string">&#x27;呆呆&#x27;</span>, age: <span class="hljs-number">17</span>, job: <span class="hljs-string">&#x27;coder&#x27;</span> &#125;<br>console.log(<span class="hljs-symbol">Object</span>.entries(arr1)) //  [[<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;呆呆&quot;</span>],[<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">17</span>],[<span class="hljs-string">&quot;job&quot;</span>, <span class="hljs-string">&quot;coder&quot;</span>]]<br></code></pre></td></tr></table></figure><h4 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h4><p>遍历数组循环出value</p><p>ps:<strong>for…of不能循环普通的对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> iterator <span class="hljs-keyword">of</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(iterator) <span class="hljs-comment">// 1 2 3</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>*是否修改原数组是指：在该方法的遍历中做操作，是否会影响原数组<br>*ps：此处的原数组值均为基本数据类型即数字、字符串数组<br>*pps：对象数组会修改里面的内容<br>*ppps：Object对象的真实数据存储在堆内存中，它在栈内存中存储的是变量名和堆内存的位置。 在循环方法里操作的obj对象，实际操作的是该对象在堆内存的地址，由于是对该地址所在的对象进行字段值修改，所以数组里的obj对象相应改变。</p><table><thead><tr><th align="left">方法</th><th align="left">是否修改原数组</th><th align="left">是否有返回值</th><th align="left">返回值内容</th><th align="left">是否可以跳出循环</th></tr></thead><tbody><tr><td align="left">for</td><td align="left">是</td><td align="left">否</td><td align="left">无</td><td align="left">break可跳出</td></tr><tr><td align="left">forEach</td><td align="left">否</td><td align="left">否</td><td align="left">无</td><td align="left">否</td></tr><tr><td align="left">every</td><td align="left">否</td><td align="left">是</td><td align="left">Boolean</td><td align="left">否</td></tr><tr><td align="left">some</td><td align="left">否</td><td align="left">是</td><td align="left">Boolean</td><td align="left">否</td></tr><tr><td align="left">filter</td><td align="left">否</td><td align="left">是</td><td align="left">Array（没有符合的过滤条件返回空数组）</td><td align="left">否</td></tr><tr><td align="left">map</td><td align="left">否</td><td align="left">是</td><td align="left">Array（需要手动return，否则返回内容是undefined）</td><td align="left">否</td></tr><tr><td align="left">reduce</td><td align="left">否</td><td align="left">是</td><td align="left">Any</td><td align="left">否</td></tr><tr><td align="left">reduceRight</td><td align="left">否</td><td align="left">是</td><td align="left">Any</td><td align="left">否</td></tr><tr><td align="left">for…in</td><td align="left">否</td><td align="left">否</td><td align="left">无</td><td align="left">break可跳出</td></tr><tr><td align="left">find</td><td align="left">否</td><td align="left">是</td><td align="left">找到则返回值，否则返回undefined</td><td align="left">否</td></tr><tr><td align="left">findIndex</td><td align="left">否</td><td align="left">是</td><td align="left">Number</td><td align="left">否</td></tr><tr><td align="left">keys</td><td align="left">否</td><td align="left">是</td><td align="left">Array</td><td align="left">否</td></tr><tr><td align="left">values</td><td align="left">否</td><td align="left">是</td><td align="left">Array</td><td align="left">否</td></tr><tr><td align="left">entries</td><td align="left">否</td><td align="left">是</td><td align="left">Array</td><td align="left">否</td></tr><tr><td align="left">for…of</td><td align="left">否</td><td align="left">否</td><td align="left">无</td><td align="left">break可跳出</td></tr></tbody></table><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>&#x2F;&#x2F; 单纯地遍历<br>Array.prototype.forEach</p><p>&#x2F;&#x2F; 检测数组中是否有元素符合条件<br>Array.prototype.some</p><p>&#x2F;&#x2F; 检测数组中是否所有元素符合条件<br>Array.prototype.every</p><p>&#x2F;&#x2F; 用来将一个列表转换成另一个等长的列表<br>Array.prototype.map</p><p>&#x2F;&#x2F; 用来将一个列表转换成一个值<br>Array.prototype.reduce</p><p>&#x2F;&#x2F; 从列表中找出符合条件的一个元素<br>Array.prototype.find</p><p>&#x2F;&#x2F; 从列表中找出符合条件的若干元素<br>Array.prototype.filter</p><p>&#x2F;&#x2F; 拍平列表<br>Array.prototype.flat</p><p>&#x2F;&#x2F; map 和 flat 的结合，适合用来将一个列表转换成另一个不等长的列表<br>Array.prototype.flatMap</p><h3 id="哪些会修改原数组"><a href="#哪些会修改原数组" class="headerlink" title="哪些会修改原数组"></a>哪些会修改原数组</h3><p>改变数组自身内容的方法有7个：push、pop、shift、unshift、splice、sort和reverse</p><p>不会改变原数组的有：concat、join、slice、map、filter、forEach、some、every、reduce</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">更多api使用</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apply、call、bind的用法以及区别</title>
    <link href="/2020/02/27/apply%E3%80%81call%E3%80%81bind%E7%9A%84%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/02/27/apply%E3%80%81call%E3%80%81bind%E7%9A%84%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>通过call()函数或者apply()函数可以改变函数执行的主体，使得某些不具有特定函数的对象可以直接调用该特定函数。</p></blockquote><p>先看一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;呆呆&#x27;</span>, age = <span class="hljs-number">17</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;校长&#x27;</span>,<br>    <span class="hljs-attr">objage</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>,<br>    <span class="hljs-attr">speak</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;年龄&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">objage</span>); <span class="hljs-comment">// 17</span><br>obj.<span class="hljs-title function_">speak</span>() <span class="hljs-comment">// 校长年龄undefined</span><br>obj.<span class="hljs-property">speak</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">window</span>) <span class="hljs-comment">// 呆呆年龄17</span><br>obj.<span class="hljs-property">speak</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">window</span>) <span class="hljs-comment">// 呆呆年龄17</span><br>obj.<span class="hljs-property">speak</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">window</span>)() <span class="hljs-comment">// 呆呆年龄17</span><br></code></pre></td></tr></table></figure><p>机智的小伙伴们是不是一下子就发现了<code>apply、call、bind</code>的用途，<strong>改变函数体内 this 的指向</strong></p><h3 id="1、-apply、call、bind的使用具体方法"><a href="#1、-apply、call、bind的使用具体方法" class="headerlink" title="1、 apply、call、bind的使用具体方法"></a>1、 apply、call、bind的使用具体方法</h3><h4 id="1-1-apply"><a href="#1-1-apply" class="headerlink" title="1.1 apply"></a>1.1 apply</h4><blockquote><p>apply 方法传入两个参数：一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;呆呆&#x27;</span>, age = <span class="hljs-number">17</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;校长&#x27;</span>,<br>    <span class="hljs-attr">objage</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>,<br>    <span class="hljs-attr">speak</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">sex, work</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;姓名&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;年龄&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;性别&#x27;</span> + sex + <span class="hljs-string">&#x27;工作&#x27;</span> + work)<br>    &#125;<br>&#125;<br>obj.<span class="hljs-property">speak</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">window</span>, [<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;程序员&#x27;</span>]) <br></code></pre></td></tr></table></figure><h4 id="1-2-call"><a href="#1-2-call" class="headerlink" title="1.2 call"></a>1.2 call</h4><blockquote><p>call 方法第一个参数也是作为函数上下文的对象，但是后面传入的是一个参数列表，而不是单个数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;呆呆&#x27;</span>, age = <span class="hljs-number">17</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;校长&#x27;</span>,<br>    <span class="hljs-attr">objage</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>,<br>    <span class="hljs-attr">speak</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">sex, work</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;姓名&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;年龄&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;性别&#x27;</span> + sex + <span class="hljs-string">&#x27;工作&#x27;</span> + work)<br>    &#125;<br>&#125;<br>obj.<span class="hljs-property">speak</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;程序员&#x27;</span>) <br></code></pre></td></tr></table></figure><h4 id="1-3-bind"><a href="#1-3-bind" class="headerlink" title="1.3 bind"></a>1.3 bind</h4><blockquote><p>bind 方法第一个参数仍然是作为函数上下文的对象，后面传入的也是一个参数列表。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;呆呆&#x27;</span>, age = <span class="hljs-number">17</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;校长&#x27;</span>,<br>    <span class="hljs-attr">objage</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>,<br>    <span class="hljs-attr">speak</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">sex, work</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;姓名&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;年龄&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;性别&#x27;</span> + sex + <span class="hljs-string">&#x27;工作&#x27;</span> + work)<br>    &#125;<br>&#125;<br>obj.<span class="hljs-property">speak</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-string">&#x27;程序员&#x27;</span>)()<br></code></pre></td></tr></table></figure><h3 id="2、-区别"><a href="#2、-区别" class="headerlink" title="2、 区别"></a>2、 区别</h3><p>1.apply第二个参数是数组，而call和bind是参数列表</p><p>2.bind 是返回对应函数，apply和call则是立即调用</p><h3 id="3、-拓展"><a href="#3、-拓展" class="headerlink" title="3、 拓展"></a>3、 拓展</h3><h3 id="3-1-定义一个-log-方法，让它可以代理-console-log-方法"><a href="#3-1-定义一个-log-方法，让它可以代理-console-log-方法" class="headerlink" title="3.1 定义一个 log 方法，让它可以代理 console.log 方法"></a>3.1 定义一个 log 方法，让它可以代理 console.log 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用apply</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">window</span>, <span class="hljs-variable language_">arguments</span>)<br>&#125;<br><br><span class="hljs-comment">// 使用call</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">window</span>, ...<span class="hljs-variable language_">arguments</span>)<br>&#125;<br><br><span class="hljs-comment">// 使用bind</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">window</span>, ...<span class="hljs-variable language_">arguments</span>)()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-手动实现bind"><a href="#3-2-手动实现bind" class="headerlink" title="3.2 手动实现bind"></a>3.2 手动实现bind</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// es6版本的实现</span><br>Function.prototype.myBind = <span class="hljs-keyword">function</span> <span class="hljs-params">(context, <span class="hljs-rest_arg">...preArgs</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (...args) =&gt; &#123;<br>        <span class="hljs-comment">// 箭头函数本身没有作用域，它的作用域即父作用域</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.call(context, ...preArgs, ...args)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span><span class="hljs-params">()</span> &#123;<br>    console.log.myBind(window, ...arguments)()<br>&#125;<br>log(<span class="hljs-number">1</span>) <span class="hljs-comment">// 1</span><br>log(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 1 2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019年终总结</title>
    <link href="/2019/12/30/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2019/12/30/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>应该是年纪大了，不知不觉总想备份下现在年轻时的记忆，想记录下现在年轻时的想法。仍然记得大学时看过一句话’青春怎么渡过都觉得是浪费’，嗯…我也不知道我在说些什么<br>———-      一段没意义的碎碎念</p></blockquote><h3 id="1、2019年的一些收获"><a href="#1、2019年的一些收获" class="headerlink" title="1、2019年的一些收获"></a>1、2019年的一些收获</h3><p>1、 工资达到了当地的中上水平 <code>(可是还是没有实现我毕业3年月入过万的小目标啊，摔)</code><br>2、 积蓄比之前多了些许，开始学习理财了 <code>(其实就是买买支付宝的定期和基金...)</code><br>3、 有了攒钱规划意识<code>(开始强制每个月存工资的百分之80，今年本来打算换手机的也没舍得，就买了二手的小米6然后双十一给我妈买了ipad mini5看剧，不过小米6可是一代神机哦)</code><br>4、 技术上学会了使用react，并且用react写了一个后台管理系统<br>5、 断断续续骑了大半年自行车上下班and去了近一年的健身房<code>(话说这算收获吗?emmm...)</code></p><h3 id="2、-2019年的一些失败"><a href="#2、-2019年的一些失败" class="headerlink" title="2、 2019年的一些失败"></a>2、 2019年的一些失败</h3><p>1、 仍然单身，今年一年相亲了近8、9次都失败了…<code>(主观意愿上是不敢找对象，担心开销变大攒不到钱，穷怕了.....😭)</code><br>2、 技术长进变慢了很多，公司没有大佬无法在实战中获得新知识，都是平常下班自学进度很慢</p><h3 id="3、-2020年的展望"><a href="#3、-2020年的展望" class="headerlink" title="3、 2020年的展望"></a>3、 2020年的展望</h3><p>对于2020第一反应就是<strong>全面建成小康社会</strong>…其实按照国家规定的贫困线，能看到这篇文章或者能日常上网的都不算贫困了。  </p><p>不过对于个人来说，有房有车才能算脱贫啊。说到买房，前几天看到知乎<a href="https://www.zhihu.com/question/305583541">年底被车企裁员，房贷还不起怎么办？</a>这个问题下的回答看焦虑了。</p><p>很担心我40+时被裁然后身上有房贷还有其他生活消费要怎么办，突然间又不敢买房了(说得像现在买得起一样…)</p><p>之前打算<code>好好学习，努力工作买房买车然后找个普通的不漂亮也不丑的女人过一辈子</code>的韭菜心态变了，我并不想让自己到那样的地步…而且程序员的职业生涯有那么短…</p><p>o(︶︿︶)o 唉…还要过好当下把。</p><p>2020定几个小目标</p><ol><li>月入过12k</li><li>一次说走就走的旅行<code>(很想去日本看看，不过很怕语言不通啊)</code></li><li>继续执行每月存工资的百分之80的规划<code>(不知道跳槽到其他城市的话，加上房租有没有可能存百分之80...)</code></li></ol><p>暂时就这么多了哈… 2020，我准备好了</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现列表可拖动排序</title>
    <link href="/2019/12/23/%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E5%8F%AF%E6%8B%96%E5%8A%A8%E6%8E%92%E5%BA%8F/"/>
    <url>/2019/12/23/%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E5%8F%AF%E6%8B%96%E5%8A%A8%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>之前写项目时实现过自定义拖拽幻灯片里面的图片(<a href="https://xypecho.github.io/test/code/drag.js">代码片段</a>)，最近在学单元测试，里面的一个例子是<code>todolist</code>，轻轻松松完成后想实现<a href="http://www.todolist.cn/">例子</a>里面拖拽效果，于是有了这个笔记(<a href="http://106.53.78.195/todolist/">这个是我自己实现的todolist，样式全是参考的例子里面的</a>)。</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="GIF.gif">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">效果图</div></center><h3 id="1、-jquery版本的"><a href="#1、-jquery版本的" class="headerlink" title="1、 jquery版本的"></a>1、 jquery版本的</h3><p>html </p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;ul id=<span class="hljs-string">&quot;container&quot;</span>&gt;<br>    &lt;li <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">ele</span>&quot; <span class="hljs-symbol">draggable</span>=&quot;<span class="hljs-symbol">true</span>&quot;&gt;<span class="hljs-symbol">1</span>&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">ele</span>&quot; <span class="hljs-symbol">draggable</span>=&quot;<span class="hljs-symbol">true</span>&quot;&gt;<span class="hljs-symbol">2</span>&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">ele</span>&quot; <span class="hljs-symbol">draggable</span>=&quot;<span class="hljs-symbol">true</span>&quot;&gt;<span class="hljs-symbol">3</span>&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">ele</span>&quot; <span class="hljs-symbol">draggable</span>=&quot;<span class="hljs-symbol">true</span>&quot;&gt;<span class="hljs-symbol">4</span>&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">ele</span>&quot; <span class="hljs-symbol">draggable</span>=&quot;<span class="hljs-symbol">true</span>&quot;&gt;<span class="hljs-symbol">5</span>&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">ele</span>&quot; <span class="hljs-symbol">draggable</span>=&quot;<span class="hljs-symbol">true</span>&quot;&gt;<span class="hljs-symbol">6</span>&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">ele</span>&quot; <span class="hljs-symbol">draggable</span>=&quot;<span class="hljs-symbol">true</span>&quot;&gt;<span class="hljs-symbol">7</span>&lt;/<span class="hljs-symbol">li</span>&gt;<br>    &lt;<span class="hljs-symbol">li</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">ele</span>&quot; <span class="hljs-symbol">draggable</span>=&quot;<span class="hljs-symbol">true</span>&quot;&gt;<span class="hljs-symbol">8</span>&lt;/<span class="hljs-symbol">li</span>&gt;<br>&lt;/<span class="hljs-symbol">ul</span>&gt;<br></code></pre></td></tr></table></figure><p>css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> &#123;<br>    <span class="hljs-attribute">list-style</span>: none;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ele</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#999</span>;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#EA6E59</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">2px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">color</span>: white;<br>    <span class="hljs-attribute">cursor</span>: move;<br>&#125;<br><br><span class="hljs-selector-class">.ele</span><span class="hljs-selector-pseudo">:nth-child</span>(even) &#123;<br>    <span class="hljs-attribute">background</span>: yellowgreen;<br>&#125;<br></code></pre></td></tr></table></figure><p>拖拽(drag)主要用到<code>ondragstart</code>、<code>ondragover</code>这两个事件，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API">可以了解一下其他drag相关的事件</a></p><p>思路： </p><ol><li>使用事件委托，将<code>li</code>的事件委托给<code>ul</code>(<a href="https://zhuanlan.zhihu.com/p/26536815">为什么使用事件委托?</a>)</li><li>在<code>ondragstart</code>时用一个变量来存储当前拖拽的dom元素</li><li><code>ondragover</code>时比对<code>dragover</code>的元素是不是<code>li</code>且与是不是拖拽的元素自身</li><li>ps:别忘了给需要拖拽的元素加<code>draggable=&quot;true&quot;</code>哦</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var node = document.query<span class="hljs-constructor">Selector(<span class="hljs-string">&quot;#container&quot;</span>)</span>;<br>var draging = null; <span class="hljs-comment">// 当前正在拖动的元素对象</span><br><br>node.ondragstart = <span class="hljs-keyword">function</span> (event) &#123;<br>    event.dataTransfer.set<span class="hljs-constructor">Data(<span class="hljs-string">&quot;te&quot;</span>, <span class="hljs-params">event</span>.<span class="hljs-params">target</span>.<span class="hljs-params">innerText</span>)</span>; <span class="hljs-comment">// firefox设置了setData后元素才能拖动，不能使用text，firefox会打开新tab</span><br>    draging = event.target;<br>&#125;<br><br><span class="hljs-comment">// 当元素或选中的文本被拖到一个可释放目标上时触发，与ondragenter的区别在于，ondragenter是拖拽的过程中经过可以被拖拽的元素就会触发，而ondragover拖动到可以拖动的元素才会触发</span><br>node.ondragover = <span class="hljs-keyword">function</span> (event) &#123;<br>    event.prevent<span class="hljs-constructor">Default()</span>;<br>    var target = event.target;<br>    <span class="hljs-keyword">if</span> (target.nodeName<span class="hljs-operator"> === </span><span class="hljs-string">&quot;LI&quot;</span><span class="hljs-operator"> &amp;&amp; </span>target !== draging) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-constructor">_index(<span class="hljs-params">draging</span>)</span> &lt; <span class="hljs-constructor">_index(<span class="hljs-params">target</span>)</span>) &#123;<br>            target.parentNode.insert<span class="hljs-constructor">Before(<span class="hljs-params">draging</span>, <span class="hljs-params">target</span>.<span class="hljs-params">nextSibling</span>)</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            target.parentNode.insert<span class="hljs-constructor">Before(<span class="hljs-params">draging</span>, <span class="hljs-params">target</span>)</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、-vue版本的"><a href="#2、-vue版本的" class="headerlink" title="2、 vue版本的"></a>2、 vue版本的</h3><p>这边还有个小知识点，<a href="https://cn.vuejs.org/v2/guide/custom-directive.html">如何实现自定义指令</a>。</p><p>逻辑基本与jquery版本的相同，这边主要记录一下如何自定义指令。</p><h4 id="2-1-实现自定义指令的逻辑"><a href="#2-1-实现自定义指令的逻辑" class="headerlink" title="2.1 实现自定义指令的逻辑"></a>2.1 实现自定义指令的逻辑</h4><p>在<code>src</code>路径下创建<code>directive</code>文件夹，进入该文件夹，创建文件<code>drag.js</code>,下面是<code>drag.js</code>内的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 获取当前元素的index</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">_index</span> = (<span class="hljs-params">el</span>) =&gt; &#123;<br>  <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span><br>  <span class="hljs-comment">// parentNode是获取指定的节点在DOM树中的父节点</span><br>  <span class="hljs-keyword">if</span> (!el || !el.<span class="hljs-property">parentNode</span>) &#123;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>  &#125;<br>  <span class="hljs-comment">// previousElementSibling 属性返回指定元素的前一个兄弟元素</span><br>  <span class="hljs-keyword">while</span> (el &amp;&amp; (el = el.<span class="hljs-property">previousElementSibling</span>)) &#123;<br>    index++<br>  &#125;<br>  <span class="hljs-keyword">return</span> index<br>&#125;<br><br><span class="hljs-keyword">let</span> draging = <span class="hljs-literal">null</span> <span class="hljs-comment">// 当前正在拖动的元素对象</span><br><br><span class="hljs-keyword">const</span> drag = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;drag&#x27;</span>, &#123;<br>  <span class="hljs-attr">inserted</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) &#123;<br>    <span class="hljs-comment">// 当拖动元素或选中的文本时触发</span><br>    el.<span class="hljs-property">ondragstart</span> = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>      draging = e.<span class="hljs-property">target</span><br>    &#125;<br><br>    <span class="hljs-comment">// 当元素或选中的文本被拖到一个可释放目标上时触发，与ondragenter的区别在于，ondragenter是拖拽的过程中经过可以被拖拽的元素就会触发，而ondragover拖动到可以拖动的元素才会触发</span><br>    el.<span class="hljs-property">ondragover</span> = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>      e.<span class="hljs-title function_">preventDefault</span>()<br>      <span class="hljs-keyword">const</span> target = e.<span class="hljs-property">target</span>.<span class="hljs-property">parentNode</span> <span class="hljs-comment">// 当前可以拖动的元素的对象，此处加了parentNode是因为业务需要，业务里面的代码不是单纯的li标签里面还嵌有其他元素</span><br>      <span class="hljs-keyword">if</span> (target.<span class="hljs-property">nodeName</span> === <span class="hljs-string">&#x27;LI&#x27;</span> &amp;&amp; target !== draging) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_">_index</span>(draging) &lt; <span class="hljs-title function_">_index</span>(target)) &#123;<br>          target.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(draging, target.<span class="hljs-property">nextSibling</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          target.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">insertBefore</span>(draging, target)<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> drag<br></code></pre></td></tr></table></figure><h4 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h4><p>在<code>src</code>下的<code>main.js</code>文件内添加如下代码：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> drag <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/directive/drag&#x27;</span><br></code></pre></td></tr></table></figure><p>在组件或者页面内无需引用即可以直接使用</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item,index) in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.value&quot;</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">v-drag</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;item.checked&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.value</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>参考资料：<br><a href="https://www.zhangxinxu.com/wordpress/2011/02/html5-drag-drop-%E6%8B%96%E6%8B%BD%E4%B8%8E%E6%8B%96%E6%94%BE%E7%AE%80%E4%BB%8B/">HTML5 drag &amp; drop 拖拽与拖放简介</a><br><a href="https://www.jianshu.com/p/a923add40767">js drag拖动排序</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>纯css实现吸顶效果</title>
    <link href="/2019/12/20/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E5%90%B8%E9%A1%B6%E6%95%88%E6%9E%9C/"/>
    <url>/2019/12/20/%E7%BA%AFcss%E5%AE%9E%E7%8E%B0%E5%90%B8%E9%A1%B6%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<p>今天写pad端顶部导航栏时遇到一个问题(其实也不能算问题,只是为了引出话题而已)，导航栏是不随着列表页滑动而滑动的，按照以往的思维直接给导航栏一个<code>position:fixed</code>，然后设置<code>top:0</code>就欧凯了。</p><p>不过这样会使导航栏脱离文档流，导致列表的第一条会有部分被导航栏遮挡住。问题不大，继续按照以外的思维给列表的外部容易来个<code>margin-top</code>，完美！</p><p>如果是之前的话，这个需求肯定告一段落了，然后继续coding，不过今天我莫名的觉得应该有更优雅的方式来实现，于是百度了一翻，果然发现了今天的主角<code>position: sticky;</code>。</p><h3 id="什么是sticky"><a href="#什么是sticky" class="headerlink" title="什么是sticky"></a>什么是sticky</h3><blockquote><p>粘性定位可以被认为是相对定位和固定定位的混合。元素在跨越特定阈值前为相对定位，之后为固定定位</p></blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position#Sticky_positioning">上述来源于mdn关于黏性定位的介绍</a></p><p>来一个<a href="https://xypecho.github.io/test/sticky.html">demo看看</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">section</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid green;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">40px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h2</span> &#123;<br>    <span class="hljs-attribute">position</span>: sticky;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">background-color</span>: red;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>&#125;<br><br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">word-wrap</span>: break-word;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>父级元素不能有任何除了<code>overflow:visible</code>以外的overflow设置(其他的坑等实践中遇到再补充…)</li></ol><h3 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="QQ图片20191220173813.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px">目前主流浏览器都兼容了</div></center>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript中十大排序算法</title>
    <link href="/2019/12/12/javascript%E4%B8%AD%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2019/12/12/javascript%E4%B8%AD%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1、-冒泡排序-Bubble-Sort"><a href="#1、-冒泡排序-Bubble-Sort" class="headerlink" title="1、 冒泡排序(Bubble Sort)"></a>1、 冒泡排序(Bubble Sort)</h3><blockquote><p>实现思路:<br>对比第一项和第二项<br>如果第一项大于第二项，交换他们<br>对比第二项和第三项<br>如果第二项大于第三项，交换他们<br>持续直到数据结束</p></blockquote><p>网上找到了一个动图可以形象的说明冒泡排序的原理</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);margin-top:80px;"     src="BubbleSort.gif">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">冒泡排序</div></center><p>es5的实现</p><p>ps:<strong>var len &#x3D; arr.length; &#x2F;&#x2F; 这样写，可以节省length的获取时间</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bubbleSort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">let</span> len = arr.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-comment">// 遍历数组的前arr.length - i项，忽略后面的i项（已排序部分）</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; len - i - <span class="hljs-number">1</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">let</span> temp = arr[j];<br>                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                arr[j + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br></code></pre></td></tr></table></figure><p>es6语法则简单明了很多了(如果要倒序的话，把<code>&gt;</code>改成<code>&lt;</code>就ok了)</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">function <span class="hljs-keyword">bubbleSort(arr) </span>&#123;<br>    let len = arr.length;<br>    for (let i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; len; i++) &#123;</span><br>        for (let <span class="hljs-keyword">j </span>= <span class="hljs-number">0</span><span class="hljs-comment">; j &lt; len - i - 1; j++) &#123;</span><br>            if (arr[<span class="hljs-keyword">j] </span>&gt; arr[<span class="hljs-keyword">j </span>+ <span class="hljs-number">1</span>]) &#123;<br>                [arr[<span class="hljs-keyword">j], </span>arr[<span class="hljs-keyword">j </span>+ <span class="hljs-number">1</span>]] = [arr[<span class="hljs-keyword">j </span>+ <span class="hljs-number">1</span>], arr[<span class="hljs-keyword">j]]</span><br><span class="hljs-keyword"></span>            &#125;<br>        &#125;<br>    &#125;<br>    return arr;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、-选择排序-Selection-Sort"><a href="#2、-选择排序-Selection-Sort" class="headerlink" title="2、 选择排序(Selection Sort)"></a>2、 选择排序(Selection Sort)</h3><blockquote><p>实现思路：<br>在未排序序列中找到最小的元素，存放到排序序列的起始位置<br>从剩余未排序元素中继续寻找最小的元素，然后放到已排序序列的末尾。<br>重复第二步，直到所有元素均排序完毕。</p></blockquote><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);margin-top:80px;"     src="SelectionSort.gif">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">选择排序</div></center><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">selectionSort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">let</span> len = arr.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> minIndex; <span class="hljs-comment">// 最小值的索引</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        minIndex = i;<br>        <span class="hljs-comment">// 此处的j = i + 1是为了避免自己与自己比较</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;<br>                minIndex = j;<br>            &#125;<br>        &#125;<br>        [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]];<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">0</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">selectionSort</span>(arr)); <span class="hljs-comment">//  [-3, -1, 0, 1, 1, 2, 2, 3, 3, 4, 4, 23, 23, 55]</span><br></code></pre></td></tr></table></figure><h3 id="3、-插入排序-insertion-Sort"><a href="#3、-插入排序-insertion-Sort" class="headerlink" title="3、 插入排序(insertion Sort)"></a>3、 插入排序(insertion Sort)</h3><blockquote><p>实现思路：<br>从第一个元素开始，该元素可以认为已经被排序；<br>取出下一个元素，在已经排序的元素序列中从后向前扫描；<br>如果该元素（已排序）大于新元素，将该元素移到下一位置；<br>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置；<br>将新元素插入到该位置后；<br>重复步骤 2~5。</p></blockquote><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);margin-top:80px;"     src="insertionSort.gif">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">插入排序</div></center><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs maxima">function insertionSort(arr) &#123;<br>    <span class="hljs-built_in">let</span> <span class="hljs-built_in">length</span> = arr.<span class="hljs-built_in">length</span>;<br>    // i = <span class="hljs-number">1</span> 从第一个元素开始，第一个元素(i为<span class="hljs-number">0</span>的)可以认为已经被排序<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-built_in">let</span> <span class="hljs-built_in">key</span> = arr[i]; // <span class="hljs-built_in">key</span>为准备插入的值<br>        <span class="hljs-built_in">let</span> j = i - <span class="hljs-number">1</span>; // j为已排序部分的索引，第一次循环时，j就是arr[<span class="hljs-number">0</span>]的元素即认为已经被排序的元素<br>        // 如果当已排序部分的当前元素大于<span class="hljs-built_in">key</span><br>        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j] &gt; <span class="hljs-built_in">key</span>) &#123;<br>            arr[j + <span class="hljs-number">1</span>] = arr[j]; // 将当前元素（arr[j]）向后移一位<br>            j = j - <span class="hljs-number">1</span>;<br>        &#125;<br>        // 如果已排序部分的当前元素小于<span class="hljs-built_in">key</span>，则直接插入<br>        arr[j + <span class="hljs-number">1</span>] = <span class="hljs-built_in">key</span>;<br>    &#125;<br>    <span class="hljs-built_in">return</span> arr;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4、-希尔排序-Shell-Sort"><a href="#4、-希尔排序-Shell-Sort" class="headerlink" title="4、 希尔排序(Shell Sort)"></a>4、 希尔排序(Shell Sort)</h3><p>看的有点懵逼，先记下来</p><blockquote><p>实现思路:<br>希尔排序的核心理念与插入排序不同，它会首先比较距离较远的元素，而非相邻元素。通过定义一个间隔序列来表示在排序过程中进行比较的元素之间有多远的间隔。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">shellSort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">let</span> len = arr.<span class="hljs-property">length</span>,<br>        temp,<br>        gap = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (gap &lt; len / <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-comment">//动态定义间隔序列</span><br>        gap = gap * <span class="hljs-number">3</span> + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (gap; gap &gt; <span class="hljs-number">0</span>; gap = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(gap / <span class="hljs-number">3</span>)) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(gap)<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = gap; i &lt; len; i++) &#123;<br>            temp = arr[i];<br>            <span class="hljs-keyword">let</span> j = i - gap;<br>            <span class="hljs-keyword">for</span> (; j &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap) &#123;<br>                arr[j + gap] = arr[j];<br>            &#125;<br>            arr[j + gap] = temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="5、-归并排序-Merge-Sort"><a href="#5、-归并排序-Merge-Sort" class="headerlink" title="5、 归并排序(Merge Sort)"></a>5、 归并排序(Merge Sort)</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);margin-top:80px;"     src="MergeSort.gif">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">归并排序</div></center><h3 id="6、-快速排序-Quick-Sort"><a href="#6、-快速排序-Quick-Sort" class="headerlink" title="6、 快速排序(Quick Sort)"></a>6、 快速排序(Quick Sort)</h3><blockquote><p>实现思路:<br>找到该数组的基准点(通常为数组的第一个值)，并创建两个空数组left和right；<br>遍历数组，拿出数组中的每个数和基准点进行比较，如果比基准点小就放到left数组中，如果比基准点大就放到right数组中；<br>对数组left和right进行递归调用。</p></blockquote><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);margin-top:80px;"     src="QuickSort.gif">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">快速排序</div></center><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">quickSort</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">if</span> (arr.<span class="hljs-built_in">length</span> &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-built_in">left</span> = [],<br>            <span class="hljs-built_in">right</span> = [],<br>            pivot = arr.shift(); <span class="hljs-comment">//基准点  shift():该方法用于删除数组的第一个元素，并返回被删除的元素。</span><br>        <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &lt;= pivot) &#123;<br>                <span class="hljs-built_in">left</span>.<span class="hljs-built_in">push</span>(arr[i])<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">right</span>.<span class="hljs-built_in">push</span>(arr[i])<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> [].concat(quickSort(<span class="hljs-built_in">left</span>), pivot, quickSort(<span class="hljs-built_in">right</span>)) <span class="hljs-comment">// 把left和right以及基准点拼接成新数组，位置不能乱！！！</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">0</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(quickSort(arr)) <span class="hljs-comment">// [-3, -1, 0, 1, 1, 2, 2, 3, 3, 4, 4, 23, 23, 55]</span><br></code></pre></td></tr></table></figure><h3 id="7、-堆排序-Heap-Sort"><a href="#7、-堆排序-Heap-Sort" class="headerlink" title="7、 堆排序(Heap Sort)"></a>7、 堆排序(Heap Sort)</h3><h3 id="8、-计数排序-Counting-Sort"><a href="#8、-计数排序-Counting-Sort" class="headerlink" title="8、 计数排序(Counting Sort)"></a>8、 计数排序(Counting Sort)</h3><h3 id="9、-桶排序-Bucket-Sort"><a href="#9、-桶排序-Bucket-Sort" class="headerlink" title="9、 桶排序(Bucket Sort)"></a>9、 桶排序(Bucket Sort)</h3><h3 id="10、-基数排序-Radix-Sort"><a href="#10、-基数排序-Radix-Sort" class="headerlink" title="10、 基数排序(Radix Sort)"></a>10、 基数排序(Radix Sort)</h3><p>参考资料：<br><a href="https://juejin.im/post/57dcd394a22b9d00610c5ec8">十大经典排序算法总结（JavaScript描述）</a><br><a href="http://math.hws.edu/eck/js/sorting/xSortLab.html">算法可视化工具</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>算法</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>算法</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解算法中的时间复杂度与空间复杂度</title>
    <link href="/2019/12/11/%E7%90%86%E8%A7%A3%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <url>/2019/12/11/%E7%90%86%E8%A7%A3%E7%AE%97%E6%B3%95%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%8E%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>我们讨论算法时，都讨论其运行时间。一般而言，应选择效率最高的算法，以最大限度地减少运行时间或占用空间。<br>但是如何量化算法有多快呢？以每次运行的时间为基准？随着元素的增多，时间可能会失去参考性。此时我们就需要一种表示法来量化算法的执行效率，这正是大O表示法的用武之地。</p><blockquote><p>大O表示法指出了算法有多快。例如，假设列表包含n个元素。简单查找需要检查每个元素，因此需要执行n次操作。使用大O表示法，这个运行时间为O(n)。单位秒呢？没有——大O表示法指的并非以秒为单位的速度。大O表示法让你能够比较操作数，它指出了算法运行时间的增速。（记住，大O表示法计算的是操作数。）</p></blockquote><h3 id="举几个常见算法例子"><a href="#举几个常见算法例子" class="headerlink" title="举几个常见算法例子"></a>举几个常见算法例子</h3><h4 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h4><p>使用二分法检查长度为n的列表，需要执行log n次操作。使用大O表示法怎么表示呢，O(log n)或者O(log2n)。</p><h4 id="简单查找"><a href="#简单查找" class="headerlink" title="简单查找"></a>简单查找</h4><p>使用简单查找（也称为线性查找），则按照顺序依次对比，需要执行n次操作（当然也有可能，第一个就是）。使用大O表示法为O(n)。<br>解释一下，为什么使用简单查找第一次就找到了，仍然为O(n)。</p><blockquote><p>简单查找的运行时间总是为O(n)。查找时，一次就找到了，这是最佳的情形，但大O表示法说的是最糟的情形。因此，你可以说，在最糟情况下，必须查看电话簿中的每个条目，对应的运行时间为O(n)。这是一个保证——你知道简单查找的运行时间不可能超过O(n)。</p></blockquote><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>有一个歌单，里面有歌曲和播放次数。现在有一个需求，需要对歌单按照播放次数进行排序。<br>实现思路，遍历这个列表，找出作品播放次数最多的乐队，并将该乐队添加到一个新列表中。然后继续再次这样做，找出播放次数第二多的乐队，如此循环…</p><p>要找出播放次数最多的乐队，必须检查列表中的每个元素。正如你刚才看到的，这需要的时间为O(n)。因此对于这种时间为O(n)的操作，你需要执行n次。</p><p>所以这样的“算法”需要的总时间为O(n × n)，即O(n²)。<br>随着排序的进行，每次需要检查的元素数在逐渐减少，最后一次需要检查的元素都只有一个。既然如此，运行时间怎么还是O(n2)呢？</p><blockquote><p>你说得没错，并非每次都需要检查n个元素。第一次需要检查n个元素，但随后检查的元素数依次为n -1, n -2, …, 2和1。平均每次检查的元素数为1&#x2F;2 ×n，因此运行时间为O(n×1&#x2F;2×n)。但大O表示法省略诸如1&#x2F;2这样的常数，因此简单地写作O(n×n)或O(n²)。</p></blockquote><h3 id="一些常见的大O运行时间"><a href="#一些常见的大O运行时间" class="headerlink" title="一些常见的大O运行时间"></a>一些常见的大O运行时间</h3><p>下面按从快到慢的顺序列出了你经常会遇到的5种大O运行时间。</p><ol><li>O(log n)，也叫对数时间，这样的算法包括二分查找。</li><li>O(n)，也叫线性时间，这样的算法包括简单查找。</li><li>O(n * log n)，这样的算法包括的快速排序一种速度较快的排序算法。</li><li>O(n²)，这样的算法包括选择排序——一种速度较慢的排序算法。</li><li>O(n! )，阶乘，一种非常慢的算法。</li></ol><h3 id="关于对数"><a href="#关于对数" class="headerlink" title="关于对数"></a>关于对数</h3><blockquote><p>你可能不记得什么是对数了，但很可能记得什么是幂。log10 100相当于问“将多少个10相乘的结果为100”。答案是两个：10 × 10&#x3D;100。因此，log10 100&#x3D;2。对数运算是幂运算的逆运算。</p></blockquote><h4 id="为了理解对数，一些示例"><a href="#为了理解对数，一些示例" class="headerlink" title="为了理解对数，一些示例"></a>为了理解对数，一些示例</h4><p>一些关于对数的<a href="https://www.shuxuele.com/algebra/exponents-logarithms.html">理论知识</a></p><p><img src="https://www.shuxuele.com/algebra/images/logarithm-exponent.svg" alt="alt text"></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs excel">log2 <span class="hljs-number">8</span>=<span class="hljs-number">3</span> （<span class="hljs-number">2</span>的多少次方等于<span class="hljs-number">8</span>，答案为<span class="hljs-number">3</span>）<br><br>有些没有底数的叫常用对数，常用对数 <span class="hljs-built_in">log10</span>(x)，有时写为 <span class="hljs-built_in">log</span>(x)<br><br><span class="hljs-built_in">n</span> <span class="hljs-built_in">log</span> <span class="hljs-built_in">n</span>就是<span class="hljs-built_in">n</span>乘以logn，当数据增大<span class="hljs-number">256</span>倍时，耗时增大<span class="hljs-number">256</span>*<span class="hljs-number">8</span>=<span class="hljs-number">2048</span>倍。这个复杂度高于线性低于平方，归并排序就是O(nlogn)的时间复杂度。<br></code></pre></td></tr></table></figure><p><strong>使用大O表示法讨论运行时间时，log指的都是log2。使用简单查找法查找元素时，在最糟情况下需要查看每个元素。因此，如果列表包含8个数字，你最多需要检查8个数字。而使用二分查找时，最多需要检查log n个元素。如果列表包含8个元素，你最多需要检查3个元素，因为log 8&#x3D;3（2的3次方等于8）。如果列表包含1024个元素，你最多需要检查10个元素，因为log 1024&#x3D;10（2的十次方等于1024）。</strong></p><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><ol start="0"><li>算法运行时间并不以秒为单位。</li><li>算法的速度指的并非时间，而是操作数的增速。</li><li>算法运行时间是从其增速的角度度量的。</li><li>算法的运行时间用大O表示法表示。</li></ol><p>参考资料：<br>《算法图解》<br><a href="https://juejin.im/post/5db940d9f265da4d044e3351">算法复杂度和大O表示法</a><br><a href="https://www.zhihu.com/question/356477567">请问怎么计算时间复杂度？</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>数组</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>算法</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于数组的一些操作</title>
    <link href="/2019/12/04/%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/"/>
    <url>/2019/12/04/%E5%85%B3%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>记录一下常见的关于数组的操作</p><h3 id="1、-数组降维-数组扁平化"><a href="#1、-数组降维-数组扁平化" class="headerlink" title="1、 数组降维(数组扁平化)"></a>1、 数组降维(数组扁平化)</h3><h4 id="1-1-flat"><a href="#1-1-flat" class="headerlink" title="1.1 flat"></a>1.1 flat</h4><p>直接上大招</p><p><strong>flat()是es6提供的一个新的关于数组的方法，该方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs inform7">var arr1 = <span class="hljs-comment">[1, 2, <span class="hljs-comment">[3, 4]</span>]</span>;<br>arr1.flat(); <br>// <span class="hljs-comment">[1, 2, 3, 4]</span><br><br>var arr2 = <span class="hljs-comment">[1, 2, <span class="hljs-comment">[3, 4, <span class="hljs-comment">[5, 6]</span>]</span>]</span>;<br>arr2.flat();<br>// <span class="hljs-comment">[1, 2, 3, 4, <span class="hljs-comment">[5, 6]</span>]</span><br><br>var arr3 = <span class="hljs-comment">[1, 2, <span class="hljs-comment">[3, 4, <span class="hljs-comment">[5, 6]</span>]</span>]</span>;<br>arr3.flat(2);<br>// <span class="hljs-comment">[1, 2, 3, 4, 5, 6]</span><br><br>//使用 Infinity，可展开任意深度的嵌套数组<br>var arr4 = <span class="hljs-comment">[1, 2, <span class="hljs-comment">[3, 4, <span class="hljs-comment">[5, 6, <span class="hljs-comment">[7, 8, <span class="hljs-comment">[9, 10]</span>]</span>]</span>]</span>]</span>;<br>arr4.flat(Infinity);<br>// <span class="hljs-comment">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br></code></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">在mdn查看更多关于flat的介绍</a></p><h4 id="1-2-其他一些骚操作"><a href="#1-2-其他一些骚操作" class="headerlink" title="1.2 其他一些骚操作"></a>1.2 其他一些骚操作</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">var arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, [<span class="hljs-number">9</span>, <span class="hljs-number">10</span>]]]]];<br>// <span class="hljs-keyword">some</span>()是对数组中每一项运行给定函数，如果该函数对任一项返回<span class="hljs-literal">true</span>，则返回<span class="hljs-literal">true</span>。<br>// arr.<span class="hljs-keyword">some</span>(<span class="hljs-keyword">Array</span>.isArray)相当于arr.<span class="hljs-keyword">some</span>((item, index) =&gt; <span class="hljs-keyword">Array</span>.isArray(item, index))<br><span class="hljs-keyword">while</span> (arr.<span class="hljs-keyword">some</span>(<span class="hljs-keyword">Array</span>.isArray)) &#123;<br>    arr = [].concat(...arr)<br>&#125;<br>console.log(arr) // [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure><h3 id="2、-数组去重"><a href="#2、-数组去重" class="headerlink" title="2、 数组去重"></a>2、 数组去重</h3><h4 id="2-1-一维数组去重"><a href="#2-1-一维数组去重" class="headerlink" title="2.1 一维数组去重"></a>2.1 一维数组去重</h4><h5 id="2-1-1-Set"><a href="#2-1-1-Set" class="headerlink" title="2.1.1 Set"></a>2.1.1 Set</h5><p><strong>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</strong>可以利用这个特性去重。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">var</span> aaa = <span class="hljs-keyword">new</span> Set(arr)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>([...aaa]) <span class="hljs-comment">//  [1, 3, 2, 4, 55, 23]</span><br></code></pre></td></tr></table></figure><p>封装一下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// <span class="hljs-keyword">Array</span>.<span class="hljs-keyword">from</span> 方法可以将 <span class="hljs-keyword">Set</span> 结构转为数组。<br>const a = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">function</span> <span class="hljs-keyword">unique</span>(<span class="hljs-keyword">array</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">Array</span>.<span class="hljs-keyword">from</span>(<span class="hljs-built_in">new</span> <span class="hljs-keyword">Set</span>(<span class="hljs-keyword">array</span>));<br>&#125;<br>console.log(<span class="hljs-keyword">unique</span>(a)) // [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">23</span>]<br></code></pre></td></tr></table></figure><h5 id="2-1-2-filter"><a href="#2-1-2-filter" class="headerlink" title="2.1.2 filter"></a>2.1.2 filter</h5><p>第一种写法</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>];<br><span class="hljs-comment">// filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</span><br><span class="hljs-comment">// arr.indexOf 返回在数组中可以找到一个给定元素的第一个索引</span><br><span class="hljs-comment">// 这个方法的原理是：如果给定元素首次出现的索引不等于他自身的索引则剔除</span><br><span class="hljs-keyword">var</span> aaa = arr.<span class="hljs-built_in">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index</span>) =&gt;</span> arr.<span class="hljs-built_in">indexOf</span>(item) === index);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(aaa) <span class="hljs-comment">// [1, 3, 2, 4, 55, 23]</span><br></code></pre></td></tr></table></figure><p>第二种写法</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const a = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>];<br>const b = a.<span class="hljs-built_in">filter</span>(<span class="hljs-function">(<span class="hljs-params">item, index, self</span>) =&gt;</span> self.<span class="hljs-built_in">indexOf</span>(item) === index)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(b) <span class="hljs-comment">//[1, 3, 4, 5, 2, 6, 7, 8]</span><br></code></pre></td></tr></table></figure><h5 id="2-1-3-reduce"><a href="#2-1-3-reduce" class="headerlink" title="2.1.3 reduce"></a>2.1.3 reduce</h5><p>这段代码有丶骚没看懂，先收藏</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">var</span> aaa = arr.<span class="hljs-built_in">reduce</span>(<span class="hljs-function">(<span class="hljs-params">unique, item</span>) =&gt;</span> unique.<span class="hljs-built_in">includes</span>(item) ? unique : [...unique, item], [])<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(aaa) <span class="hljs-comment">// [1, 3, 2, 4, 55, 23]</span><br></code></pre></td></tr></table></figure><h5 id="2-1-4-来几个es5版本的数组去重"><a href="#2-1-4-来几个es5版本的数组去重" class="headerlink" title="2.1.4 来几个es5版本的数组去重"></a>2.1.4 来几个es5版本的数组去重</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 利用indexOf</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">55</span>, <span class="hljs-number">23</span>, <span class="hljs-number">4</span>, <span class="hljs-number">23</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">unique</span>(<span class="hljs-params">arr</span>) &#123;<br>    <span class="hljs-keyword">var</span> result = [];<br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr.<span class="hljs-built_in">indexOf</span>(arr[i]) === <span class="hljs-number">-1</span>) &#123;<br>            result.<span class="hljs-built_in">push</span>(arr[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(unique(arr)) <span class="hljs-comment">// [1, 4, 55, 23, 4, 23, 2]</span><br></code></pre></td></tr></table></figure><h5 id="2-1-5-Map结合filter"><a href="#2-1-5-Map结合filter" class="headerlink" title="2.1.5 Map结合filter"></a>2.1.5 Map结合filter</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">arrayUnique</span>(<span class="hljs-params">array</span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">map</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">array</span>.ﬁlter(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> !<span class="hljs-built_in">map</span>.has(item) &amp;&amp; <span class="hljs-built_in">map</span>.set(item, <span class="hljs-number">1</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-数组对象去重"><a href="#2-2-数组对象去重" class="headerlink" title="2.2 数组对象去重"></a>2.2 数组对象去重</h4><p><a href="https://xypecho.github.io/2018/09/27/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%A6%82%E4%BD%95%E5%8E%BB%E9%87%8D/">数组对象去重</a></p><h3 id="3、-打乱数组"><a href="#3、-打乱数组" class="headerlink" title="3、 打乱数组"></a>3、 打乱数组</h3><p><a href="https://xypecho.github.io/2018/05/03/%E8%8E%B7%E5%8F%96%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/">打乱数组</a></p><h3 id="4、-数组排序"><a href="#4、-数组排序" class="headerlink" title="4、 数组排序"></a>4、 数组排序</h3><h4 id="4-0-一些排序算法"><a href="#4-0-一些排序算法" class="headerlink" title="4.0 一些排序算法"></a>4.0 一些排序算法</h4><p><a href="https://xypecho.github.io/2019/12/12/javascript%E4%B8%AD%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/">使用算法进行的数组排序</a></p><h4 id="4-1-sort函数"><a href="#4-1-sort函数" class="headerlink" title="4.1 sort函数"></a>4.1 sort函数</h4><blockquote><p>sort() 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的</p></blockquote><p>不传任何函数默认是按<code>UTF-16</code>排序</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">const</span> <span class="hljs-built_in">array</span>1 = [<span class="hljs-number">1</span>, <span class="hljs-number">30</span>, <span class="hljs-number">4</span>, <span class="hljs-number">21</span>, <span class="hljs-number">100000</span>];<br><span class="hljs-built_in">array</span>1.sort();<br>console.log(<span class="hljs-built_in">array</span>1);<br><span class="hljs-comment">// expected output: Array [1, 100000, 21, 30, 4]</span><br></code></pre></td></tr></table></figure><h3 id="5、-数组遍历"><a href="#5、-数组遍历" class="headerlink" title="5、 数组遍历"></a>5、 数组遍历</h3><h4 id="5-1-Array-from"><a href="#5-1-Array-from" class="headerlink" title="5.1 Array.from()"></a>5.1 Array.from()</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">在mdn查看更多关于Array.from的介绍</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(arr, <span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item) <span class="hljs-comment">// 1,2,3</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="6、-数组交集-并集-差集"><a href="#6、-数组交集-并集-差集" class="headerlink" title="6、 数组交集 并集 差集"></a>6、 数组交集 并集 差集</h3><blockquote><p>交集意味着找出两个集合中都有的元素。<br>并集意味着将集合合并。<br>差集意味着将从一个集合中剔除出现在另一个集合中的元素。</p></blockquote><h4 id="6-1-交集"><a href="#6-1-交集" class="headerlink" title="6.1 交集"></a>6.1 交集</h4><p>es5</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>let arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br>let arr = arr1.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> arr2.<span class="hljs-built_in">includes</span>(item))<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr) <span class="hljs-comment">// 1,3,5</span><br></code></pre></td></tr></table></figure><p>es6</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>let arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br><span class="hljs-keyword">var</span> <span class="hljs-built_in">intersection</span> = arr1.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-keyword">new</span> Set(arr2).has(item))<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">intersection</span>); <span class="hljs-comment">// 1,3,5</span><br></code></pre></td></tr></table></figure><h4 id="6-2-并集"><a href="#6-2-并集" class="headerlink" title="6.2 并集"></a>6.2 并集</h4><p>es5</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>let arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br>let ans = arr1.concat(arr2.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> arr1.<span class="hljs-built_in">indexOf</span>(item) === <span class="hljs-number">-1</span>))<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ans); <span class="hljs-comment">// [1, 2, 3, 5, 8, 9, 7]</span><br></code></pre></td></tr></table></figure><p>es6</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> arr1 = <span class="hljs-literal">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]</span><br><span class="hljs-keyword">let</span> arr2 = <span class="hljs-literal">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]</span><br><span class="hljs-keyword">let</span> ans = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>from(<span class="hljs-keyword">new</span> <span class="hljs-constructor">Set([<span class="hljs-operator">...</span><span class="hljs-params">arr1</span>, <span class="hljs-operator">...</span><span class="hljs-params">arr2</span>])</span>)<br>console.log(ans); <span class="hljs-comment">// [1, 2, 3, 5, 8, 9, 7]</span><br></code></pre></td></tr></table></figure><h4 id="6-3-差集"><a href="#6-3-差集" class="headerlink" title="6.3 差集"></a>6.3 差集</h4><p>arr1中有而arr2没有的</p><p>es5</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>let arr2 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>]<br>let ans = arr1.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> arr2.<span class="hljs-built_in">indexOf</span>(item) === <span class="hljs-number">-1</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(ans); <span class="hljs-comment">// [2, 8, 9]</span><br></code></pre></td></tr></table></figure><h3 id="7、-对比两个数组是否相同"><a href="#7、-对比两个数组是否相同" class="headerlink" title="7、 对比两个数组是否相同"></a>7、 对比两个数组是否相同</h3><h4 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h4><p>例如<a href="https://lodash.com/docs/4.17.15#isEqual">lodash</a>，不仅可以比较数组，对象也可以</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim">//   <span class="hljs-keyword">var</span> <span class="hljs-keyword">object</span> = &#123; a: <span class="hljs-number">1</span> &#125;;<br>//   <span class="hljs-keyword">var</span> other = &#123; a: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">object</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> other = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>console.log(_.isEqual(<span class="hljs-keyword">object</span>, other)); // <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="一些hack方法"><a href="#一些hack方法" class="headerlink" title="一些hack方法"></a>一些hack方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> a2 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(a1) == <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(a2)); <span class="hljs-comment">// Returns true</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> array1 = [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>];<br><span class="hljs-keyword">var</span> array2 = [<span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">var</span> is_same =<br>  array1.<span class="hljs-built_in">length</span> == array2.<span class="hljs-built_in">length</span> &amp;&amp;<br>  array1.every(<span class="hljs-function">(<span class="hljs-params">element, index</span>) =&gt;</span> element === array2[index]);<br>  <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(is_same); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="正规军"><a href="#正规军" class="headerlink" title="正规军"></a>正规军</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">isEqual</span>(<span class="hljs-params">array, array1</span>) &#123;<br>  <span class="hljs-comment">// 如果是假值则返回false</span><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">array</span> || !array1) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-comment">// 比较长度，可以节省大量时间</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>.<span class="hljs-built_in">length</span> != array1.<span class="hljs-built_in">length</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">array</span>.<span class="hljs-built_in">length</span>; i++) &#123;<br>    <span class="hljs-comment">// 检查是否为嵌套数组</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[i] instanceof <span class="hljs-built_in">Array</span> &amp;&amp; array1[i] instanceof <span class="hljs-built_in">Array</span>) &#123;<br>      <span class="hljs-comment">// 递归判断</span><br>      <span class="hljs-keyword">if</span> (!isEqual(<span class="hljs-built_in">array</span>[i], array1[i])) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">array</span>[i] !== array1[i]) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>const arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>const arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(isEqual(arr, arr1)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>当然我们也可以挂载到<code>Array</code>的原型上，这样使用起来更加方便。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// Warn if overriding existing method</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.prototype.<span class="hljs-built_in">equals</span>)<br>  <span class="hljs-built_in">console</span>.warn(<br>    <span class="hljs-string">&quot;Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there&#x27;s a framework conflict or you&#x27;ve got double inclusions in your code.&quot;</span><br>  );<br><span class="hljs-comment">// attach the .equals method to Array&#x27;s prototype to call it on any array</span><br><span class="hljs-built_in">Array</span>.prototype.<span class="hljs-built_in">equals</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">array</span>) &#123;<br>  <span class="hljs-comment">// if the other array is a falsy value, return</span><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">array</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-comment">// compare lengths - can save a lot of time</span><br>  <span class="hljs-keyword">if</span> (this.<span class="hljs-built_in">length</span> != <span class="hljs-built_in">array</span>.<span class="hljs-built_in">length</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = this.<span class="hljs-built_in">length</span>; i &lt; l; i++) &#123;<br>    <span class="hljs-comment">// Check if we have nested arrays</span><br>    <span class="hljs-keyword">if</span> (this[i] instanceof <span class="hljs-built_in">Array</span> &amp;&amp; <span class="hljs-built_in">array</span>[i] instanceof <span class="hljs-built_in">Array</span>) &#123;<br>      <span class="hljs-comment">// recurse into the nested arrays</span><br>      <span class="hljs-keyword">if</span> (!this[i].<span class="hljs-built_in">equals</span>(<span class="hljs-built_in">array</span>[i])) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (this[i] != <span class="hljs-built_in">array</span>[i]) &#123;<br>      <span class="hljs-comment">// Warning - two different object instances will never be equal: &#123;x:20&#125; != &#123;x:20&#125;</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;;<br><span class="hljs-comment">// Hide method from for-in loops</span><br>Object.defineProperty(<span class="hljs-built_in">Array</span>.prototype, <span class="hljs-string">&quot;equals&quot;</span>, &#123; <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span> &#125;);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-built_in">equals</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-built_in">equals</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="拓展题：对比两个对象是否相同"><a href="#拓展题：对比两个对象是否相同" class="headerlink" title="拓展题：对比两个对象是否相同"></a>拓展题：对比两个对象是否相同</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> obj = &#123; name: <span class="hljs-number">1</span>, age: <span class="hljs-number">18</span>, Hobby: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] &#125;;<br><span class="hljs-keyword">var</span> obj1 = &#123; name: <span class="hljs-number">1</span>, age: <span class="hljs-number">18</span>, Hobby: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] &#125;;<br><br>function deepEqual(<span class="hljs-keyword">object</span>, object1) &#123;<br>  <span class="hljs-comment">// 指向同一内存时</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">object</span> === object1) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125;<br>  <span class="hljs-keyword">const</span> key = Object.keys(<span class="hljs-keyword">object</span>);<br>  <span class="hljs-keyword">const</span> key1 = Object.keys(object1);<br>  <span class="hljs-keyword">if</span> (key.length !== key1.length) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> _key of key) &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> = <span class="hljs-keyword">object</span>[_key];<br>    <span class="hljs-keyword">const</span> val1 = object1[_key];<br>    <span class="hljs-comment">// 检查对象子元素中是否还有嵌套的对象</span><br>    <span class="hljs-keyword">const</span> isAllObject = isObject(<span class="hljs-keyword">val</span>) &amp;&amp; isObject(val1);<br>    <span class="hljs-comment">// 有嵌套元素，但是不相等</span><br>    <span class="hljs-keyword">if</span> (isAllObject &amp;&amp; !deepEqual(<span class="hljs-keyword">val</span>, val1)) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!isAllObject &amp;&amp; <span class="hljs-keyword">val</span> !== val1) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>function isObject(obj) &#123;<br>  <span class="hljs-keyword">return</span> typeof obj === <span class="hljs-string">&quot;object&quot;</span> &amp;&amp; obj !== <span class="hljs-literal">null</span>;<br>&#125;<br><br>console.log(deepEqual(obj, obj1)); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="再次拓展：对比两个数组对象是否相同"><a href="#再次拓展：对比两个数组对象是否相同" class="headerlink" title="再次拓展：对比两个数组对象是否相同"></a>再次拓展：对比两个数组对象是否相同</h4><p>我们可以借用上面定义的<code>deepEqual</code>方法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> arrays<span class="hljs-constructor">Equal(<span class="hljs-params">a1</span>, <span class="hljs-params">a2</span>)</span> &#123;<br>    return a1.length<span class="hljs-operator"> === </span>a2.length<span class="hljs-operator"> &amp;&amp; </span>a1.every((item, index) =&gt; deep<span class="hljs-constructor">Equal(<span class="hljs-params">item</span>, <span class="hljs-params">a2</span>[<span class="hljs-params">index</span>])</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、-创建包含0-10数字数组"><a href="#8、-创建包含0-10数字数组" class="headerlink" title="8、 创建包含0-10数字数组"></a>8、 创建包含0-10数字数组</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Array</span>.<span class="hljs-keyword">from</span>(<span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>).keys())<br><br>[...<span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>).keys()]<br></code></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://stackoverflow.com/questions/7837456/how-to-compare-arrays-in-javascript">How to compare arrays in JavaScript?</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搞懂Javascript柯里化概念</title>
    <link href="/2019/12/03/%E6%90%9E%E6%87%82Javascript%E6%9F%AF%E9%87%8C%E5%8C%96%E6%A6%82%E5%BF%B5/"/>
    <url>/2019/12/03/%E6%90%9E%E6%87%82Javascript%E6%9F%AF%E9%87%8C%E5%8C%96%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="1、-前言"><a href="#1、-前言" class="headerlink" title="1、 前言"></a>1、 前言</h3><p>之前一直听说过<code>柯里化</code>不过一直没用过，最近在看闭包时提到闭包的一个用途之一就是<code>柯里化</code>。正好来了解一下。</p><h4 id="1-1-铺垫知识"><a href="#1-1-铺垫知识" class="headerlink" title="1.1 铺垫知识"></a>1.1 铺垫知识</h4><p>虽然在实际项目中没见过这种写法<code>fn(a)(b)(c)</code>(也有可能是我太菜没机会用到…),但是搜索柯里化相关的文章时，到处都是这种写法。<br>在看到<a href="https://blog.csdn.net/sinat_41747081/article/details/93134360">这篇文章</a>才知道，<strong>如果一个函数的返回值是另外一个函数，就可以用两个括号调用了</strong>。</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-comment">// 举个🌰：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span><span class="hljs-params">(m)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(n)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> m + <span class="hljs-string">&#x27;与&#x27;</span> + n + <span class="hljs-string">&#x27;前端学习&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">let</span> result = <span class="hljs-function"><span class="hljs-keyword">fn</span><span class="hljs-params">(<span class="hljs-string">&#x27;小明&#x27;</span>)</span><span class="hljs-params">(<span class="hljs-string">&#x27;小红&#x27;</span>)</span></span>;<br>console.log(result); <span class="hljs-comment">// 小明与小红前端学习</span><br></code></pre></td></tr></table></figure><h3 id="2、什么是柯里化-amp-怎么实现柯里化"><a href="#2、什么是柯里化-amp-怎么实现柯里化" class="headerlink" title="2、什么是柯里化 &amp; 怎么实现柯里化"></a>2、什么是柯里化 &amp; 怎么实现柯里化</h3><h4 id="2-1-柯里化的概念"><a href="#2-1-柯里化的概念" class="headerlink" title="2.1 柯里化的概念"></a>2.1 柯里化的概念</h4><blockquote><p>柯里化（Currying），又称部分求值（Partial Evaluation），是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p></blockquote><p>文字看起来比较晦涩难懂，来一段代码简单粗暴的解释一下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">add</span>(a, b, c) &#123;<br>    return <span class="hljs-selector-tag">a</span> + <span class="hljs-selector-tag">b</span> + c;<br>&#125;<br><br><span class="hljs-comment">// 正常调用方式</span><br><span class="hljs-built_in">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-comment">// 柯里化之后的版本调用方式</span><br><span class="hljs-built_in">curryAdd</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h4 id="2-2-怎么实现柯里化"><a href="#2-2-怎么实现柯里化" class="headerlink" title="2.2 怎么实现柯里化"></a>2.2 怎么实现柯里化</h4><h5 id="2-2-1-最简单的柯里化"><a href="#2-2-1-最简单的柯里化" class="headerlink" title="2.2.1 最简单的柯里化"></a>2.2.1 最简单的柯里化</h5><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-comment">// 原函数</span><br><span class="hljs-variable">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a</span>, <span class="hljs-params">b</span>, <span class="hljs-params">c</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">a</span> <span class="hljs-operator">+</span> <span class="hljs-variable">b</span> <span class="hljs-operator">+</span> <span class="hljs-variable">c</span>;<br>&#125;<br><br><span class="hljs-comment">// 柯里化函数</span><br><span class="hljs-variable">function</span> <span class="hljs-title function_">addCurrying</span>(<span class="hljs-params">a</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">function</span> (<span class="hljs-variable">b</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">function</span> (<span class="hljs-variable">c</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">a</span> <span class="hljs-operator">+</span> <span class="hljs-variable">b</span> <span class="hljs-operator">+</span> <span class="hljs-variable">c</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用原函数</span><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 6</span><br><br><span class="hljs-comment">// 调用柯里化函数</span><br><span class="hljs-title function_">addCurrying</span>(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>) <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><blockquote><p>被柯里化的函数 addCurrying 每次的返回值都为一个函数，并使用下一个参数作为形参，直到三个参数都被传入后，返回的最后一个函数内部执行求和操作，其实是充分的利用了闭包的特性来实现的。</p></blockquote><h5 id="2-2-2-封装通用的柯里化函数"><a href="#2-2-2-封装通用的柯里化函数" class="headerlink" title="2.2.2 封装通用的柯里化函数"></a>2.2.2 封装通用的柯里化函数</h5><p>上面的🌰太过死板，不具有通用性。我们需要再次封装一下。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">currying</span>(<span class="hljs-params">func, args</span>) &#123;<br>    <span class="hljs-comment">// 形参个数</span><br>    <span class="hljs-keyword">var</span> arity = func.<span class="hljs-built_in">length</span>;<br>    <span class="hljs-comment">// 上一次传入的参数</span><br>    <span class="hljs-keyword">var</span> args = args || [];<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// [].slice.call(arguments)能将具有length属性的对象转成数组，此处是将参数转化为数组</span><br>        <span class="hljs-keyword">var</span> _args = [].<span class="hljs-built_in">slice</span>.call(arguments);<br>        <span class="hljs-comment">// 将上次的参数与当前参数进行组合并修正传参顺序</span><br>        <span class="hljs-built_in">Array</span>.prototype.unshift.apply(_args, args);<br>        <span class="hljs-comment">// 如果参数不够，返回闭包函数继续收集参数</span><br>        <span class="hljs-keyword">if</span> (_args.<span class="hljs-built_in">length</span> &lt; arity) &#123;<br>            <span class="hljs-keyword">return</span> currying.call(<span class="hljs-literal">null</span>, func, _args);<br>        &#125;<br>        <span class="hljs-comment">// 参数够了则直接执行被转化的函数</span><br>        <span class="hljs-keyword">return</span> func.apply(<span class="hljs-literal">null</span>, _args);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>    <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br>const aaa = currying(add);<br>aaa(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>) <span class="hljs-comment">// 输出 6</span><br></code></pre></td></tr></table></figure><p>上面的例子用了<code>call</code>和<code>apply</code>来改变this指向，代码有些冗余，下面用es6来重写一下</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">currying</span><span class="hljs-params">(func, args = [])</span> &#123;<br>    let arity = func.length;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-rest_arg">..._args</span>)</span> &#123;<br>        _args.unshift(...args);<br>        <span class="hljs-keyword">if</span> (_args.length &lt; arity) &#123;<br>            <span class="hljs-keyword">return</span> currying(func, _args);<br>        &#125;<br>        <span class="hljs-keyword">return</span> func(..._args);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span><span class="hljs-params">(a, b, c)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><span class="hljs-keyword">const</span> aaa = currying(add);<br>aaa(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>) <span class="hljs-comment">// 输出 6</span><br></code></pre></td></tr></table></figure><h3 id="3、-使用场景"><a href="#3、-使用场景" class="headerlink" title="3、 使用场景"></a>3、 使用场景</h3><h4 id="3-1-参数复用"><a href="#3-1-参数复用" class="headerlink" title="3.1 参数复用"></a>3.1 参数复用</h4><p>举个例子，你有一个商店🏠，你想给你的顾客 10% 的折扣：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">discount</span>(price, discount) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">price</span> * discount<br>&#125;<br></code></pre></td></tr></table></figure><p>当一个客户买了一件价值$500的商品，你会给他：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">const</span> price = discount(<span class="hljs-number">500</span>, <span class="hljs-number">0</span>.<span class="hljs-number">10</span>); // $<span class="hljs-number">50</span> <br></code></pre></td></tr></table></figure><p>如果有其他客户分别买了价值$50，$60，$70的商品，那么则需要多次计算</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">const</span> price = discount(<span class="hljs-number">50</span>, <span class="hljs-number">0</span>.<span class="hljs-number">10</span>); // $<span class="hljs-number">5</span><br><span class="hljs-attribute">const</span> price = discount(<span class="hljs-number">60</span>, <span class="hljs-number">0</span>.<span class="hljs-number">10</span>); // $<span class="hljs-number">6</span> <br><span class="hljs-attribute">const</span> price = discount(<span class="hljs-number">700</span>, <span class="hljs-number">0</span>.<span class="hljs-number">10</span>); // $<span class="hljs-number">7</span> <br></code></pre></td></tr></table></figure><p>柯里化一下这个折扣函数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">curryDiscount</span><span class="hljs-params">(discount)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-params">(price)</span> &#123;<br>        <span class="hljs-keyword">return</span> price * <span class="hljs-number">0.1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">const</span> tenPercentDiscount = curryDiscount(<span class="hljs-number">0.1</span>);<br><span class="hljs-comment">// 接下来计算折扣只需要 tenPercentDiscount(price)</span><br></code></pre></td></tr></table></figure><h4 id="3-2-延迟计算"><a href="#3-2-延迟计算" class="headerlink" title="3.2 延迟计算"></a>3.2 延迟计算</h4><p>&#x2F;&#x2F; 暂时没找到示例</p><h4 id="3-3-提前返回"><a href="#3-3-提前返回" class="headerlink" title="3.3 提前返回"></a>3.3 提前返回</h4><p>&#x2F;&#x2F; 暂时没找到示例</p><p>参考资料：<br><a href="https://segmentfault.com/a/1190000016654033">高阶函数应用 —— 柯里化与反柯里化</a><br><a href="https://juejin.im/post/5af13664f265da0ba266efcf">大佬，JavaScript 柯里化，了解一下？</a><br><a href="https://www.zhangxinxu.com/wordpress/2013/02/js-currying/">JS中的柯里化(currying)</a><br><a href="https://zhuanlan.zhihu.com/p/50247174">「译」理解JavaScript的柯里化</a><br><a href="https://segmentfault.com/a/1190000015281061">简述几个非常有用的柯里化函数使用场景</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搞懂Javascript闭包概念</title>
    <link href="/2019/12/02/%E6%90%9E%E6%87%82Javascript%E9%97%AD%E5%8C%85%E6%A6%82%E5%BF%B5/"/>
    <url>/2019/12/02/%E6%90%9E%E6%87%82Javascript%E9%97%AD%E5%8C%85%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="1、-前言"><a href="#1、-前言" class="headerlink" title="1、 前言"></a>1、 前言</h3><p>有这么一个需求，<code>页面上有两个计数器，交互逻辑完全一模一样，但是里面的数据是完全独立的，需要实现这么一个计数器</code>。<br>如果是之前的我，肯定会在这两个计数器的触发按钮上传参，来分别判断然后实现对应的交互，但是如果使用<strong>闭包</strong>的话就会简单很多。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">counterCreator</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">var</span> index = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">counter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> index ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> counter;<br>&#125;<br> <br><span class="hljs-comment">// test</span><br><span class="hljs-keyword">var</span> counterA = counterCreator();<br><span class="hljs-keyword">var</span> counterB = counterCreator();<br>counterA();     <span class="hljs-comment">// 1</span><br>counterA();     <span class="hljs-comment">// 2</span><br>counterB();     <span class="hljs-comment">// 1</span><br>counterB();     <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h3 id="2、-什么是闭包-Closure"><a href="#2、-什么是闭包-Closure" class="headerlink" title="2、 什么是闭包(Closure)"></a>2、 什么是闭包(Closure)</h3><h4 id="2-1-闭包的概念"><a href="#2-1-闭包的概念" class="headerlink" title="2.1 闭包的概念"></a>2.1 闭包的概念</h4><p>MDN中对闭包的定义是：<strong>闭包是函数和声明该函数的词法环境的组合。</strong><br>《JavaScript高级程序设计》的描述：<strong>闭包是指有权访问另一个函数作用域中的变量的函数。</strong><br>《JavaScript权威指南》的描述： <strong>从技术的角度讲，所有的JavaScript函数都是闭包：它们都是对象，它们都关联到作用域链。</strong><br>《你不知道的JavaScript》的描述：<strong>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</strong><br>一些文章对闭包的概念解释为：<strong>能够读取其它函数内部变量的函数。</strong></p><p>下面的一段代码就是闭包的架子</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 第一种写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Closure</span>(<span class="hljs-params"></span>) &#123;<br>    let n = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">// 这里是闭包函数执行时依赖的变量，每次执行闭包函数时都能访问和修改</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// 这个函数最终会被赋值给一个变量</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 第二种写法</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(data);<br>    &#125;;<br>&#125;)(i),<br></code></pre></td></tr></table></figure><h4 id="2-2-闭包的产生"><a href="#2-2-闭包的产生" class="headerlink" title="2.2 闭包的产生"></a>2.2 闭包的产生</h4><blockquote><p>闭包的产生其实来自于js的变量作用域。在js中，变量的作用域属于函数作用域，当函数执行完成之后，作用域就会被清理，内存也就随之被回收。但是由于闭包函数是建立在函数内部的子函数，闭包函数又能够访问父函数的变量，所以就会导致当父函数执行完成时，其作用域不会销毁，该变量永久的保存在内存中直到闭包函数也不存在时才进行销毁。</p></blockquote><h3 id="3、-闭包的应用"><a href="#3、-闭包的应用" class="headerlink" title="3、 闭包的应用"></a>3、 闭包的应用</h3><ol><li><a href="https://xypecho.github.io/2019/08/08/JavaScript%E7%9A%84%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/">防抖和节流</a></li><li>柯里化</li></ol><h3 id="4、-常见的关于闭包的面试题"><a href="#4、-常见的关于闭包的面试题" class="headerlink" title="4、 常见的关于闭包的面试题"></a>4、 常见的关于闭包的面试题</h3><h4 id="4-1-for-循环中打印"><a href="#4-1-for-循环中打印" class="headerlink" title="4.1 for 循环中打印"></a>4.1 for 循环中打印</h4><p>请问输出内容是是什么？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>  setTimeout(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);<br>  &#125;, <span class="hljs-number">300</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>答案：输出都是4，js 执行的时候首先会先执行主线程,异步相关的会存到异步队列里,当主线程执行完毕开始执行异步队列, 主线程执行完毕后,此时 i 的值为 4,所以再执行异步队列的时候,打印出来的都是 4</p><p>如何修正：</p><p>1、 改为es6写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 输出 0 1 2 3</span><br>  &#125;, <span class="hljs-number">300</span>);<br>&#125;<br><br><span class="hljs-comment">// 或者可以这样写</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// 输出 0 1 2 3</span><br>    &#125;, <span class="hljs-number">300</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2、 使用闭包</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    setTimeout(<br>        (<span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);<br>            &#125;;<br>        &#125;)(i),<br>        <span class="hljs-number">300</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-为多个dom元素添加click事件"><a href="#4-2-为多个dom元素添加click事件" class="headerlink" title="4.2 为多个dom元素添加click事件"></a>4.2 为多个dom元素添加click事件</h4><p>错误写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>click1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>click2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>click3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; dom.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">        dom[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(i)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如何修正：</p><p>1、 改为es6写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; dom.<span class="hljs-property">length</span>; i++) &#123;<br>    dom[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">alert</span>(i)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、 使用闭包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; dom.<span class="hljs-property">length</span>; i++) &#123;<br>    (<span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) &#123;<br>        dom[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">alert</span>(i)<br>        &#125;<br>    &#125;)(i)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS基础知识查漏补缺</title>
    <link href="/2019/11/29/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <url>/2019/11/29/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>当初转行入门时直接上手的jquery然后就不停的写业务，学vue、react框架，基础很薄弱，于是打算记录一下平常看到的基础小知识，连载中…</p></blockquote><h2 id="1-什么是变量提升-Hoisting"><a href="#1-什么是变量提升-Hoisting" class="headerlink" title="1. 什么是变量提升(Hoisting)"></a>1. 什么是变量提升(Hoisting)</h2><details><summary>展开查看</summary><pre><code>b()  // undefinedconsole.log(a) // undefinedvar a = 'Hello world'function b() &#123;    console.log(a)&#125;</code>**函数和变量相比，会被优先提升。这意味着函数会被提升到更靠前的位置。**所以上面的栗子会输出两个undefined<p>变量提升并不是在物理层面将函数或者变量放到代码的最前面，而是在编译阶段提前在内存中为期开辟空间，变量只声明并且赋值为 undefined</p><p>es6的<code>let</code>并不是不会提前开辟空间，而是由于let的特性(报错<code>Reference Error: Cannot access &#39;a&#39; before initialization</code>)导致并不能提前使用</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Hoisting">变量提升 - 术语表 | MDN</a><br></pre></p></details><h2 id="2-call、apply-区别"><a href="#2-call、apply-区别" class="headerlink" title="2. call、apply 区别"></a>2. call、apply 区别</h2><details><summary>展开查看</summary><pre><code>let a = &#123;    value: 1&#125;function getValue(name, age) &#123;    console.log(name)    console.log(age)    console.log(this.value)    console.log(this)&#125;getValue.call(a, 'yck', '24')   // 分别输出yck 24 1 &#123;value: 1&#125;getValue.apply(a, ['yck', '24']) // 分别输出yck 24 1 &#123;value: 1&#125;getValue() // undefined undefined undefined window对象</code>call 和 apply 都是改变 this 的指向的，作用都是相同的，只是传参的方式不同。<p>除了第一个参数外，call 可以接收一个参数列表，apply 只接受一个参数数组。<br></pre></p></details><h2 id="3-如何判断数据类型"><a href="#3-如何判断数据类型" class="headerlink" title="3. 如何判断数据类型"></a>3. 如何判断数据类型</h2><details><summary>展开查看</summary><pre>在 ECMAScript 规范中，共定义了 7 种数据类型，分为 基本类型 和 引用类型 两大类，如下所示：<p>基本类型：String、Number、Boolean、Symbol、Undefined、Null<br>引用类型：Object</p><h3 id="使用typeof判断"><a href="#使用typeof判断" class="headerlink" title="使用typeof判断"></a>使用typeof判断</h3><code>typeof ''; // string 有效typeof 1; // number 有效typeof Symbol(); // symbol 有效typeof true; //boolean 有效typeof undefined; //undefined 有效typeof null; //object 无效typeof [] ; //object 无效typeof new Function(); // function 有效typeof new Date(); //object 无效typeof new RegExp(); //object 无效</code><h3 id="使用toString"><a href="#使用toString" class="headerlink" title="使用toString"></a>使用toString</h3><p>toString() 是 Object 的原型方法，调用该方法，默认返回当前对象的 [[Class]] 。这是一个内部属性，其格式为 [object Xxx] ，其中 Xxx 就是对象的类型。<br><code><br>Object.prototype.toString.call('') ;   // [object String]<br>Object.prototype.toString.call(1) ;    // [object Number]<br>Object.prototype.toString.call(true) ; // [object Boolean]<br>Object.prototype.toString.call(Symbol()); //[object Symbol]<br>Object.prototype.toString.call(undefined) ; // [object Undefined]<br>Object.prototype.toString.call(null) ; // [object Null]<br>Object.prototype.toString.call(new Function()) ; // [object Function]<br>Object.prototype.toString.call(new Date()) ; // [object Date]<br>Object.prototype.toString.call([]) ; // [object Array]<br>Object.prototype.toString.call(new RegExp()) ; // [object RegExp]<br>Object.prototype.toString.call(new Error()) ; // [object Error]<br>Object.prototype.toString.call(document) ; // [object HTMLDocument]<br>Object.prototype.toString.call(window) ; //[object global] window 是全局对象 global 的引用<br></code><br></pre></p></details><h2 id="4-x3D-x3D-和-x3D-x3D-x3D-的区别以及新增的-Object-is"><a href="#4-x3D-x3D-和-x3D-x3D-x3D-的区别以及新增的-Object-is" class="headerlink" title="4. &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别以及新增的 Object.is"></a>4. &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别以及新增的 Object.is</h2><details><summary>展开查看</summary><pre>`==`  抽象相等，比较时，会先进行隐式强制类型转换，然后再比较值`===` 严格相等，会比较两个值的类型和值ps：es6中新增了一个新的方法`Object.is()`来比较两个值严格相等，它与严格比较运算符（===）基本一致，不同之处只有两个：一是+0不等于-0，二是NaN等于自身。<h3 id="“1”-x3D-x3D-1返回true，’true’-x3D-x3D-true-为什么返回false"><a href="#“1”-x3D-x3D-1返回true，’true’-x3D-x3D-true-为什么返回false" class="headerlink" title="“1” &#x3D;&#x3D; 1返回true，’true’ &#x3D;&#x3D; true 为什么返回false?"></a>“1” &#x3D;&#x3D; 1返回true，’true’ &#x3D;&#x3D; true 为什么返回false?</h3><p>在转换不同的数据类型时，相等和不相等操作符遵循下列基本规则：</p><ol><li>如果有一个操作数是布尔值，则在比较相等性之前先将其转换为数值——false转换为0，而true转换为1；</li><li>如果一个操作数是字符串，另一个操作数是数值，在比较相等性之前先将字符串转换为数值；</li><li>如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf()方法，用得到的基本类型值按照前面的规则进行比较；</li><li>其次，NaN与任何值都不相等，包括NaN本身。<br></pre></details></li></ol><h2 id="5-什么是解构赋值"><a href="#5-什么是解构赋值" class="headerlink" title="5. 什么是解构赋值?"></a>5. 什么是解构赋值?</h2><details><summary>展开查看</summary><pre>将`=`右边的结构分解(解构)，然后按照格式给`=`左边进行赋值，主要分为数组的解构赋值和对象的解构赋值。<figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">let a<span class="hljs-punctuation">,</span>b<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span><span class="hljs-comment">;</span><br>[a<span class="hljs-punctuation">,</span>b<span class="hljs-punctuation">,</span>...<span class="hljs-keyword">c</span>]<span class="hljs-operator">=</span>[<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span><span class="hljs-punctuation">,</span><span class="hljs-number">7</span>]<span class="hljs-comment">;</span><br>console.log(a<span class="hljs-punctuation">,</span>b<span class="hljs-punctuation">,</span><span class="hljs-keyword">c</span>)<span class="hljs-comment">;//1 2  [3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><p></pre></p></details><h2 id="6-写-React-x2F-Vue-项目时为什么要在列表组件中写-key，其作用是什么？"><a href="#6-写-React-x2F-Vue-项目时为什么要在列表组件中写-key，其作用是什么？" class="headerlink" title="6. 写 React &#x2F; Vue 项目时为什么要在列表组件中写 key，其作用是什么？"></a>6. 写 React &#x2F; Vue 项目时为什么要在列表组件中写 key，其作用是什么？</h2><details><summary>展开查看</summary><pre>key 的特殊属性主要用在 Vue/React 的虚拟DOM算法，在新旧nodes对比时辨识VNodes。但是注意，不要用遍历时的index做key，容易引发[奇怪的bug](Vue2.0 v-for 中 :key 到底有什么用？ - 方应杭的回答 - 知乎https://www.zhihu.com/question/61064119/answer/766607894)。</pre></details>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用canvas实现水印功能</title>
    <link href="/2019/10/15/%E4%BD%BF%E7%94%A8canvas%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%8D%B0%E5%8A%9F%E8%83%BD/"/>
    <url>/2019/10/15/%E4%BD%BF%E7%94%A8canvas%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%8D%B0%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>切图也有两年多了，不过一直没有使用过<code>canvas</code>,最近有个上传图片增加水印的需求，正好可以试试<code>canvas</code>加水印。</p><h3 id="1、文字水印合成"><a href="#1、文字水印合成" class="headerlink" title="1、文字水印合成"></a>1、文字水印合成</h3><p>主要操作流程如下：  </p><ol><li>将需要添加水印的图片绘制到 canvas 上</li><li>将水印绘制到 canvas 上</li><li>将 canvas 的内容导出为图片</li></ol><h4 id="1-1-将图片绘制canvas上"><a href="#1-1-将图片绘制canvas上" class="headerlink" title="1.1 将图片绘制canvas上"></a>1.1 将图片绘制canvas上</h4><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs perl">const canvas = document.getElementById(<span class="hljs-string">&quot;canvas&quot;</span>);<br>const ctx = canvas.getContext(<span class="hljs-string">&quot;2d&quot;</span>);<br>const img = new Image();<br><span class="hljs-regexp">//</span> 开启跨域<br>img.crossOrigin = <span class="hljs-string">&#x27;anonymous&#x27;</span>;<br>img.src = <span class="hljs-string">&quot;https://xypecho.github.io/2019/06/24/%E6%AF%95%E4%B8%9A%E6%95%B4%E6%95%B4%E4%B8%89%E5%B9%B4%E4%BA%86/TIM%E5%9B%BE%E7%89%8720190624205011.png&quot;</span>;<br>img.onload = function () &#123;<br>    <span class="hljs-regexp">//</span> canvas自适应图片的宽高<br>    canvas.width = img.width;<br>    canvas.height = img.height;<br>    ctx.drawImage(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-regexp">//</span> 需要添加水印的图片绘制完成后调用方法watermarkedDataURL来绘制水印，第一个参数是canvas对象，第二个是文字水印<br>    watermarkedDataURL(canvas, <span class="hljs-string">&quot;It&#x27;s Mine!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-将水印图片绘制到刚刚的canvas上"><a href="#1-2-将水印图片绘制到刚刚的canvas上" class="headerlink" title="1.2 将水印图片绘制到刚刚的canvas上"></a>1.2 将水印图片绘制到刚刚的canvas上</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> watermarked<span class="hljs-constructor">DataURL(<span class="hljs-params">canvas</span>, <span class="hljs-params">text</span>)</span> &#123;<br>    const tempCanvas = document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">canvas</span>&#x27;)</span>;<br>    const tempCtx = tempCanvas.get<span class="hljs-constructor">Context(&#x27;2d&#x27;)</span>;<br>    <span class="hljs-keyword">let</span> cw, ch;<br>    cw = tempCanvas.width = canvas.width;<br>    ch = tempCanvas.height = canvas.height;<br>    tempCtx.draw<span class="hljs-constructor">Image(<span class="hljs-params">canvas</span>, 0, 0)</span>;<br>    tempCtx.font = <span class="hljs-string">&quot;24px verdana&quot;</span>;<br>    const textWidth = tempCtx.measure<span class="hljs-constructor">Text(<span class="hljs-params">text</span>)</span>.width;<br>    tempCtx.globalAlpha = .<span class="hljs-number">50</span>;<br>    tempCtx.fillStyle = &#x27;white&#x27;<br>    tempCtx.fill<span class="hljs-constructor">Text(<span class="hljs-params">text</span>, <span class="hljs-params">cw</span> - <span class="hljs-params">textWidth</span> - 10, <span class="hljs-params">ch</span> - 20)</span>;<br>    tempCtx.fillStyle = &#x27;black&#x27;<br>    tempCtx.fill<span class="hljs-constructor">Text(<span class="hljs-params">text</span>, <span class="hljs-params">cw</span> - <span class="hljs-params">textWidth</span> - 10 + 2, <span class="hljs-params">ch</span> - 20 + 2)</span>;<br>    document.body.append<span class="hljs-constructor">Child(<span class="hljs-params">tempCanvas</span>)</span>;<br>    return (tempCanvas.<span class="hljs-keyword">to</span><span class="hljs-constructor">DataURL()</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>点击<a href="https://xypecho.github.io/test/watermark/index.html">这里</a>看文字水印demo</p><h3 id="2、图片水印合成"><a href="#2、图片水印合成" class="headerlink" title="2、图片水印合成"></a>2、图片水印合成</h3><p>最开始的操作都是一样的，将要加水印的图片绘制到canvas上，然后  </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> watermarked<span class="hljs-constructor">DataURL(<span class="hljs-params">canvas</span>)</span> &#123;<br>    const tempImg = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Image()</span>;<br>    tempImg.crossOrigin = &#x27;anonymous&#x27;;<br>    tempImg.src = <span class="hljs-string">&quot;https://xypecho.github.io/test/watermark/watermark.png&quot;</span>;<br>    tempImg.onload = <span class="hljs-keyword">function</span> <span class="hljs-literal">()</span> &#123;<br>        ctx.draw<span class="hljs-constructor">Image(<span class="hljs-params">tempImg</span>, 1, 1, <span class="hljs-params">tempImg</span>.<span class="hljs-params">width</span> <span class="hljs-operator">/</span> 2, <span class="hljs-params">tempImg</span>.<span class="hljs-params">height</span> <span class="hljs-operator">/</span> 2)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击<a href="https://xypecho.github.io/test/watermark/index2.html">这里</a>看图片水印demo</p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>CSS相关</category>
      
      <category>canvas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
      <tag>JS技巧</tag>
      
      <tag>canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下mysql忘记密码的解决方法</title>
    <link href="/2019/10/12/linux%E4%B8%8Bmysql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2019/10/12/linux%E4%B8%8Bmysql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>最近自己写的一个demo项目接口经常报错500，发现原来是因为数据库密码太简单(123456~)估计被黑了，然后搜索了很久才成功重置了mysql密码，记录一下。</p><h4 id="1、更改my-cnf配置文件"><a href="#1、更改my-cnf配置文件" class="headerlink" title="1、更改my.cnf配置文件"></a>1、更改my.cnf配置文件</h4><ol><li>用命令编辑<code>/etc/my.cnf</code>配置文件，即：<code>vim /etc/my.cnf</code></li><li>在[mysqld]下添加<code>skip-grant-tables</code>，然后保存并退出</li><li>重启mysql服务：<code>service mysqld restart</code></li></ol><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="QQ图片20191012134230.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">如图</div></center><h4 id="2、修改root密码"><a href="#2、修改root密码" class="headerlink" title="2、修改root密码"></a>2、修改root密码</h4><ol><li>重启以后，执行mysql命令就可以直接进入mysql命令行</li><li>执行如下命令(是在mysql里面执行)</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">UPDATE mysql.user SET authentication_string=PASSWORD(<span class="hljs-string">&#x27;这里写新密码&#x27;</span>) where USER=<span class="hljs-string">&#x27;root&#x27;</span>;<br>flush privileges;<br><span class="hljs-keyword">exit</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>最后把我们最开始在<code>/etc/my.cnf</code>中的添加的<code>skip-grant-tables</code>删除掉，然后重启mysql，即：<code>service mysqld restart</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于URL的一些实用操作</title>
    <link href="/2019/10/11/%E5%85%B3%E4%BA%8EURL%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2019/10/11/%E5%85%B3%E4%BA%8EURL%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>最近在做项目时需要截取url中的参数，如果是以前肯定先截取<code>?</code>后面的参数然后做字符串操作，今天突发奇想在掘金上搜了一下关于url的一下操作，偶然发现了<code>URLSearchParams</code>。</p><blockquote><p>URLSearchParams 接口定义了一些实用的方法来处理 URL 的查询字符串。 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams">文档</a></p></blockquote><h3 id="1、常用的接口方法"><a href="#1、常用的接口方法" class="headerlink" title="1、常用的接口方法"></a>1、常用的接口方法</h3><h4 id="1-1-get-name-获取指定搜索参数的第一个值"><a href="#1-1-get-name-获取指定搜索参数的第一个值" class="headerlink" title="1.1 get(name) 获取指定搜索参数的第一个值"></a>1.1 get(name) 获取指定搜索参数的第一个值</h4><p>如果url参数中有两个一样的参数，他只会返回第一个。<br>例如<code>https://example.com?name=Jonathan&amp;age=18&amp;name=123</code>，如果取name的值的话只会返回’Jonathan’而不会返回123</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const url = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URL(&#x27;<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">example</span>.<span class="hljs-params">com</span>?<span class="hljs-params">name</span>=Jonathan&amp;<span class="hljs-params">age</span>=18&amp;<span class="hljs-params">name</span>=123&#x27;)</span>;<br>const params = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URLSearchParams(<span class="hljs-params">url</span>.<span class="hljs-params">search</span>)</span>;<br>console.log(params.get(&#x27;name&#x27;)) <span class="hljs-comment">// Jonathan</span><br><br><br><span class="hljs-comment">// 如果不是在本地打开而是在线上环境的话可以直接使用location.search</span><br>const params = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URLSearchParams(<span class="hljs-params">location</span>.<span class="hljs-params">search</span>)</span>;<br>console.log(params.get(&#x27;name&#x27;)) <span class="hljs-comment">// Jonathan</span><br></code></pre></td></tr></table></figure><h4 id="1-2-getAll-获取指定搜索参数的所有值，返回是一个数组"><a href="#1-2-getAll-获取指定搜索参数的所有值，返回是一个数组" class="headerlink" title="1.2 getAll() 获取指定搜索参数的所有值，返回是一个数组"></a>1.2 getAll() 获取指定搜索参数的所有值，返回是一个数组</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const url = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URL(&#x27;<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">example</span>.<span class="hljs-params">com</span>?<span class="hljs-params">name</span>=Jonathan&amp;<span class="hljs-params">age</span>=18&amp;<span class="hljs-params">name</span>=123&#x27;)</span>;<br>const params = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URLSearchParams(<span class="hljs-params">url</span>.<span class="hljs-params">search</span>)</span>;<br>console.log(params.get<span class="hljs-constructor">All(&#x27;<span class="hljs-params">name</span>&#x27;)</span>) <span class="hljs-comment">// [&quot;Jonathan&quot;, &quot;123&quot;]</span><br></code></pre></td></tr></table></figure><h4 id="1-3-append-key-value-插入一个指定的键-x2F-值对作为新的搜索参数"><a href="#1-3-append-key-value-插入一个指定的键-x2F-值对作为新的搜索参数" class="headerlink" title="1.3 append(key, value) 插入一个指定的键&#x2F;值对作为新的搜索参数"></a>1.3 append(key, value) 插入一个指定的键&#x2F;值对作为新的搜索参数</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">const</span> url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">&#x27;https://example.com&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">params</span> = <span class="hljs-keyword">new</span> URLSearchParams(url.search);<br><span class="hljs-keyword">params</span>.append(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;lilei&#x27;</span>);<br>console.log(<span class="hljs-keyword">params</span>.toString()) <span class="hljs-comment">// name=lilei</span><br>console.log(<span class="hljs-keyword">params</span>.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>)) <span class="hljs-comment">// lilei</span><br></code></pre></td></tr></table></figure><h4 id="1-4-delete-name-从搜索参数列表里删除指定的搜索参数及其对应的值"><a href="#1-4-delete-name-从搜索参数列表里删除指定的搜索参数及其对应的值" class="headerlink" title="1.4 delete(name) 从搜索参数列表里删除指定的搜索参数及其对应的值"></a>1.4 delete(name) 从搜索参数列表里删除指定的搜索参数及其对应的值</h4><p>如果搜索的参数里面有多个要删除的字段，delete时会全部删除，不会只删除第一个</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const url = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URL(&#x27;<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">example</span>.<span class="hljs-params">com</span>?<span class="hljs-params">name</span>=Jonathan&amp;<span class="hljs-params">age</span>=18&amp;<span class="hljs-params">name</span>=123&#x27;)</span>;<br>const params = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URLSearchParams(<span class="hljs-params">url</span>.<span class="hljs-params">search</span>)</span>;<br>params.delete(&#x27;name&#x27;);<br>console.log(params.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>) <span class="hljs-comment">// age=18</span><br>console.log(params.get(&#x27;name&#x27;)) <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><h4 id="1-5-has-name-返回-Boolean-判断是否存在此搜索参数"><a href="#1-5-has-name-返回-Boolean-判断是否存在此搜索参数" class="headerlink" title="1.5 has(name) 返回 Boolean 判断是否存在此搜索参数"></a>1.5 has(name) 返回 Boolean 判断是否存在此搜索参数</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const url = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URL(&#x27;<span class="hljs-params">https</span>:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">example</span>.<span class="hljs-params">com</span>?<span class="hljs-params">name</span>=Jonathan&amp;<span class="hljs-params">age</span>=18&amp;<span class="hljs-params">name</span>=123&#x27;)</span>;<br>const params = <span class="hljs-keyword">new</span> <span class="hljs-constructor">URLSearchParams(<span class="hljs-params">url</span>.<span class="hljs-params">search</span>)</span>;<br>params.has(&#x27;name&#x27;); <span class="hljs-comment">// true</span><br>params.has(&#x27;name1&#x27;); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="2、兼容性"><a href="#2、兼容性" class="headerlink" title="2、兼容性"></a>2、兼容性</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="TIM图片20191011214221.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">浏览器兼容性</div></center><p>ie并不支持这个接口，我们可以使用<code>url-search-params-polyfill</code>这个<a href="https://github.com/jerrybendy/url-search-params-polyfill/">npm包</a></p><h3 id="手写一个query函数"><a href="#手写一个query函数" class="headerlink" title="手写一个query函数"></a>手写一个query函数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">const</span> src = <span class="hljs-string">&#x27;https://www.baidu.com/?id=123&amp;name=aaa&amp;phone=12345&#x27;</span>;<br><br><span class="hljs-keyword">const</span> getQueryString = url =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (!url.includes(<span class="hljs-string">&#x27;?&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> [, search] = url.split(<span class="hljs-string">&#x27;?&#x27;</span>);<br>    <span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>    search.split(<span class="hljs-string">&#x27;&amp;&#x27;</span>).forEach(item =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (item.includes(<span class="hljs-string">&#x27;=&#x27;</span>)) &#123;<br>            <span class="hljs-keyword">const</span> [key, <span class="hljs-keyword">val</span>] = item.split(<span class="hljs-string">&#x27;=&#x27;</span>);<br>            Reflect.<span class="hljs-keyword">set</span>(obj, key, <span class="hljs-keyword">val</span>);<br>        &#125;<br>    &#125;);<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;;<br><br>getQueryString(src) <span class="hljs-comment">// &#123;id: &#x27;123&#x27;, name: &#x27;aaa&#x27;, phone: &#x27;12345&#x27;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>URL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>URL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flex最后一行左对齐</title>
    <link href="/2019/09/24/flex%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C%E5%B7%A6%E5%AF%B9%E9%BD%90/"/>
    <url>/2019/09/24/flex%E6%9C%80%E5%90%8E%E4%B8%80%E8%A1%8C%E5%B7%A6%E5%AF%B9%E9%BD%90/</url>
    
    <content type="html"><![CDATA[<h3 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h3><p>flex布局时经常遇到这样一个问题，如下图，就是如何用flex布局平均分布，又可以换行然后最后一行如果不能铺满又可以左对齐呢呢？(ps:使用空的item元素填充这个方法就不说了…)</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="QQ图片20190924132335.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><h3 id="2、左对齐的那些方法"><a href="#2、左对齐的那些方法" class="headerlink" title="2、左对齐的那些方法"></a>2、左对齐的那些方法</h3><h4 id="2-1-子元素item宽度固定即列数是固定的"><a href="#2-1-子元素item宽度固定即列数是固定的" class="headerlink" title="2.1 子元素item宽度固定即列数是固定的"></a>2.1 子元素item宽度固定即列数是固定的</h4><h5 id="2-1-1-使用-margin-right-auto"><a href="#2-1-1-使用-margin-right-auto" class="headerlink" title="2.1.1 使用 margin-right:auto"></a>2.1.1 使用 margin-right:auto</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">flex-direction</span>: row;<br>&#125;<br><br><span class="hljs-selector-class">.list</span> &#123;<br>    <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-built_in">calc</span>(<span class="hljs-number">100vw</span> / <span class="hljs-number">4</span>);<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: skyblue;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">15px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.list</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>    <span class="hljs-attribute">margin-right</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击<a href="https://xypecho.github.io/test/flex/flex1.html">看使用margin-right:auto实现左对齐</a></p><h5 id="2-1-2-手动计算子元素的-margin-right"><a href="#2-1-2-手动计算子元素的-margin-right" class="headerlink" title="2.1.2 手动计算子元素的 margin-right"></a>2.1.2 手动计算子元素的 margin-right</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;  // 手动计算则无需使用 <span class="hljs-attribute">justify-content</span>: space-between<br>&#125;<br><br><span class="hljs-selector-class">.list</span> &#123;<br>    <span class="hljs-attribute">flex</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">24%</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: skyblue;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">15px</span>;<br>&#125;<br><br>// 这个css选择器的意思是：当每行为<span class="hljs-number">4</span>个时，选择每行的前三个<br><span class="hljs-selector-class">.list</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">4</span>n)) &#123;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-built_in">calc</span>(<span class="hljs-number">4%</span> / <span class="hljs-number">3</span>); // <span class="hljs-number">4%</span> 是由上面的 <span class="hljs-number">24%</span> * <span class="hljs-number">4</span> 得来，除以<span class="hljs-number">3</span> 是因为每列显示<span class="hljs-number">4</span>个产生了<span class="hljs-number">3</span>段间距(最左边和最右边没有)<br>&#125;<br></code></pre></td></tr></table></figure><p>点击<a href="https://xypecho.github.io/test/flex/flex2.html">看手动计算子元素的 margin-right 实现的左对齐</a></p><h4 id="2-2-子元素item宽度不固定，列数是不固定"><a href="#2-2-子元素item宽度不固定，列数是不固定" class="headerlink" title="2.2 子元素item宽度不固定，列数是不固定"></a>2.2 子元素item宽度不固定，列数是不固定</h4><h5 id="2-2-1-仍可使用-margin-right-auto"><a href="#2-2-1-仍可使用-margin-right-auto" class="headerlink" title="2.2.1 仍可使用 margin-right: auto"></a>2.2.1 仍可使用 margin-right: auto</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">flex-direction</span>: row;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.list</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: skyblue;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.list</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n) &#123;<br>    <span class="hljs-attribute">background</span>: rosybrown;<br>&#125;<br><br><span class="hljs-comment">// 这个选择器相当于 .list:last-child</span><br><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">:nth-of-type</span>(<span class="hljs-number">1</span>)&gt; <span class="hljs-selector-pseudo">:last-child</span> &#123;<br>    <span class="hljs-attribute">margin-right</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-2-使用-after-伪元素"><a href="#2-2-2-使用-after-伪元素" class="headerlink" title="2.2.2 使用 after 伪元素"></a>2.2.2 使用 after 伪元素</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between;<br>    <span class="hljs-attribute">flex-wrap</span>: wrap;<br>    <span class="hljs-attribute">flex-direction</span>: row;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.list</span> &#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: skyblue;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.list</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n) &#123;<br>    <span class="hljs-attribute">background</span>: rosybrown;<br>&#125;<br><br><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">flex</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-通用的方法"><a href="#2-3-通用的方法" class="headerlink" title="2.3 通用的方法"></a>2.3 通用的方法</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.container</span><span class="hljs-selector-pseudo">:after</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">32%</span>; <span class="hljs-comment">// 如果是分三列</span><br>&#125;<br></code></pre></td></tr></table></figure><p>点击<a href="https://xypecho.github.io/test/flex/flex3.html">使用 after 伪元素实现左对齐</a></p><p>参考资料：<br><a href="https://www.zhangxinxu.com/wordpress/2019/08/css-flex-last-align/">让CSS flex布局最后一行列表左对齐的N种方法</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何备份hexo博客</title>
    <link href="/2019/08/28/%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BDhexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2019/08/28/%E5%A6%82%E4%BD%95%E5%A4%87%E4%BB%BDhexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>目前的hexo是在自己的电脑上发布的，但是有时候在公司经常需要记笔记，每次都是手写Markdown然后回家上传，这样效率太低。而且万一自己的电脑突然罢工现有的博客源码几乎找不回了，所以需要备份一下。</p><p>目前百度到的方法都是新建分支然后巴拉巴拉的，可是这样会泄漏源码，况且现在GitHub可以免费建私有仓库了，可以不必使用那种方法了。</p><h3 id="1、备份"><a href="#1、备份" class="headerlink" title="1、备份"></a>1、备份</h3><h4 id="1-1-需要备份的文件"><a href="#1-1-需要备份的文件" class="headerlink" title="1.1 需要备份的文件"></a>1.1 需要备份的文件</h4><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="TIM图片20190828223308.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">本地hexo目录结构</div></center><p>如上图，是一个完整的本地的hexo的目录结构，并不是所有文件都需要备份的，有些是hexo初始化会自动生成的，我们需要找到其中需要备份的部分。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ada">+<span class="hljs-comment">-- .deploy_git     </span><br>+<span class="hljs-comment">-- node_modules    </span><br>+<span class="hljs-comment">-- public          </span><br>+<span class="hljs-comment">-- scaffolds       文章的模板，需要拷贝</span><br>+<span class="hljs-comment">-- source          博客文章的.md文件(源码)，需要拷贝</span><br>+<span class="hljs-comment">-- themes          主题文件夹，需要拷贝</span><br>+<span class="hljs-comment">-- .gitignore      git提交时需要忽略哪些文件，需要拷贝</span><br>+<span class="hljs-comment">-- _config.yml     站点的配置文件，需要拷贝</span><br>+<span class="hljs-comment">-- db.json</span><br>+<span class="hljs-comment">-- debug.log</span><br>+<span class="hljs-comment">-- package.json    安装的包，需要拷贝</span><br>+<span class="hljs-comment">-- package-lock.json</span><br></code></pre></td></tr></table></figure><h4 id="1-2-备份"><a href="#1-2-备份" class="headerlink" title="1.2 备份"></a>1.2 备份</h4><p>目前GitHub可以免费创建私有仓库，git clone私有项目的地址，然后把上面需要备份的文件push就好了，这里的过程很简单就不详细讲解了。</p><h3 id="2、恢复"><a href="#2、恢复" class="headerlink" title="2、恢复"></a>2、恢复</h3><ol><li>目标电脑安装git</li><li>安装node.js和npm</li><li>将仓库从git克隆之本地</li><li>执行如下命令</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-cli -g<br>npm <span class="hljs-keyword">install</span><br>npm <span class="hljs-keyword">install</span> hexo-deployer-git<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx配置多项目</title>
    <link href="/2019/08/27/nginx%E9%85%8D%E7%BD%AE%E5%A4%9A%E9%A1%B9%E7%9B%AE/"/>
    <url>/2019/08/27/nginx%E9%85%8D%E7%BD%AE%E5%A4%9A%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p><a href="https://xypecho.github.io/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/">之前买云服务器部署了一个vue项目到服务器</a>，然后最近又想把写的react项目部署上去，于是开始琢磨nginx如何配置多个项目的访问。</p><h2 id="1、预期效果"><a href="#1、预期效果" class="headerlink" title="1、预期效果"></a>1、预期效果</h2><p>访问106.53.78.195&#x2F;vue 跳转到vue项目<br>访问106.53.78.195&#x2F;react 跳转到react项目</p><h2 id="2、nginx的配置"><a href="#2、nginx的配置" class="headerlink" title="2、nginx的配置"></a>2、nginx的配置</h2><h3 id="2-1-找到serve配置项"><a href="#2-1-找到serve配置项" class="headerlink" title="2.1 找到serve配置项"></a>2.1 找到serve配置项</h3><p>如果直接百度nginx相关的配置时，很多回答都让修改<code>nginx.conf</code>文件里面的<code>serve</code>配置项，but！！！直接<code>vim /etc/nginx/nginx.conf</code>进入配置文件夹是没有这个<code>serve</code>配置项的。<br>这个时候我们注意到<code>nginx.conf</code>的最后一行，</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="DVN1531@L{`NQXXLBBI36BW.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><p>看include这儿，又指向了<code>conf.d</code>这个文件夹下的 * ，然后机智的我们打开这个文件夹，果然里面有一个<code>default.conf</code>里面终于有<code>serve</code>配置项了。</p><h3 id="2-2-配置多项目"><a href="#2-2-配置多项目" class="headerlink" title="2.2 配置多项目"></a>2.2 配置多项目</h3><p>在<code>serve</code>配置项中添加如下代码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># vue项目</span><br>location <span class="hljs-regexp">/vue &#123; /</span><span class="hljs-regexp">/网页路径，例如，当前项目的完整url是  http:/</span><span class="hljs-regexp">/106.53.78.195/</span>vue/<br>    alias <span class="hljs-regexp">/project/</span>vue<span class="hljs-regexp">/fontend/</span>dist;<br>    <span class="hljs-regexp">//</span> 存储文件的路径，我当前的前端项目源码是存放在 root<span class="hljs-regexp">/project/</span>vue<span class="hljs-regexp">/fontend/</span>dist下<br>    index  index.html index.htm;<br>    <span class="hljs-regexp">//</span> 如果你的html文件名是index.html，就输入index index.html index.hml,如果你修改了首页文件名字，则对应的修改此处的文件名字<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-重启nginx"><a href="#2-3-重启nginx" class="headerlink" title="2.3 重启nginx"></a>2.3 重启nginx</h3><p>修改的配置文件夹用ftp上传到服务器后，在服务器执行<code>nginx -s reload</code>命令来重启nginx，如果没有直接重启而是报错就先执行<code>nginx</code>然后再执行<code>nginx -s reload</code>。</p><h2 id="3、项目的配置"><a href="#3、项目的配置" class="headerlink" title="3、项目的配置"></a>3、项目的配置</h2><p>配置完nginx你以为就完成了吗？(其实刚开始我也以为配置完nginx就好了( ﹁ ﹁ ) ~→)，并没有！！！</p><h3 id="3-1-vue项目的配置"><a href="#3-1-vue项目的配置" class="headerlink" title="3.1 vue项目的配置"></a>3.1 vue项目的配置</h3><ol><li>首先在<code>config</code>文件夹内的<code>index.js</code>内修改，注意是build内(ps:当前项目是基于vue-cli 2.x版本的，后续可能会更新3.x的)。</li></ol><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="TIM图片20190827222506.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><ol start="2"><li>在<code>index.html</code>的头部加上<code>&lt;meta base=/vue/&gt;</code></li></ol><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="TIM图片20190827222819.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center><ol start="3"><li>在<code>router</code>的<code>index.js</code>中修改</li></ol><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="TIM图片20190827222948.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;"></div></center>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
      <category>nginx</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目部署</tag>
      
      <tag>nginx</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript中的节流与防抖</title>
    <link href="/2019/08/08/JavaScript%E7%9A%84%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/"/>
    <url>/2019/08/08/JavaScript%E7%9A%84%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h3 id="0、前言"><a href="#0、前言" class="headerlink" title="0、前言"></a>0、前言</h3><p>之前经常在掘金的推荐文章里面看到函数防抖和函数节流相关的文章，看过之后一直没实际操作过，自然而然的也就忘了这回事。  </p><p>~~~今天在写项目时，遇到一个问题子组件监听(watch)了父组件传来的mode(是编辑还是详情)以及id(每个列表的id)来获取列表详情，可是每次都会调两遍接口。于是Google了一翻，重新了解了一下函数节流。~~~<br>其实是不需要监听’mode’和’id’的，只需要监听模态框的值即’visible’就可以。之前的思维僵化了…不过了解一下防抖和节流对开发也有很多帮助。</p><h3 id="1、函数节流-throttle"><a href="#1、函数节流-throttle" class="headerlink" title="1、函数节流(throttle)"></a>1、函数节流(throttle)</h3><h4 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h4><blockquote><p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p></blockquote><p>举个🌰：登录页面用户输完账户密码后点击登录按钮，如果ajax请求很慢然后button也没有disabled用户看到还没有跳转进首页就会烦躁的频繁点击登录按钮，然后频繁的发送ajax请求造成资源浪费。<br>这个时候就需要函数节流了，在一定时间间隔内例如3秒，用户无论点击多少次登录按钮都只会调用一次登录接口，3秒过后再次点击的话才会再次调用。同理一些商城的秒杀也是用到了节流（用户会疯狂点击）。</p><p>上面的🌰不太好理解的话再来一个：最近很火的游戏刺激战场中的自动步枪M416,无论你单身多少年，手速多块，每秒中射出的子弹的数量始终是固定的，不会因为你的手速而影响。而节流的原理就和这个类似(固定时间只执行一次，不会因为多次点击而影响)。</p><h4 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h4><ol><li>重新调整浏览器窗口大小(resize)，浏览器页面滚动(scroll)，鼠标移动(mousemove)等频繁触发的函数</li><li>用户短时间内多次快速点击</li></ol><p>使用函数节流可以降低触发频率从而降低计算的频率，而不必去浪费资源。</p><h4 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h4><h5 id="1-3-1-利用时间戳"><a href="#1-3-1-利用时间戳" class="headerlink" title="1.3.1 利用时间戳"></a>1.3.1 利用时间戳</h5><p>es5版本</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>    <span class="hljs-comment">// fn是指需要节流的函数，delay是多长时间内再次触发</span><br>    let last = +<span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        let _args = arguments;<br>        let _self = this;<br>        let <span class="hljs-built_in">now</span> = +<span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>();<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`时间过去了<span class="hljs-subst">$&#123;<span class="hljs-built_in">now</span> - last&#125;</span>毫秒`</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">now</span> - last &gt;= delay) &#123;<br>            fn.apply(_self, _args);<br>            last = +<span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br>document.querySelector(<span class="hljs-string">&#x27;#login&#x27;</span>).addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, throttle(login, <span class="hljs-number">3000</span>));<br></code></pre></td></tr></table></figure><p>点这里看<a href="https://xypecho.github.io/test/throttle/throttle1.html">利用时间戳实现的节流demo</a>。</p><p>es6版本</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const throttle = <span class="hljs-function">(<span class="hljs-params">fn, awaitTime</span>) =&gt;</span> &#123;<br>    let last = <span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>        const <span class="hljs-built_in">now</span> = <span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">now</span> - last &gt;= awaitTime) &#123;<br>            fn(...args);<br>            last = <span class="hljs-built_in">now</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 调用</span><br>const throttleScroll = throttle(test, <span class="hljs-number">3000</span>);<br>window.onscroll = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    throttleScroll(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;呆呆&#x27;</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;asd&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 需要节流的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a, b, c, d</span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a, b, c, d)<br>&#125;<br></code></pre></td></tr></table></figure><p>点这里看<a href="https://xypecho.github.io/test/throttle/throttle4.html">利用时间戳实现的节流demo(es6版)</a>。</p><h5 id="1-3-3-利用定时器"><a href="#1-3-3-利用定时器" class="headerlink" title="1.3.3 利用定时器"></a>1.3.3 利用定时器</h5><p>es5版本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> _args = <span class="hljs-variable language_">arguments</span>;<br>        <span class="hljs-keyword">let</span> _self = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">if</span> (!timer) &#123;<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                fn.<span class="hljs-title function_">apply</span>(_self, _args)<br>                timer = <span class="hljs-literal">null</span>;<br>            &#125;, delay)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用方法同上</span><br></code></pre></td></tr></table></figure><p>点这里看<a href="https://xypecho.github.io/test/throttle/throttle2.html">利用定时器实现的节流demo</a>。</p><p>es6版本</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const throttle = <span class="hljs-function"><span class="hljs-params">(fn, awaitTime)</span> =&gt;</span> &#123;<br>    let timer = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> (...args) =&gt; &#123;<br>        <span class="hljs-keyword">if</span> (!timer) &#123;<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                fn(...args);<br>                timer = <span class="hljs-literal">null</span>;<br>            &#125;, awaitTime)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-4-综合版本"><a href="#1-3-4-综合版本" class="headerlink" title="1.3.4 综合版本"></a>1.3.4 综合版本</h5><p>使用时间戳或者定时器都是可以实现节流的，但是有个缺点，就是第一次执行的时候没有立即执行而是过了一段时间。我们来优化一下代码</p><p>es5版本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throttle</span>(<span class="hljs-params">fn, delay</span>) &#123;<br>    <span class="hljs-keyword">let</span> timer, last;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> _args = <span class="hljs-variable language_">arguments</span>;<br>        <span class="hljs-keyword">let</span> _self = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">let</span> now = +<span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`时间过去了<span class="hljs-subst">$&#123;now - last&#125;</span>毫秒`</span>);<br>        <span class="hljs-keyword">if</span> (last &amp;&amp; now &lt; last + delay) &#123;<br>            <span class="hljs-built_in">clearTimeout</span>(timer)<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                fn.<span class="hljs-title function_">apply</span>(_self, _args);<br>                last = now;<br>            &#125;, delay)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            last = now;<br>            fn.<span class="hljs-title function_">apply</span>(_self, _args);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用方法同上</span><br></code></pre></td></tr></table></figure><p>点这里看<a href="https://xypecho.github.io/test/throttle/throttle3.html">时间戳和定时器综合版本的节流demo</a>。</p><p>es6版本</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const throttle = <span class="hljs-function">(<span class="hljs-params">fn, awaitTime</span>) =&gt;</span> &#123;<br>    let timer, last ;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>        const <span class="hljs-built_in">now</span> = <span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>();<br>        <span class="hljs-keyword">if</span> (last &amp;&amp; <span class="hljs-built_in">now</span> - last &lt;= awaitTime) &#123;<br>            window.clearTimeout(timer);<br>            timer = setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>                fn(...args);<br>                last = <span class="hljs-built_in">now</span>;<br>            &#125;, awaitTime)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果没有last说明是第一次触发，允许其立即执行</span><br>            fn(...args);<br>            last = <span class="hljs-built_in">now</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、函数防抖-debounce"><a href="#2、函数防抖-debounce" class="headerlink" title="2、函数防抖(debounce)"></a>2、函数防抖(debounce)</h3><h4 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h4><blockquote><p>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p></blockquote><p>举个🌰：远程搜索(联想输入)时，如果监听keyup事件用户每次按下键盘都会触发一次ajax请求，这样效率极低，使用防抖的话，当最后一次按下键盘时才会执行ajax请求。百度的搜索框：当停止连续输入后就会帮你展示一些联想词。也就用到了防抖。</p><p>来个通俗易懂的🌰：如果有人进电梯（触发事件），那电梯将在10秒钟后出发（执行事件监听器），这时如果又有人进电梯了（在10秒内再次触发该事件），我们又得等10秒再出发（重新计时）。</p><h4 id="2-2-使用场景"><a href="#2-2-使用场景" class="headerlink" title="2.2 使用场景"></a>2.2 使用场景</h4><ol><li>重新调整浏览器窗口大小(resize)，浏览器页面滚动(scroll)，鼠标移动(mousemove),键盘事件(keyup)等频繁触发的函数</li><li>远程搜索</li></ol><p>机智的小伙伴们有没有发现其实防抖和节流的使用场景是有重叠部分的，其实主要还是看业务需求来选择。</p><h4 id="2-3-代码实现"><a href="#2-3-代码实现" class="headerlink" title="2.3 代码实现"></a>2.3 代码实现</h4><h5 id="2-3-1-利用定时器"><a href="#2-3-1-利用定时器" class="headerlink" title="2.3.1 利用定时器"></a>2.3.1 利用定时器</h5><p>es5版本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">func, wait</span>) &#123;<br>    <span class="hljs-keyword">let</span> timeout;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> _self = <span class="hljs-variable language_">this</span>;<br>        <span class="hljs-keyword">let</span> _args = <span class="hljs-variable language_">arguments</span>;<br>        <span class="hljs-built_in">clearTimeout</span>(timeout)<br>        timeout = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            func.<span class="hljs-title function_">apply</span>(_self, _args)<br>        &#125;, wait);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 调用</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#container&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;mousemove&#x27;</span>, <span class="hljs-title function_">debounce</span>(getUserAction, <span class="hljs-number">1000</span>))<br></code></pre></td></tr></table></figure><p>es6版本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">debounce</span> = (<span class="hljs-params">fn, awaitTime</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> timer;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearTimeout</span>(timer);<br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">fn</span>(...args);<br>        &#125;, awaitTime)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>点这里看<a href="https://xypecho.github.io/test/debounce/debounce1.html">利用时间戳实现的防抖的demo</a>。</p><h5 id="2-3-3-优化版本"><a href="#2-3-3-优化版本" class="headerlink" title="2.3.3 优化版本"></a>2.3.3 优化版本</h5><p>和之前的节流一样，我们发现第一次并没有立即执行，也是等待停止触发事件后才执行，这样明显用户体验不好，我们也来优化一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">debounce</span> = (<span class="hljs-params">fn, awaitTime</span>) =&gt; &#123;<br>    <span class="hljs-keyword">let</span> timer, immediate = <span class="hljs-literal">true</span> <span class="hljs-comment">// immediate用来标记是否第一次执行，第一次则执行，true为第一次;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-built_in">clearTimeout</span>(timer)<br>        <span class="hljs-keyword">if</span> (immediate) &#123;<br>            <span class="hljs-title function_">fn</span>(...args);<br>            immediate = <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-title function_">fn</span>(...args);<br>            &#125;, awaitTime);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h3><p>我们来总结一下之前学到的东西：</p><ol><li><p>无论是防抖还是节流都使用了闭包的写法，这样写是为了存储setTimeout状态或者last值</p></li><li><p>es6版本比es5版本精简了很多，主要是this和arguments不需要手动改变指向</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>五年面试，三年模拟</title>
    <link href="/2019/06/25/%E4%BA%94%E5%B9%B4%E9%9D%A2%E8%AF%95%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F/"/>
    <url>/2019/06/25/%E4%BA%94%E5%B9%B4%E9%9D%A2%E8%AF%95%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录一下面试过程中遇到的一些不会的问题，并且尝试用术语化&amp;精简化的答案回答</p></blockquote><h2 id="1、-css相关"><a href="#1、-css相关" class="headerlink" title="1、 css相关"></a>1、 css相关</h2><h3 id="1-css中奇偶数的选择器"><a href="#1-css中奇偶数的选择器" class="headerlink" title="1. css中奇偶数的选择器"></a>1. css中奇偶数的选择器</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 偶数</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(even) &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-comment">// 奇数</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(odd) &#123;<br>    <span class="hljs-attribute">color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-盒模型有哪些，他们的区别是什么"><a href="#2-盒模型有哪些，他们的区别是什么" class="headerlink" title="2. 盒模型有哪些，他们的区别是什么"></a>2. 盒模型有哪些，他们的区别是什么</h3><p>目前有两种盒模型：W3C盒子模型(标准盒模型)、IE盒子模型(怪异盒模型)</p><p>区别：元素宽度和高度的计算不同(通俗点就是div的width或者height组成不同)</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">// 标准盒模型元素(div)的宽度/高度<br><span class="hljs-built_in">content</span>-<span class="hljs-built_in">box</span>为默认值，代表W3C盒模型：盒子定义宽高 = 内容宽高（<span class="hljs-built_in">content</span>）<br><br>// IE盒子模型元素(div)的宽度/高度<br><span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>代表IE盒模型：盒子定义宽高 = 内容宽高（<span class="hljs-built_in">content</span>） + 内边距 （padding）+ 边框（<span class="hljs-built_in">border</span>）<br></code></pre></td></tr></table></figure><p>如何设置这两种模型</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-comment">//通过css中的box-sizing属性</span><br><br><span class="hljs-built_in">box</span><span class="hljs-operator">-</span>sizing<span class="hljs-operator">:</span> content<span class="hljs-operator">-</span><span class="hljs-built_in">box</span>; <span class="hljs-comment">// 标准盒模型</span><br><span class="hljs-built_in">box</span><span class="hljs-operator">-</span>sizing<span class="hljs-operator">:</span> border<span class="hljs-operator">-</span><span class="hljs-built_in">box</span>; <span class="hljs-comment">// IE盒模型</span><br></code></pre></td></tr></table></figure><p><a href="https://xypecho.github.io/test/css3Demo/boxSizing.html">这个demo更好的说明了两个盒模型的区别</a></p><h3 id="3-清除浮动的几种方式"><a href="#3-清除浮动的几种方式" class="headerlink" title="3. 清除浮动的几种方式"></a>3. 清除浮动的几种方式</h3><blockquote><p>清除浮动是清除掉 “当前元素” “前面” 的 “兄弟级浮动元素” 对 “当前元素” 的影响,为了解决子元素浮动，父元素高度塌陷的问题</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-number">1</span>.父级容器设置 <span class="hljs-attribute">overflow</span>：hidden ，重新计算高度 <br><br><span class="hljs-number">2</span>.父级元素用after伪元素<br><br><span class="hljs-selector-class">.father</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-attribute">clear</span>: both;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>; <span class="hljs-comment">//高度为0且hidden让该文本彻底隐藏</span><br>    <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br><br><span class="hljs-number">3</span>.“当前元素”设置 <span class="hljs-attribute">clear</span>: both<br></code></pre></td></tr></table></figure><h3 id="4-移动端1px如何实现"><a href="#4-移动端1px如何实现" class="headerlink" title="4. 移动端1px如何实现"></a>4. 移动端1px如何实现</h3><p>为什么会出现1px的问题：css中的1px并不等于移动设备的1px</p><p>解决方案:</p><p>1.使用border-image</p><p>2.使用background-image</p><p>3.使用box-shadow模拟边框</p><p>4.使用伪元素 after</p><h3 id="5-移动端滚动穿透问题"><a href="#5-移动端滚动穿透问题" class="headerlink" title="5. 移动端滚动穿透问题"></a>5. 移动端滚动穿透问题</h3><p>问题描述：在移动端，如果出现了模态框那么点击模态框或者滚动模态框里面的列表时，模态框下面的页面也会跟着滚动</p><p>1.在模态框touchstart事件时，调用preventDefault</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">modal.add<span class="hljs-constructor">EventListener(&#x27;<span class="hljs-params">touchmove</span>&#x27;, <span class="hljs-params">function</span>(<span class="hljs-params">e</span>)</span> &#123;<br>  e.prevent<span class="hljs-constructor">Default()</span>;<br>&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>缺点：如果模态框本身有滚动条将无法滚动</p><p>2.模态框出现时，父级body{overflow:hidden}</p><h2 id="2、-js相关"><a href="#2、-js相关" class="headerlink" title="2、 js相关"></a>2、 js相关</h2><h3 id="1-js中有哪几种数据类型"><a href="#1-js中有哪几种数据类型" class="headerlink" title="1. js中有哪几种数据类型"></a>1. js中有哪几种数据类型</h3><p>最简单的问题，不过遇到还是经常漏答</p><p>一共有8种数据类型：String、Number、Boolean、Null、Undefined、Object、Symbol、<a href="https://segmentfault.com/a/1190000019912017?utm_source=tag-newest">BigInt</a>.</p><p>8种数据类型又可以分为<strong>基本类型</strong>和<strong>引用类型</strong>,Object为引用类型，其余均为基本类型.</p><p>ps:Object类型中有数组(Array)、函数(Function)以及两个特殊的对象：正则(RegExp)和日期(Date)<br>pps: 基本类型存放在栈中，引用类型存放在堆内存中</p><h3 id="2-let、var和const的区别"><a href="#2-let、var和const的区别" class="headerlink" title="2. let、var和const的区别"></a>2. let、var和const的区别</h3><p>1.var 声明的变量，在全局范围内都有效，let 和 const 声明的，只在它所在的代码块内有效</p><p>2.let 和 const 声明的变量不存在<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Hoisting">变量提升</a>现象(var 定义变量可以先使用，后声明)</p><p>3.let 不允许在相同的作用域内重复声明同一个变量(const声明对象时必须赋值，且值不允许改变，也不能在同一个作用域重复声明)</p><p>4.const 在声明时必须初始化赋值，一旦声明，其声明的值就不允许改变，更不允许重复声明</p><h3 id="3-箭头函数和普通函数的区别"><a href="#3-箭头函数和普通函数的区别" class="headerlink" title="3. 箭头函数和普通函数的区别"></a>3. 箭头函数和普通函数的区别</h3><p>1.this指向不同，普通函数的this直接调用者，没有直接调用者，this指向window；箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this</p><p>2.箭头函数没有 arguments 对象</p><h3 id="4-数组的pop-和unshift-区别"><a href="#4-数组的pop-和unshift-区别" class="headerlink" title="4. 数组的pop()和unshift()区别"></a>4. 数组的pop()和unshift()区别</h3><p>这么基础的问题…我竟然答错了</p><p>pop()删除数组的最后一个元素，并返回新数组；unshift()向数组前追加内容</p><h3 id="5-如何理解闭包"><a href="#5-如何理解闭包" class="headerlink" title="5. 如何理解闭包"></a>5. 如何理解闭包</h3><p>闭包简单来说就是函数嵌套函数(结构如下)，内部函数引用来自外部函数的变量，从而导致垃圾回收机制没有把当前变量回收掉。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">闭包的基本结构：两个嵌套的函数，内部函数通过<span class="hljs-keyword">return</span>给返回出来<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> &#123;<br>        alert(<span class="hljs-string">&quot;我是js闭包！&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> f2;<br>&#125;<br><span class="hljs-keyword">var</span> f = f1();<br>f();<br></code></pre></td></tr></table></figure><p>闭包的使用场景：ajax请求成功后的回调、防抖和节流</p><p>闭包的缺点：内存泄漏</p><p>解决方法：将闭包引用的外部函数中活动对象清除</p><h3 id="6-如果有a-b-c三个函数，c的传参需要a和b返回的结果，如何处理"><a href="#6-如果有a-b-c三个函数，c的传参需要a和b返回的结果，如何处理" class="headerlink" title="6. 如果有a,b,c三个函数，c的传参需要a和b返回的结果，如何处理"></a>6. 如果有a,b,c三个函数，c的传参需要a和b返回的结果，如何处理</h3><p>下意识的回答就是写在回调里面，不过面试官肯定不是想听到这个回答</p><p>使用promise.all</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 代码示例</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Promise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        $.ajax(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://api.imjad.cn/hitokoto/&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                resolve(res)<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Promise(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        $.ajax(&#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://api.imjad.cn/hitokoto/&#x27;</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                resolve(res)<br>            &#125;<br>        &#125;)<br>    &#125;)<br>&#125;<br><br>Promise.<span class="hljs-built_in">all</span>([ajax1(), ajax2()]).then(<span class="hljs-function"><span class="hljs-params">values</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(values)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="7-null、undefined和nan区别"><a href="#7-null、undefined和nan区别" class="headerlink" title="7. null、undefined和nan区别"></a>7. null、undefined和nan区别</h3><p>1.null表示”没有对象”，即该处不应该有值</p><p>2.undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义(变量被声明了，但没有赋值时，就等于undefined)</p><p>3.nan表示不是一个数字</p><h3 id="8-x3D-x3D-和-x3D-x3D-x3D-的区别以及新增的-Object-is"><a href="#8-x3D-x3D-和-x3D-x3D-x3D-的区别以及新增的-Object-is" class="headerlink" title="8. &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别以及新增的 Object.is"></a>8. &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; 的区别以及新增的 Object.is</h3><p><code>==</code>  抽象相等，比较时，会先进行隐式强制类型转换，然后再比较值</p><p><code>===</code> 严格相等，会比较两个值的类型和值</p><p>ps：es6中新增了一个新的方法<code>Object.is()</code>来比较两个值严格相等，它与严格比较运算符（&#x3D;&#x3D;&#x3D;）基本一致，不同之处只有两个：一是+0不等于-0，二是NaN等于自身。</p><h3 id="9-arguments对象是不是数组？以及如何转成数组"><a href="#9-arguments对象是不是数组？以及如何转成数组" class="headerlink" title="9. arguments对象是不是数组？以及如何转成数组"></a>9. arguments对象是不是数组？以及如何转成数组</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> arguments并不是一个真正的数组,而是类数组,如何证明？看如下代码，arguments没有数组的push方法<br><span class="hljs-keyword">function</span> <span class="hljs-keyword">func</span>() &#123;<br>    arguments.push(<span class="hljs-number">11</span>);<br>&#125;<br><span class="hljs-keyword">func</span>(); <span class="hljs-regexp">//</span> 报错 arguments.push is not a <span class="hljs-keyword">function</span><br></code></pre></td></tr></table></figure><p>arguments对象转成数组的几种方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一种 通过Array.prototype属性下的数组的方法</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">arguments</span>);  <span class="hljs-comment">// 或者 Array.prototype.slice.call(arguments) 或者 Array.prototype.concat.call([], arguments)</span><br><br><span class="hljs-comment">// 第二种 遍历arguments,返回数组</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i++) &#123;<br>        arr.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>[i])<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br>&#125;<br><span class="hljs-title function_">func</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-comment">// 第三种 es6新增的Array.from 方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">arguments</span>);<br>    arr.<span class="hljs-title function_">push</span>(<span class="hljs-number">444</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-常见的解决跨域的方法"><a href="#10-常见的解决跨域的方法" class="headerlink" title="10. 常见的解决跨域的方法"></a>10. 常见的解决跨域的方法</h3><p>跨域的产生是因为浏览器的’同源策略’，即协议、域名、端口有任何一个不同都会被当成不同的域，然后ajax请求就会失败</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 第一种 JSONP<br><span class="hljs-regexp">//</span> 利用 &lt;script&gt; 标签没有跨域限制的漏洞。通过 &lt;script&gt; 标签指向一个需要访问的地址并提供一个回调函数来接收数据<br>&lt;script src=<span class="hljs-string">&quot;http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp&quot;</span>&gt;&lt;/script&gt;<br>&lt;script&gt;<br>    <span class="hljs-keyword">function</span> jsonp(data) &#123;<br>    console.log(data)<br>&#125;<br>&lt;/script&gt;<br><br><span class="hljs-regexp">//</span> 第二种 proxy代理<br><span class="hljs-regexp">//</span> 又可以细分为：nginx代理跨域、webpack代理跨域<br><br><span class="hljs-regexp">//</span> 第三种 使用CORS<br><span class="hljs-regexp">//</span> 即在服务端设置响应头并返回<br>app.use(cors(&#123;<br>    origin: <span class="hljs-keyword">function</span> (ctx) &#123;<br>        <span class="hljs-keyword">if</span> (ctx.url === <span class="hljs-string">&#x27;/test&#x27;</span>) &#123;<br>            return <span class="hljs-string">&quot;*&quot;</span>; <span class="hljs-regexp">//</span> 允许来自所有域名请求<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (tool.env() === <span class="hljs-string">&#x27;production&#x27;</span>) &#123;<br>                return <span class="hljs-string">&#x27;http://106.53.78.195&#x27;</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                return <span class="hljs-string">&#x27;http://localhost:8080&#x27;</span>; <span class="hljs-regexp">//</span> 这样就能只允许 http:<span class="hljs-regexp">/ /</span> localhost: <span class="hljs-number">8080</span> 这个域名的请求了   <br>            &#125;<br>        &#125;<br>    &#125;,<br>&#125;))<br></code></pre></td></tr></table></figure><h3 id="11-请简述JavaScript中的this"><a href="#11-请简述JavaScript中的this" class="headerlink" title="11. 请简述JavaScript中的this"></a>11. 请简述JavaScript中的this</h3><p>js中this关键字表示当前对象的一个引用</p><h3 id="12-简述javascript中this的指向"><a href="#12-简述javascript中this的指向" class="headerlink" title="12. 简述javascript中this的指向"></a>12. 简述javascript中this的指向</h3><p>1.this永远指向函数运行时所在的对象</p><p>2.普通的函数调用，this指向调用对象</p><p>3.构造函数，如果不用new操作符而直接调用，那即this指向window。用new操作符生成对象实例后，this就指向了新生成的对象</p><h3 id="13-for…of和for…in区别"><a href="#13-for…of和for…in区别" class="headerlink" title="13. for…of和for…in区别"></a>13. for…of和for…in区别</h3><p>for…of是es6新增的遍历数组和对象的方法</p><p>1.for…of输出的是value，for…in输出的是key</p><p>2.for…of遍历不可迭代对象(普通对象)时会报错，for…in则可以正常输出key</p><p>3.for…in更适合遍历对象，for…of适合数组</p><p>4.for…in遍历的是对象的可枚举属性，包括对象自身及从原型链继承而来的属性;for…of遍历的是可迭代属性</p><h3 id="14-什么是事件委托-x2F-事件代理？"><a href="#14-什么是事件委托-x2F-事件代理？" class="headerlink" title="14. 什么是事件委托&#x2F;事件代理？"></a>14. 什么是事件委托&#x2F;事件代理？</h3><p>将本该绑定在多个子元素上的事件绑定到他们的祖先元素上，尤其是在动态添加子元素的时候，可以非常方便的提高程序性能，减小内存空间</p><h3 id="15-什么是事件冒泡？以及如何阻止冒泡？"><a href="#15-什么是事件冒泡？以及如何阻止冒泡？" class="headerlink" title="15. 什么是事件冒泡？以及如何阻止冒泡？"></a>15. 什么是事件冒泡？以及如何阻止冒泡？</h3><p>当某个元素的某类型事件被触发时，那么它的父元素同类型的事件也会被触发，一直触发到根源上。</p><p>如何阻止事件冒泡？调用当前事件对象的stopPropagation()方法</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">$(<span class="hljs-string">&quot;span&quot;</span>).click(<span class="hljs-keyword">function</span> <span class="hljs-title"></span>(event) &#123;<br>    event.stopPropagation();<br>    // <span class="hljs-keyword">do</span> something<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="16-防抖和节流的原理"><a href="#16-防抖和节流的原理" class="headerlink" title="16. 防抖和节流的原理"></a>16. 防抖和节流的原理</h3><p>防抖和节流的原理都是利用了闭包。</p><p>防抖的原理是使用了闭包，通过不断地记录新的定时器与清除旧的定时器，达到函数调用不断延迟，且仅调用一次的效果。</p><p>节流的原理也是使用了闭包，记录了开始时间start及每一次触发时间curr，两变量相减得到差值，当插值大于节流分片的时间时，可执行函数，同时更新start。另外通过setTImeout防止函数持续触发时间太短，没有调用函数，对于定时器也有所每次清除。</p><h3 id="17-什么是原型和原型链"><a href="#17-什么是原型和原型链" class="headerlink" title="17. 什么是原型和原型链"></a>17. 什么是原型和原型链</h3><p>什么是原型？</p><p>每个函数对象都会有一个prototype属性, 叫做原型.</p><p>什么是原型链？</p><p>查找对象属性的过程。(常说的原型链条就是 [[prototype]]链 或者 __proto__链.)</p><p><del>假设要查询对象o的属性x，如果o中不存在x，那么将会继续在o的原型对象中查询属性x。如果原型对象中也没有x，但这个原型对象也有原型，那么继续在这个原型对象的原型上执行查询，直到找到x或者查找到一个原型是null的对象为止。可以看到，对象的原型属性构成了一个”链”，通过这个”链”可以实现属性的继承。</del></p><h3 id="18-深拷贝与浅拷贝的区别"><a href="#18-深拷贝与浅拷贝的区别" class="headerlink" title="18. 深拷贝与浅拷贝的区别"></a>18. 深拷贝与浅拷贝的区别</h3><p>浅拷贝是复制,两个对象指向同一个地址;</p><p>深拷贝是新开栈,两个对象指向不同的地址</p><p>ps:Object.assign的拷贝，是对于第一层属性的拷贝，所以是浅拷贝。</p><h3 id="19-堆栈区别"><a href="#19-堆栈区别" class="headerlink" title="19. 堆栈区别"></a>19. 堆栈区别</h3><p>在js中，每一个数据都需要一个内存空间。内存空间又被分为两种，栈内存(stack)与堆内存(heap)。</p><p>1.栈内存一般储存基础数据类型；堆内存一般储存引用数据类型</p><p>2.栈会自动分配内存空间，会自动释放；堆动态分配内存，大小不定也不会自动释放</p><h3 id="20-localStorage、sessionStorage和cookie区别"><a href="#20-localStorage、sessionStorage和cookie区别" class="headerlink" title="20. localStorage、sessionStorage和cookie区别"></a>20. localStorage、sessionStorage和cookie区别</h3><table><thead><tr><th align="left">特性</th><th align="left">Cookie</th><th align="left">localStorage</th><th align="left">sessionStorage</th></tr></thead><tbody><tr><td align="left">数据的生命期</td><td align="left">一般由服务器生成，可设置失效时间。如果在浏览器端生成Cookie，默认是关闭浏览器后失效</td><td align="left">除非被清除，否则永久保存</td><td align="left">仅在当前会话下有效，关闭页面或浏览器后被清除</td></tr><tr><td align="left">存放数据大小</td><td align="left">4k左右</td><td align="left">一般为5MB</td><td align="left">一般为5MB</td></tr><tr><td align="left">与服务器端通信</td><td align="left">每次都会携带在HTTP头中</td><td align="left">不参与和服务器的通信</td><td align="left">不参与和服务器的通信</td></tr></tbody></table><h3 id="21-比较两个javaScript对象是否相等"><a href="#21-比较两个javaScript对象是否相等" class="headerlink" title="21. 比较两个javaScript对象是否相等"></a>21. 比较两个javaScript对象是否相等</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一种 使用JSON.stringify()</span><br><br><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xiaoming&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;male&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">var</span> obj2 = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;xiaoming&quot;</span>,<br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&quot;male&quot;</span><br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj1) == <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj2))   <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj1) === <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj2)) <span class="hljs-comment">// true</span><br><br>第二种 <span class="hljs-keyword">for</span> <span class="hljs-keyword">in</span>循环遍历对比<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">equals</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-comment">// 首先判断是不是引用类型的，如果有一个不是，那就进行直接判断</span><br>    <span class="hljs-keyword">var</span> f1 = x <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>;<br>    <span class="hljs-keyword">var</span> f2 = y <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>;<br>    <span class="hljs-keyword">if</span> (!f1 || !f2) &#123;<br>        <span class="hljs-keyword">return</span> x === y<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(x).<span class="hljs-property">length</span> !== <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(y).<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> newX = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(x);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> p <span class="hljs-keyword">in</span> newX) &#123;<br>        p = newX[p];<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p)<br>        <span class="hljs-keyword">var</span> a = x[p] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>;<br>        <span class="hljs-keyword">var</span> b = y[p] <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>;<br>        <span class="hljs-keyword">if</span> (a &amp;&amp; b) &#123;<br>            <span class="hljs-title function_">equals</span>(x[p], y[p])<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x[p] != y[p]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">equals</span>(obj1, obj2))<br></code></pre></td></tr></table></figure><h3 id="22-oninput和onchange区别"><a href="#22-oninput和onchange区别" class="headerlink" title="22. oninput和onchange区别"></a>22. oninput和onchange区别</h3><p>1.只有input和textarea元素才有oninput事件；而onchange可以用于input、select和textarea元素</p><p>2.input的onchange事件需要失去焦点才会触发(当鼠标在其他地方点一下才会触发);oninput事件在用户输入时触发，它是在元素值发生变化时立即触发</p><h3 id="23-如何判断一个对象是否是数组"><a href="#23-如何判断一个对象是否是数组" class="headerlink" title="23. 如何判断一个对象是否是数组"></a>23. 如何判断一个对象是否是数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 第一种 使用instanceof运算符</span><br><span class="hljs-keyword">var</span> a = [];<br>a <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>  <span class="hljs-comment">//true</span><br><br><span class="hljs-comment">// 第二种 数组方法 isArray()</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(arr) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="24-i-和-i-区别"><a href="#24-i-和-i-区别" class="headerlink" title="24. ++i 和 i++ 区别"></a>24. ++i 和 i++ 区别</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i); <span class="hljs-comment">// 输出1</span><br><br><span class="hljs-keyword">var</span> a=i++;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i); <span class="hljs-comment">//输出2</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">//输出1</span><br><br>-------------------------------------<br><br><span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);<span class="hljs-comment">// 输出1</span><br><br><span class="hljs-keyword">var</span> a=++i;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i); <span class="hljs-comment">//输出2</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a); <span class="hljs-comment">//输出2</span><br></code></pre></td></tr></table></figure><p>使用i++时，i先将自身的值赋值给变量a，然后再自增1<br>使用++i时，i先将自身的值自增1,再将自增后的值赋值给变量a</p><h3 id="25-在函数定义前输出函数会输出啥？"><a href="#25-在函数定义前输出函数会输出啥？" class="headerlink" title="25. 在函数定义前输出函数会输出啥？"></a>25. 在函数定义前输出函数会输出啥？</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(test) <br><br><span class="hljs-comment">// 输出如下内容</span><br><span class="hljs-comment">// ƒ test() &#123;</span><br><span class="hljs-comment">//   console.log(123);</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">123</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>换一种写法</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(test) <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> test = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-number">123</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么会这样，因为仅仅是将声明提升了，赋值操作并没有提升</p><h2 id="3、-vue相关"><a href="#3、-vue相关" class="headerlink" title="3、 vue相关"></a>3、 vue相关</h2><h3 id="1-vue中scope和slot-scope区别"><a href="#1-vue中scope和slot-scope区别" class="headerlink" title="1. vue中scope和slot-scope区别"></a>1. vue中scope和slot-scope区别</h3><p>这两个其实都是被废除的标签了，vue官方推荐使用 v-slot</p><p>这是用来在指定的位置输出我们的子元素的标签</p><h3 id="2-vue模版data属性里面一个对象，给该对象新增属性，视图没有更新，如何解决"><a href="#2-vue模版data属性里面一个对象，给该对象新增属性，视图没有更新，如何解决" class="headerlink" title="2. vue模版data属性里面一个对象，给该对象新增属性，视图没有更新，如何解决"></a>2. vue模版data属性里面一个对象，给该对象新增属性，视图没有更新，如何解决</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 使用this.$set, 第一个参数是需要新增属性的对象，第二个参数是新增的属性的key，第三个参数是属性对应的value</span><br><span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>(<span class="hljs-keyword">this</span>.obj, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;呆呆&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-实现一个双向绑定"><a href="#3-实现一个双向绑定" class="headerlink" title="3. 实现一个双向绑定"></a>3. 实现一个双向绑定</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> span = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;span&#x27;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> obj = &#123;&#125;;</span><br><span class="language-javascript">    <span class="hljs-comment">// 数据劫持</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 第一个参数是需要在其上定义或修改属性的对象</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 第二个参数是要定义或修改的属性的名称</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;inputText&#x27;</span>, &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可在for in 和Object.keys() 中被枚举</span></span><br><span class="language-javascript">        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否可以被删除</span></span><br><span class="language-javascript">        <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;被读取了&#x27;</span>)</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-title function_">set</span>(<span class="hljs-params">newValue</span>) &#123;</span><br><span class="language-javascript">            input.<span class="hljs-property">value</span> = newValue;</span><br><span class="language-javascript">            span.<span class="hljs-property">innerHTML</span> = newValue;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;数据更新了&#x27;</span>)</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 监听input的输入事件</span></span><br><span class="language-javascript">    input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">        obj.<span class="hljs-property">inputText</span> = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-vue的生命周期"><a href="#4-vue的生命周期" class="headerlink" title="4. vue的生命周期"></a>4. vue的生命周期</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">beforeCreate</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 实例创建前</span><br><span class="hljs-comment">// 可以在此时加一些loading效果，在created时进行移除</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-title">created</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 实例创建</span><br><span class="hljs-comment">// vue对象的属性有值了，但是DOM还没有生成</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-title">beforeMount</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 渲染DOM前</span><br><span class="hljs-comment">// data 和 $el 均已存在，但 DOM 为虚拟DOM 仍未完全加载</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-title">mounted</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 渲染DOM后</span><br><span class="hljs-comment">// 一般在这个生命周期进行ajax请求</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-title">beforeupdate</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 更新数据前</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-title">updated</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 更新数据后</span><br><span class="hljs-comment">// data属性中的数据每次更新都会触发这个生命周期</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-title">beforeDestroy</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 卸载组件前</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-title">destroyed</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 更新数据后</span><br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="5-vue第一次加载页面，会触发哪几个生命周期"><a href="#5-vue第一次加载页面，会触发哪几个生命周期" class="headerlink" title="5. vue第一次加载页面，会触发哪几个生命周期"></a>5. vue第一次加载页面，会触发哪几个生命周期</h3><p>beforeCreate、created、beforeMount、mounted</p><h3 id="6-写-React-x2F-Vue-项目时为什么要在列表组件中写-key，其作用是什么？"><a href="#6-写-React-x2F-Vue-项目时为什么要在列表组件中写-key，其作用是什么？" class="headerlink" title="6. 写 React &#x2F; Vue 项目时为什么要在列表组件中写 key，其作用是什么？"></a>6. 写 React &#x2F; Vue 项目时为什么要在列表组件中写 key，其作用是什么？</h3><p>key 的特殊属性主要用在 Vue&#x2F;React 的虚拟DOM算法，在新旧nodes对比时辨识VNodes</p><p>但是注意，不要用遍历时的index做key，容易引发<a href="https://www.zhihu.com/question/61064119/answer/766607894">奇怪的bug</a></p><h3 id="7-说说你对-SPA-单页面的理解，它的优缺点分别是什么？"><a href="#7-说说你对-SPA-单页面的理解，它的优缺点分别是什么？" class="headerlink" title="7. 说说你对 SPA 单页面的理解，它的优缺点分别是什么？"></a>7. 说说你对 SPA 单页面的理解，它的优缺点分别是什么？</h3><p>spa但页面应用是指：在页面初始化时加载相应的html、js、css，页面加载完成后，不会因为用户的操作而对页面进行跳转或重新加载</p><p>优点：用户体验好、前后端分离职责清晰</p><p>缺点：首次加载耗时长、seo难度大</p><p>如何seo：ssr服务器渲染</p><h3 id="8-操作dom与操作数据优缺点-vue和jquery优缺点"><a href="#8-操作dom与操作数据优缺点-vue和jquery优缺点" class="headerlink" title="8. 操作dom与操作数据优缺点(vue和jquery优缺点)"></a>8. 操作dom与操作数据优缺点(vue和jquery优缺点)</h3><p>1.dom操作过多会影响页面性能</p><p>2.数据双向绑定在处理表单时更方便</p><p>3.组件化的开发模式更有利于项目维护</p><h3 id="9-vue2-0-router和-route的区别"><a href="#9-vue2-0-router和-route的区别" class="headerlink" title="9. vue2.0 $router和$route的区别"></a>9. vue2.0 $router和$route的区别</h3><p>1.$router是Vue的一个实例，里面有路由的很多关键的对象和属性(例如：this.$router.push、this.$router.go等)</p><p>2.$route对象表示当前的路由信息，包含当前的路径，参数，query对象等(例如：this.$route.query.id等)</p><h3 id="10-route-params和-route-query区别"><a href="#10-route-params和-route-query区别" class="headerlink" title="10. $route.params和$route.query区别"></a>10. $route.params和$route.query区别</h3><p>1.params传参不会拼接在url上，query会</p><p>2.params刷新会丢失传参，query不会</p><h3 id="11-vue路由传参的几种方式"><a href="#11-vue路由传参的几种方式" class="headerlink" title="11. vue路由传参的几种方式"></a>11. vue路由传参的几种方式</h3><p>第一种 直接传</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 如果是多个参数   this.<span class="hljs-variable">$router</span>.push(`<span class="hljs-regexp">/uploadFileDetail/</span><span class="hljs-variable">$&#123;row.id&#125;</span><span class="hljs-variable">$&#123;row.age&#125;</span>`)<br>this.<span class="hljs-variable">$router</span>.push(`<span class="hljs-regexp">/uploadFileDetail/</span><span class="hljs-variable">$&#123;row.id&#125;</span>`);<br><br><span class="hljs-regexp">//</span> 这种形式路由文件需要配置一下,如果是多个参数  path: <span class="hljs-string">&#x27;/uploadFileDetail/:id:age&#x27;</span><br>&#123;<br>path: <span class="hljs-string">&#x27;/uploadFileDetail/:id&#x27;</span>,<br>component: resolve =&gt; require([<span class="hljs-string">&#x27;@/pages/details/uploadFileDetail&#x27;</span>], resolve),<br>name: <span class="hljs-string">&#x27;文件详情&#x27;</span><br>&#125;<br><br><span class="hljs-regexp">//</span> 取参数,this.<span class="hljs-variable">$route</span>.params是一个对象,参数以键值对形式储存<br>this.<span class="hljs-variable">$route</span>.params.id <br></code></pre></td></tr></table></figure><p>第二种 query传参(传递的参数会拼接在url上)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">this.<span class="hljs-variable">$router</span>.<span class="hljs-title function_ invoke__">push</span>(&#123;<br><span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/uploadFileDetail&quot;</span>,<br><span class="hljs-attr">query</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;呆呆的&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br>&#125;);<br><br><span class="hljs-comment">// 取参</span><br>this.<span class="hljs-variable">$route</span>.query.id<br></code></pre></td></tr></table></figure><p>第三种 params传参(params传参不会拼接在url上，刷新会丢失传参)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 这种形式就不需要path字段了，需要路由的name字段</span><br>this.<span class="hljs-variable">$router</span>.<span class="hljs-title function_ invoke__">push</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;文件详情&quot;</span>,<br><span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;呆呆的&quot;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br>&#125;);<br><br><span class="hljs-comment">// 路由配置</span><br>&#123;<br>path: <span class="hljs-string">&#x27;/uploadFileDetail&#x27;</span>,<br>component: resolve =&gt; <span class="hljs-keyword">require</span>([<span class="hljs-string">&#x27;@/pages/details/uploadFileDetail&#x27;</span>], resolve),<br>name: <span class="hljs-string">&#x27;文件详情&#x27;</span><br>&#125;<br><br><span class="hljs-comment">// 取参</span><br>this.<span class="hljs-variable">$route</span>.params<br></code></pre></td></tr></table></figure><h3 id="12-history路由和hash路由区别"><a href="#12-history路由和hash路由区别" class="headerlink" title="12. history路由和hash路由区别"></a>12. history路由和hash路由区别</h3><table><thead><tr><th align="left">对比点</th><th align="left">hash</th><th align="left">history</th></tr></thead><tbody><tr><td align="left">url显示</td><td align="left">有#，类似：<a href="http://oursite.com/#/id=123">http://oursite.com/#/id=123</a></td><td align="left">无#，类似：<a href="http://oursite.com/user/id">http://oursite.com/user/id</a></td></tr><tr><td align="left">回车刷新</td><td align="left">可以加载到hash值对应页面</td><td align="left">跳转到404</td></tr><tr><td align="left">支持版本</td><td align="left">支持低版本浏览器和IE浏览器</td><td align="left">HTML5新推出的API</td></tr><tr><td align="left">底层原理</td><td align="left">利用了onhashchange 事件</td><td align="left">history api</td></tr></tbody></table><h3 id="13-vuex的使用场景"><a href="#13-vuex的使用场景" class="headerlink" title="13. vuex的使用场景"></a>13. vuex的使用场景</h3><p>1.解决页面之间复杂数据传输的问题</p><h3 id="14-vue是双向数据流吗？为什么页面会实时更新？"><a href="#14-vue是双向数据流吗？为什么页面会实时更新？" class="headerlink" title="14. vue是双向数据流吗？为什么页面会实时更新？"></a>14. vue是双向数据流吗？为什么页面会实时更新？</h3><p>Vue是单向数据流，不是双向绑定，Vue的双向绑定不过是语法糖，Object.definePropert是用来做响应式更新的</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs hsp"><span class="hljs-comment">// 类似于</span><br>&lt;<span class="hljs-keyword">input</span> v-model=“phoneInfo.phone”/&gt;<br>&lt;<span class="hljs-keyword">input</span> :value=<span class="hljs-string">&quot;PhoneInfo.phone&quot;</span> @<span class="hljs-keyword">input</span>=<span class="hljs-string">&quot;val =&gt; &#123; PhoneInfo.phone = val &#125;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="15-computed-和-watch的区别"><a href="#15-computed-和-watch的区别" class="headerlink" title="15. computed 和 watch的区别"></a>15. computed 和 watch的区别</h3><p>1.如果一个数据依赖于其他数据，那么把这个数据设计为computed的  </p><p>2.如果你需要在某个数据变化时做一些事情，使用watch来观察这个数据变化</p><h3 id="16-描述下vuex的几个属性"><a href="#16-描述下vuex的几个属性" class="headerlink" title="16. 描述下vuex的几个属性"></a>16. 描述下vuex的几个属性</h3><p>state：vuex的基本数据，用来存储变量</p><p>getters：从基本数据(state)派生的数据，相当于state的计算属性</p><p>mutation：提交更新数据的方法，必须是同步的(如果需要异步使用action)。每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数，提交载荷作为第二个参数)</p><p>action：和mutation的功能大致相同，不同之处在于 &#x3D;&#x3D;》1. Action 提交的是 mutation，而不是直接变更状态。 2. Action 可以包含任意异步操作</p><p>modules：模块化vuex，可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。</p><h2 id="4、-react相关"><a href="#4、-react相关" class="headerlink" title="4、 react相关"></a>4、 react相关</h2><h2 id="5、-杂项"><a href="#5、-杂项" class="headerlink" title="5、 杂项"></a>5、 杂项</h2><h3 id="1-git和svn区别"><a href="#1-git和svn区别" class="headerlink" title="1. git和svn区别"></a>1. git和svn区别</h3><p>1.git是分布式的，而svn不是</p><p>2.git可以离线提交，而svn不可以</p><h3 id="2-浏览器输入网址到完成请求的整个过程"><a href="#2-浏览器输入网址到完成请求的整个过程" class="headerlink" title="2. 浏览器输入网址到完成请求的整个过程"></a>2. 浏览器输入网址到完成请求的整个过程</h3><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">1.</span>DNS域名解析（获得<span class="hljs-built_in">IP</span>地址，访问服务器）<br><br><span class="hljs-number">2</span>.建立TCP连接（三次握手）<br><br><span class="hljs-number">3</span>.发送HTTP请求<br><br><span class="hljs-number">4</span>.服务器得到并处理请求，返回HTTP报文<br><br><span class="hljs-number">5</span>.浏览器下载web服务器返回的数据及解析html源文件<br><br><span class="hljs-number">6</span>.生成DOM树，解析css和<span class="hljs-keyword">js</span>，渲染页面，直至显示完成<br></code></pre></td></tr></table></figure><h3 id="3-前端性能优化方式"><a href="#3-前端性能优化方式" class="headerlink" title="3. 前端性能优化方式"></a>3. 前端性能优化方式</h3><p>1.使用CDN(网站上静态资源即css、js、图片全都使用cdn分发)</p><p>2.使用gzip压缩内容</p><p>3.把CSS放到顶部、把JS放到底部(加载js时会对后续的资源造成阻塞，必须得等js加载完才去加载后续的文件)</p><p>4.接口缓存(如请求数据字典)</p><h3 id="4-get和post请求的区别"><a href="#4-get和post请求的区别" class="headerlink" title="4. get和post请求的区别"></a>4. get和post请求的区别</h3><p>1.get把请求的数据放在url上,post把数据放在HTTP的包体内</p><p>2.get请示的参数的数据长度是有限制，而post请求的数据长度没有限制</p><p>3.从语义上来说：get是从服务器获取数据，post是向服务器提交数据</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>毕业整整三年了...</title>
    <link href="/2019/06/24/%E6%AF%95%E4%B8%9A%E6%95%B4%E6%95%B4%E4%B8%89%E5%B9%B4%E4%BA%86/"/>
    <url>/2019/06/24/%E6%AF%95%E4%B8%9A%E6%95%B4%E6%95%B4%E4%B8%89%E5%B9%B4%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<p>&amp;#160; &amp;#160; &amp;#160; &amp;#160; 早上刚到公司，在coding之前惯例摸鱼，嗯，打开空间看到学弟学妹们晒毕业证书才发觉又到了一年一度的毕业季，点开QQ空间的那年今日时间选在2016年，看到了那年的我们(bgm：祝你一路顺风，你们自己脑补一下哈)。</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="TIM图片20190624205011.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">离开小翰林前拍的最后一张照片</div></center><h3 id="1、那逝去的…"><a href="#1、那逝去的…" class="headerlink" title="1、那逝去的…"></a>1、那逝去的…</h3><h4 id="大一"><a href="#大一" class="headerlink" title="大一"></a>大一</h4><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160; 在刚进入大学时，满脑子全是游戏，白天翘课玩游戏，晚上熬夜玩游戏(嗯，就是地下城刷图，前段时间自己的号借别人开挂被封永久了 :) )。整个大一基本全是在游戏中度过一点都没有想过未来，没有想过以后自己会从事什么样的工作。不过这也是为什么我刚毕业那会经常怀恋大学的原因了，<strong>大学的四年是人生中最爽的四年，无忧无虑，不必纠结职场的尔虞我诈，不要考虑生活的柴米油盐</strong>。</p><h4 id="大二"><a href="#大二" class="headerlink" title="大二"></a>大二</h4><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160; 然后大二，那次兼职过后，和同班的那个她在一起了。很意外，竟然是宿舍第一个脱单的，毕竟宿舍有个社团达人和学妹之友在，怎么也轮不到我啊(我才不会告诉你们是因为我们约定谁第一个脱单谁就请客的)。</p><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160; 此后的大学生活因为有了她，有了一点点的不一样。白天一起上课吃饭，晚上压马路小树林(咳咳…，画风为什么突然变的很奇♂怪)，就像每对学校的小情侣一样。第一次谈恋爱根本不知道怎么女孩子生气时说的分手只是希望你走过去抱一抱，哄一哄她，而不是真的以为是分手然后对她不理不睬。最终这段感情在大二下学期画上了句号(今年5月份看到她的结婚照时竟有些替他开心，毕竟我现在没房没车没存款，如果还和我在一起估计会耽误她把，或许吧…)。</p><h4 id="大三"><a href="#大三" class="headerlink" title="大三"></a>大三</h4><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160; 按照正常流程应该是大四出去实习，当时因为家里出了点事情于是向辅导员申请大三就出去实习。实习是在上海闵行区的一家国际物流公司做收货员？其实到现在我也不知道那个岗位应该叫啥，和一群上海的土著一起。其实这段实习经历对我后来的职业生涯并没有起到帮助不过当时我也不知道我能做什么。上午睡觉，下午2点去公司上班大概7点多的时候会有几个兼职的人过来上班，一翻聊天才得知他们白天有着一份正常的工作，下班后打两份工来补贴家用。<strong>普通人光是活着就已经竭尽全力了……</strong></p><h4 id="大四"><a href="#大四" class="headerlink" title="大四"></a>大四</h4><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160; 大四的一年和舍友们躺尸在宿舍，白天去图书馆改论文，晚上看电影玩游戏。话说，大四时社团达人舍友出去实习了，他的实习为他的职业生涯打下了夯实的基础，他是我们宿舍第一个月入过万的，也是第一个买房的，賊鸡儿羡慕。依稀记得第一个送走的是我隔壁床的小胖子，然后第二个走的是南通的小胖子，最后只剩下我和社团达人小伙伴了。上车前像平常假期分别时一样道别，坐上车后感慨那四年，泪目了(自从毕业后，我们宿舍四人还是每年一聚的不过还是很怀恋我的大学时光啊)… </p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);transform: rotate(90deg);margin-top:80px;"     src="IMG_20160622_232514_HDR.jpg">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;margin-top: 84px;">毕业前一晚上拍的翰林</div></center><h3 id="2、那现在的…"><a href="#2、那现在的…" class="headerlink" title="2、那现在的…"></a>2、那现在的…</h3><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160; 现在拿着一份不高不低的收入，做着一个不算热爱但也没那么讨厌的工作，想要踏上新的征程，却又有着很多牵绊。</p><blockquote><p>我说我们走在校园，就好像出门买个晚饭，和以前念书的时候一样，但我知道，这里没有我的宿舍了呀，我在校园跟你谈游戏谈姑娘谈考试，我出了这个校门，听到的是什么，是车是房是相亲。<br>我们未曾变化，却又变了。</p></blockquote><h3 id="3、那未来的…"><a href="#3、那未来的…" class="headerlink" title="3、那未来的…"></a>3、那未来的…</h3><p>&amp;#160; &amp;#160; &amp;#160; &amp;#160; 月入过万这应该是我目前最大的执念了吧，立一个小小的flag今年年底前，月入过万！</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react中的生命周期函数</title>
    <link href="/2019/05/20/react%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"/>
    <url>/2019/05/20/react%E4%B8%AD%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>生命周期函数是指组件在某一时刻会自动执行的函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在组件即将被第一次挂载到页面时执行，UNSAFE_componentWillMount即之前的componentWillMount，react官方修改了旧版生命周期的名字</span><br><span class="hljs-title function_">UNSAFE_componentWillMount</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// render函数是做页面的挂载操作</span><br><span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// 组件第一次挂载到页面之后执行，ajax请求一般放在这个生命周期</span><br><span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// 当一个组件从父组件接受了参数</span><br><span class="hljs-comment">// 如果这个组件第一次存在于父组件中，不会执行</span><br><span class="hljs-comment">// 如果这个组件之前已经存在于父组件中，才会执行</span><br><span class="hljs-comment">// 此生命周期可以用来监听父组件传值的props变化</span><br><span class="hljs-title function_">componentWillReceiveProps</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// 组件被更新之前执行(即组件里面的state数据发生变化)，这个生命周期需要返回一个布尔值</span><br><span class="hljs-title function_">shouldComponentUpdate</span>(<span class="hljs-params">nextProps, nextState</span>) &#123;<br>    <span class="hljs-comment">// 此处的content是该组件接受的父组件的传值(这里是随便写的)</span><br>    <span class="hljs-comment">// 这段代码的意思是，如果父组件传值发生变化才更新子组件，反正则不更新，加上这段代码能够优化性能</span><br>    <span class="hljs-keyword">if</span>(nextProps.<span class="hljs-property">content</span> !== <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">content</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 组件被更新之前执行，但是他在shouldComponentUpdate返回true之后才执行反之就不会执行</span><br><span class="hljs-title function_">componentWillUpdate</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// 组件更新完成之后执行</span><br><span class="hljs-title function_">componentDidUpdate</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// 当这个组件即将被从页面剔除的时候，会被执行</span><br><span class="hljs-title function_">componentWillUnmount</span>(<span class="hljs-params"></span>) &#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是虚拟DOM(Virtual DOM)</title>
    <link href="/2019/05/17/%E4%BB%80%E4%B9%88%E6%98%AF%E8%99%9A%E6%8B%9Fdom-Virtual-DOM/"/>
    <url>/2019/05/17/%E4%BB%80%E4%B9%88%E6%98%AF%E8%99%9A%E6%8B%9Fdom-Virtual-DOM/</url>
    
    <content type="html"><![CDATA[<h2 id="1、-先来个简单粗暴的回答"><a href="#1、-先来个简单粗暴的回答" class="headerlink" title="1、 先来个简单粗暴的回答"></a>1、 先来个简单粗暴的回答</h2><p>虚拟DOM就是一个JS对象，用他来描述真实DOM。  </p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="TIM图片20190517214018.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">JS对象描述的DOM示例</div></center><h2 id="2、官方回答"><a href="#2、官方回答" class="headerlink" title="2、官方回答"></a>2、官方回答</h2><blockquote><p>The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation.</p></blockquote><p>翻译如下：</p><blockquote><p>Virtual DOM 是一种编程概念。在这个概念里， UI 以一种理想化的，或者说“虚拟的”表现形式被保存于内存中，并通过如 ReactDOM 等类库使之与“真实的” DOM 同步。这一过程叫做协调。</p></blockquote><h2 id="3、虚拟DOM-VS-直接操作原生DOM"><a href="#3、虚拟DOM-VS-直接操作原生DOM" class="headerlink" title="3、虚拟DOM VS 直接操作原生DOM"></a>3、虚拟DOM VS 直接操作原生DOM</h2><p><strong>操作原生DOM流程</strong></p><ol><li>初始的数据</li><li>数据填充进html模版，生成真实的DOM</li><li>数据发生变化</li><li>数据填充进html模版，生成真实的DOM，替换原始的DOM</li></ol><p><strong>虚拟DOM</strong></p><ol><li>初始的数据</li><li>数据填充进html模版，生成虚拟的DOM(用JS对象来描述刚刚生成的DOM)</li><li>用虚拟的DOM结构生成真实的DOM</li><li>数据发生变化</li><li>数据填充进html模版，生成新的虚拟DOM</li><li>比较两个虚拟的DOM之间的区别，即比较两个JS对象的变化</li><li>直接操作DOM，修改有变化的DOM节点</li></ol><h2 id="4、虚拟DOM与原生DOM区别"><a href="#4、虚拟DOM与原生DOM区别" class="headerlink" title="4、虚拟DOM与原生DOM区别"></a>4、虚拟DOM与原生DOM区别</h2><ol><li>虚拟DOM不会进行排版与重绘操作</li><li>虚拟DOM进行频繁修改，然后一次性比较并修改真实DOM中需要改的部分，最后并在真实DOM中进行排版与重绘，减少过多DOM节点排版与重绘损耗</li><li>真实DOM频繁排版与重绘的效率是相当低的</li><li>虚拟DOM有效降低大面积（真实DOM节点）的重绘与排版，因为最终与真实DOM比较差异，可以只渲染局部</li></ol><h2 id="5、性能损耗"><a href="#5、性能损耗" class="headerlink" title="5、性能损耗"></a>5、性能损耗</h2><p><strong>虚拟DOM</strong><br><code>总损耗 = JS对象增删改（与Diff算法效率有关） + 真实DOM差异增删改 + 排版与重绘（较少的节点） </code></p><p><strong>真实DOM</strong><br><code>总损耗 = 真实DOM完全增删改 + 排版与重绘（较多的节点，节点较少时可能快于虚拟DOM） </code></p><p>参考资料：<br><a href="https://www.zhihu.com/question/31809713">网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？</a><br><a href="http://www.alloyteam.com/2015/10/react-virtual-analysis-of-the-dom/">React虚拟DOM浅析</a><br><a href="https://segmentfault.com/q/1010000010303981">虚拟DOM同样也是操作DOM，为啥说它快？</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>vue.js</category>
      
      <category>react.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>vue.js</tag>
      
      <tag>react.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新人写react项目时需要注意的那些事(连载中)</title>
    <link href="/2019/04/18/%E6%96%B0%E4%BA%BA%E5%86%99react%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B-%E8%BF%9E%E8%BD%BD%E4%B8%AD/"/>
    <url>/2019/04/18/%E6%96%B0%E4%BA%BA%E5%86%99react%E9%A1%B9%E7%9B%AE%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B-%E8%BF%9E%E8%BD%BD%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h3 id="0、react并不是双向绑定"><a href="#0、react并不是双向绑定" class="headerlink" title="0、react并不是双向绑定"></a>0、react并不是双向绑定</h3><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="TIM图片20190910204451.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">三大框架对比</div></center><p>所以类似<code>input</code>之类的标签没有类似<code>vue</code>的<code>v-model</code>，必须手动更新值</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">input</span> type=<span class="hljs-string">&quot;text&quot;</span> value=&#123;this<span class="hljs-selector-class">.state</span>.newToDoList&#125; onChange=&#123;(e)=&gt;this<span class="hljs-selector-class">.inputTextChange</span>(e)&#125; /&gt;<br><br><span class="hljs-function"><span class="hljs-title">inputTextChange</span><span class="hljs-params">(e)</span></span>&#123;<br>    this<span class="hljs-selector-class">.setState</span>(&#123;<br>        newToDoList: e<span class="hljs-selector-class">.target</span><span class="hljs-selector-class">.value</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1、事件绑定和传参"><a href="#1、事件绑定和传参" class="headerlink" title="1、事件绑定和传参"></a>1、事件绑定和传参</h3><p>class中默认是没有this这个对象的。所以react中的事件绑定和传参与vue有很大不同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br><br>    handleOk = <span class="hljs-function">(<span class="hljs-params">param</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 如果有参数的话则输出参数</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(param);<br>    &#125;<br><br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span>Open<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.handleClick(&#x27;showModal1&#x27;)&#125;&gt;Open<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、render根节点"><a href="#2、render根节点" class="headerlink" title="2、render根节点"></a>2、render根节点</h3><p>和vue一样，react组件最外面也必须包裹一个标签，最常见的是包裹<code>div</code>或者<code>span</code>，不过进行不必要的嵌套，无形中会增加了浏览器的渲染压力。所以可以使用React 16为我们提供的<code>Fragments</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Fragment</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Fragment</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>a<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Fragment</span>&gt;</span></span><br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、组件命令规范"><a href="#3、组件命令规范" class="headerlink" title="3、组件命令规范"></a>3、组件命令规范</h3><p>react里面import或者export的组件的名字首字母必须大写，否则会报错<code>The tag &lt;globalStyle&gt; is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.</code><br>组件命名示例<code>GlobalStyle</code></p><h3 id="4、react-img标签引入图片的几种方式"><a href="#4、react-img标签引入图片的几种方式" class="headerlink" title="4、react img标签引入图片的几种方式"></a>4、react img标签引入图片的几种方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> checkedImg <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;assets/images/checked.svg&#x27;</span>;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;checkedImg&#125;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;40&quot;</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;require(</span>&#x27;<span class="hljs-attr">.</span>/<span class="hljs-attr">..</span>/<span class="hljs-attr">assets</span>/<span class="hljs-attr">images</span>/<span class="hljs-attr">checked.svg</span>&#x27;)&#125; /&gt;</span></span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>react.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>react.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3中新增的那些计量单位</title>
    <link href="/2019/03/26/css3%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84%E9%82%A3%E4%BA%9B%E8%AE%A1%E9%87%8F%E5%8D%95%E4%BD%8D/"/>
    <url>/2019/03/26/css3%E4%B8%AD%E6%96%B0%E5%A2%9E%E7%9A%84%E9%82%A3%E4%BA%9B%E8%AE%A1%E9%87%8F%E5%8D%95%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>虽然知道css3中新增了很多计量单位，但是平常写代码时基本不太注重css之类的东西以至于都不晓得有<code>vh</code>,<code>vw</code>这种黑科技，这几天看视频教程时刚好遇到了，记录一下，方便以后使用。</p><h4 id="1、宽高的计量单位"><a href="#1、宽高的计量单位" class="headerlink" title="1、宽高的计量单位"></a>1、宽高的计量单位</h4><table><thead><tr><th align="left">单位</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">vw</td><td align="left">相对于视口的宽度。视口被均分为100单位的vw</td></tr><tr><td align="left">vh</td><td align="left">相对于视口的高度。视口被均分为100单位的vh</td></tr></tbody></table><h5 id="1-1-使用场景"><a href="#1-1-使用场景" class="headerlink" title="1.1 使用场景"></a>1.1 使用场景</h5><h6 id="1-1-1不借助js的情况下实现word文档效果"><a href="#1-1-1不借助js的情况下实现word文档效果" class="headerlink" title="1.1.1不借助js的情况下实现word文档效果"></a>1.1.1不借助js的情况下实现word文档效果</h6><p>核心代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.page</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">98vh</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">70vh</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">1vh</span> auto;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#646464</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">15px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">75</span>);<br>    <span class="hljs-attribute">box-sizing</span>: border-box;<br>    <span class="hljs-attribute">background-color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure><p>来看<a href="https://xypecho.github.io/test/css3Demo/wordDemo.html">demo</a>  </p><h4 id="2、css3原生变量var"><a href="#2、css3原生变量var" class="headerlink" title="2、css3原生变量var"></a>2、css3原生变量var</h4><blockquote><p>CSS中原生的变量定义语法是：<code>--*</code>，变量使用语法是：<code>var(--*)</code>，其中*表示我们的变量名称。</p></blockquote><h5 id="2-1-使用场景"><a href="#2-1-使用场景" class="headerlink" title="2.1 使用场景"></a>2.1 使用场景</h5><h6 id="2-1-1-改变主题色"><a href="#2-1-1-改变主题色" class="headerlink" title="2.1.1 改变主题色"></a>2.1.1 改变主题色</h6><p>核心代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>    <span class="hljs-attr">--theme-color</span>: <span class="hljs-number">#369</span>;<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">var</span>(--theme-color);<br>&#125;<br></code></pre></td></tr></table></figure><p>戳这里看<a href="https://xypecho.github.io/test/css3Demo/varDemo.html">demo</a>  </p><h6 id="2-1-2-改变字号"><a href="#2-1-2-改变字号" class="headerlink" title="2.1.2 改变字号"></a>2.1.2 改变字号</h6><p>核心代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart">:root &#123;<br>    --fontSize: <span class="hljs-number">20</span>px;<br>&#125;<br><br><span class="hljs-keyword">const</span> docStyle = <span class="hljs-built_in">document</span>.documentElement.style;<br>docStyle.setProperty(<span class="hljs-string">&#x27;--fontSize&#x27;</span>, <span class="hljs-string">&#x27;13px&#x27;</span>);<br><br> <span class="hljs-comment">// 下面是获取css变量的方法</span><br><span class="hljs-keyword">const</span> body = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;body&#x27;</span>)<br><span class="hljs-keyword">var</span> cssVarColor = getComputedStyle(body).getPropertyValue(<span class="hljs-string">&#x27;--fontSize&#x27;</span>);<br>console.log(cssVarColor)<br></code></pre></td></tr></table></figure><p>戳这里看<a href="https://xypecho.github.io/test/css3Demo/fontSizeDemo.html">demo</a>  </p><h4 id="3、em和rem"><a href="#3、em和rem" class="headerlink" title="3、em和rem"></a>3、em和rem</h4><p>这两个css3新增的单位其实我很早就知道了，不过一直很懒，也没机会用到直到最近(2020年10月29日)写移动端h5才开始接触。</p><table><thead><tr><th align="left">单位</th><th align="left">区别</th></tr></thead><tbody><tr><td align="left">em</td><td align="left">em具体数值取决于父元素，如父元素为16px，则子元素2em为2*16即32px</td></tr><tr><td align="left">rem</td><td align="left">rem具体数值取决于根元素即html，如根元素16px，不管父级为多少px，当前元素始终为rem数值*16px</td></tr></tbody></table><p>有这样一个<a href="https://xypecho.github.io/test/css3Demo/em&rem.html">demo</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">// ps如不设置根元素尺寸，则浏览器默认字体大小为16px</span><br><span class="hljs-selector-tag">html</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">32px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.div1</span>,<br><span class="hljs-selector-class">.div2</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.div1</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;<br>&#125;<br><br><span class="hljs-selector-class">.div2</span> <span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.5rem</span>;<br>&#125;<br><br>&lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&quot;div1&quot;</span>&gt;<br>    &lt;p&gt;我是em&lt;/p&gt;<br>&lt;/div&gt;<br>&lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&quot;div2&quot;</span>&gt;<br>    &lt;p&gt;我是rem&lt;/p&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>pps:在写移动端时，如果设计稿是按照iPhone6的尺寸即宽度750px来作图的，可以直接将根元素设置为100px，这样即可以直接用量出来的尺寸写css了。如果没用蓝湖等工具，也可以直接自己转换，如设计稿上font-size是28px，代码里可以直接写font-size:0.28rem。</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="TIM图片20201029230245.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">右边金色的元素宽高就可以写3.32rem和5.2rem</div></center><p>为了实现自适应各种屏幕，还需要如下js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params">doc, win</span>) &#123;<br>    <span class="hljs-comment">// 获取根元素</span><br>    <span class="hljs-keyword">var</span> docEl = doc.<span class="hljs-property">documentElement</span><br>    <span class="hljs-comment">// 判断窗口有没有orientationchange这个方法，有就赋值给一个变量，没有就返回resize方法</span><br>    <span class="hljs-keyword">var</span> resizeEvt = <span class="hljs-string">&#x27;orientationchange&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-variable language_">window</span> ? <span class="hljs-string">&#x27;orientationchange&#x27;</span> : <span class="hljs-string">&#x27;resize&#x27;</span><br>    <span class="hljs-keyword">var</span> recalc = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> clientWidth = docEl.<span class="hljs-property">clientWidth</span><br>        <span class="hljs-keyword">if</span> (!clientWidth) <span class="hljs-keyword">return</span><br>        <span class="hljs-comment">// 把document的fontSize大小设置成跟窗口成一定比例的大小，从而实现响应式效果</span><br>        docEl.<span class="hljs-property">style</span>.<span class="hljs-property">fontSize</span> = <span class="hljs-number">100</span> * (clientWidth / <span class="hljs-number">750</span>) + <span class="hljs-string">&#x27;px&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (!doc.<span class="hljs-property">addEventListener</span>) <span class="hljs-keyword">return</span><br>    <span class="hljs-comment">// addEventListener事件方法接受三个参数： //第一个是事件名称比如点击事件onclick，第二个是要执行的函数，第三个是布尔</span><br>    <span class="hljs-comment">// 绑定浏览器的缩放与加载事件</span><br>    win.<span class="hljs-title function_">addEventListener</span>(resizeEvt, recalc, <span class="hljs-literal">false</span>)<br>    doc.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, recalc, <span class="hljs-literal">false</span>)<br>&#125;)(<span class="hljs-variable language_">document</span>, <span class="hljs-variable language_">window</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>button按钮阻止双击选中文字</title>
    <link href="/2019/02/20/button%E6%8C%89%E9%92%AE%E9%98%BB%E6%AD%A2%E5%8F%8C%E5%87%BB%E9%80%89%E4%B8%AD%E6%96%87%E5%AD%97/"/>
    <url>/2019/02/20/button%E6%8C%89%E9%92%AE%E9%98%BB%E6%AD%A2%E5%8F%8C%E5%87%BB%E9%80%89%E4%B8%AD%E6%96%87%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>一般我们用<code>span</code>标签模拟按钮时总会遇到这样一种情况，<img src="/2019/02/20/button%E6%8C%89%E9%92%AE%E9%98%BB%E6%AD%A2%E5%8F%8C%E5%87%BB%E9%80%89%E4%B8%AD%E6%96%87%E5%AD%97/TIM%E5%9B%BE%E7%89%8720190220215402.png" class="">即双击按钮时会触发系统的选中文字。<br>解决方案给按钮加上<code>user-select: none;</code>这个属性。</p><p>这样就结束了吗？并没有！我们拓展一下，除了点击触发的事件以外如何让用户感知到他是实实在在的点击了按钮？当然是加上一些小动画了，来看<a href="https://xypecho.github.io/test/button.html">demo</a><br>关键代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.btn</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">0px</span>, <span class="hljs-number">5px</span>);<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">1px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span>;<br>&#125;<br><span class="hljs-selector-class">.btn</span>&#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">5px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span> <span class="hljs-number">#67C23A</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>转行二周年了哦</title>
    <link href="/2019/02/20/%E8%BD%AC%E8%A1%8C%E4%BA%8C%E5%91%A8%E5%B9%B4%E4%BA%86%E5%93%A6/"/>
    <url>/2019/02/20/%E8%BD%AC%E8%A1%8C%E4%BA%8C%E5%91%A8%E5%B9%B4%E4%BA%86%E5%93%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="写在前面的一些碎碎念"><a href="#写在前面的一些碎碎念" class="headerlink" title="写在前面的一些碎碎念"></a>写在前面的一些碎碎念</h4><p>写这篇文章前，标题就纠结了半天😂，纠结点在于是‘二周年’还是‘两周年’。二周年貌似不太顺口，两周年又感觉太口语化，emmmn于是我百度了一波游戏的周年庆发现用二周年的是大多数然后我也就用‘二周年’了蛤。</p><h4 id="职业发展"><a href="#职业发展" class="headerlink" title="职业发展"></a>职业发展</h4><p>这是我<a href="https://xypecho.github.io/2018/02/20/%E8%BD%AC%E8%A1%8C%E6%95%B4%E6%95%B4%E4%B8%80%E5%B9%B4%E4%BA%86/#%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95">一周年纪念</a>的最后一个小标题经历了一年多的工作现在有必要放到最开始谈谈。</p><h5 id="1-最俗气却是最现实的问题，转行两年工资有啥变化？"><a href="#1-最俗气却是最现实的问题，转行两年工资有啥变化？" class="headerlink" title="1.最俗气却是最现实的问题，转行两年工资有啥变化？"></a>1.最俗气却是最现实的问题，转行两年工资有啥变化？</h5><p>我转行前做销售的那半年工资基本都是2k-3k左右，最高的就是在链家了底薪3500(提成？说哈？我会告诉你们我做了3个月房产销售，一套房子都没卖出去吗？)。<br>转行做切图仔后薪资的变化是 <code>1500 =&gt; 3300 =&gt; 5000 =&gt; 6500 =&gt; 4800 =&gt; 现在(目前公司的工资暂时不能透露了蛤)</code>  。<br>除了第一家是在苏州，其余的工作均是在泰州(泰州的互联网公司很少，感觉涨幅有限)，还有工资全是靠跳槽实现增长的平均半年跳一次(感觉好浮躁)。</p><h5 id="2-转行带来的利弊？"><a href="#2-转行带来的利弊？" class="headerlink" title="2.转行带来的利弊？"></a>2.转行带来的利弊？</h5><p>先说利：  </p><ul><li>能够规划自己的职业生涯，之前做销售时每天下班就是玩游戏追剧，现在下班则是健身房加看书写项目</li><li>工资暂时能够满足自己的日出开销，可能我天生就不适合做销售把，之前做销售基本都只能拿底薪提成啥的就没拿到过</li><li>emmmm…其他想不到了,等想到再append吧</li></ul><p>再来说弊:</p><ul><li>感觉学不动了…前端技术迭代更新太快，新框架层出不穷(我17年刚转行那会还是jquery的天下，现在已经是vue、react、angular三分天下了)</li><li>日常焦虑，由于上一条的原因，如果下班后没学习，玩了一晚上的话就更焦虑了但是越焦虑就越学不进去(死锁了)</li><li>找不到女朋友…想当年在大学我可是被女生倒追的你敢信！！！现在由于职业原因，身边都没多少异性(不说了…)</li></ul><h4 id="技术长进"><a href="#技术长进" class="headerlink" title="技术长进"></a>技术长进</h4><p>刚转行时只会写静态页面，话说我刚刚找到了我写的第一个网站且目前仍然运行(本来准备把链接贴出来的，但是之前项目是CMS写的安全性很低为防止大佬们练手…)。<br>然后每天下班就看网易云课堂自学(感觉还是刚入行那会干劲足，现在每天下班感觉学习效率低了很多),记得学习路线好像是  </p><ol><li>先学最简单的html，跟着视频后面写静态页面</li><li>学jquery,当时觉得<code>hide()</code>、<code>show()</code>就能实现动画感觉就很兴奋</li><li>学完jquery才开始学原生js的，不过我原生js的课程没怎么深入(现在开始恶补基础了)</li><li>ajax交互，当时不会和后端交互因为这个面试被pass了很多次，感谢我回泰州遇到的第一位带我的师傅教会了我前后端交互</li><li>vue,当时虽然技术不咋地，但是也混迹了不少前端社区，vue在国内火的一塌糊涂然后我也跟风学了vue，也因为会vue工资直接从3300跳槽涨到了5k</li><li>然后就是现在了，在学react但是感觉明显学习激情少了很多…</li></ol><h4 id="转行后的心态"><a href="#转行后的心态" class="headerlink" title="转行后的心态"></a>转行后的心态</h4><p>其实说直白点就是<strong>庆幸还是后悔转行了？</strong>,说实话我现在也不知道转行是否是正确，如果当初没转行现在或许还在做各种各样的销售混着底薪吧(不过舍友做销售已经月入过万了)。<br>但是互联网行业竞争很激烈啊，随便搜一下转行的话题，基本都是‘三百六十行，行行转IT’啊摔！知乎这个话题下<a href="https://www.zhihu.com/question/28544155">你是如何转行的？转行容易吗？</a>基本都是转互联网了…<br>话说我自己也是因为知乎看多了才转IT的…<br>最近各大厂掀起了一股裁员潮，感觉互联网的黄金时代已经过去了，寒冬中能做的只有提升自己了。</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript中的一些骚操作</title>
    <link href="/2019/01/31/JavaScript%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
    <url>/2019/01/31/JavaScript%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="1、判断当前设备是pc端还是移动端"><a href="#1、判断当前设备是pc端还是移动端" class="headerlink" title="1、判断当前设备是pc端还是移动端"></a>1、判断当前设备是pc端还是移动端</h3><p>核心代码</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">browserRedirect</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> sUserAgent = navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">toLowerCase</span>();<br>            <span class="hljs-keyword">var</span> bIsIpad = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/ipad/i</span>) == <span class="hljs-string">&quot;ipad&quot;</span>;<br>            <span class="hljs-keyword">var</span> bIsIphoneOs = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/iphone os/i</span>) == <span class="hljs-string">&quot;iphone os&quot;</span>;<br>            <span class="hljs-keyword">var</span> bIsMidp = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/midp/i</span>) == <span class="hljs-string">&quot;midp&quot;</span>;<br>            <span class="hljs-keyword">var</span> bIsUc7 = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/rv:1.2.3.4/i</span>) == <span class="hljs-string">&quot;rv:1.2.3.4&quot;</span>;<br>            <span class="hljs-keyword">var</span> bIsUc = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/ucweb/i</span>) == <span class="hljs-string">&quot;ucweb&quot;</span>;<br>            <span class="hljs-keyword">var</span> bIsAndroid = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/android/i</span>) == <span class="hljs-string">&quot;android&quot;</span>;<br>            <span class="hljs-keyword">var</span> bIsCE = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/windows ce/i</span>) == <span class="hljs-string">&quot;windows ce&quot;</span>;<br>            <span class="hljs-keyword">var</span> bIsWM = sUserAgent.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/windows mobile/i</span>) == <span class="hljs-string">&quot;windows mobile&quot;</span>;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">writeln</span>(<span class="hljs-string">&quot;您的浏览设备为：&quot;</span>);<br>            <span class="hljs-keyword">if</span> (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) &#123;<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">writeln</span>(<span class="hljs-string">&quot;phone&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">writeln</span>(<span class="hljs-string">&quot;pc&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-title function_">browserRedirect</span>();<br></code></pre></td></tr></table></figure><p>点击这里看<a href="https://xypecho.github.io/test/judgeScreen.html">demo</a></p><h3 id="2、计算代码执行的时间"><a href="#2、计算代码执行的时间" class="headerlink" title="2、计算代码执行的时间"></a>2、计算代码执行的时间</h3><blockquote><p>你可以启动一个计时器（timer）来跟踪某一个操作的占用时长。每一个计时器必须拥有唯一的名字，页面中最多能同时运行10,000个计时器。当以此计时器名字为参数调用 console.timeEnd() 时，浏览器将以毫秒为单位，输出对应计时器所经过的时间.</p></blockquote><p>示例：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">console.time(<span class="hljs-string">&quot;sort&quot;</span>)<span class="hljs-comment">;</span><br>let arr <span class="hljs-operator">=</span> []<span class="hljs-comment">;</span><br>for (var i <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; 10000000; i++) &#123;</span><br>  arr.push(i)<span class="hljs-comment">;</span><br>&#125;<br>console.timeEnd(<span class="hljs-string">&quot;sort&quot;</span>)<span class="hljs-comment">; //sort: 268.125ms</span><br></code></pre></td></tr></table></figure><h3 id="3、搜索结果高亮显示"><a href="#3、搜索结果高亮显示" class="headerlink" title="3、搜索结果高亮显示"></a>3、搜索结果高亮显示</h3><p>用搜索工具搜索问题的时候，一般会把搜索出来的答案的关键词高亮，例如下图:</p><img src="/2019/01/31/JavaScript%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_15236114695192.png" class="">  <p>然后最近项目里面也有搜索这个功能，就想着JS能不能也实现这样的功能：‘把用户搜索的关键词在搜索结果里面高亮显示’</p><!--more--><p>下面是代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> pcontent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#word&#x27;</span>).<span class="hljs-property">innerHTML</span>;<span class="hljs-comment">//文章内容</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;inp&#x27;</span>);<span class="hljs-comment">//搜索框</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;button&#x27;</span>);<span class="hljs-comment">//按钮</span></span><br><span class="language-javascript">button.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> input_value = input.<span class="hljs-property">value</span>;<span class="hljs-comment">//搜索框里面的内容</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> key_words = pcontent.<span class="hljs-title function_">split</span>(input_value);</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#word&#x27;</span>).<span class="hljs-property">innerHTML</span> = key_words.<span class="hljs-title function_">join</span>(<span class="hljs-string">`&lt;span style=&#x27;color:red&#x27;&gt;<span class="hljs-subst">$&#123;input_value&#125;</span>&lt;/span&gt;`</span>)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>点击<a href="https://xypecho.github.io/test/highLightSearchWords.html">这里</a>看demo</p><h3 id="4、JS巧妙输出26个字母"><a href="#4、JS巧妙输出26个字母" class="headerlink" title="4、JS巧妙输出26个字母"></a>4、JS巧妙输出26个字母</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;script type<span class="hljs-operator">=</span><span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    var arr<span class="hljs-operator">=</span>[]<span class="hljs-comment">;</span><br>    for (var i <span class="hljs-operator">=</span> <span class="hljs-number">65</span><span class="hljs-comment">; i &lt;=90; i++) &#123;</span><br>        arr.push(String.fromCharCode(i).toLowerCase())<span class="hljs-comment">;</span><br>    &#125;<br>    console.log(arr)<span class="hljs-comment">;</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="5、基于浏览器的HTML5地理定位"><a href="#5、基于浏览器的HTML5地理定位" class="headerlink" title="5、基于浏览器的HTML5地理定位"></a>5、基于浏览器的HTML5地理定位</h3><p>核心代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> get<span class="hljs-constructor">Location()</span> &#123;<br>    var options = &#123;<br>        enableHighAccuracy: <span class="hljs-literal">true</span>, <span class="hljs-comment">//boolean 是否要求高精度的地理信息，默认为false</span><br>        maximumAge: <span class="hljs-number">1000</span> <span class="hljs-comment">//应用程序的缓存时间</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (navigator.geolocation) &#123;<br>        <span class="hljs-comment">//浏览器支持geolocation</span><br>        navigator.geolocation.get<span class="hljs-constructor">CurrentPosition(<span class="hljs-params">onSuccess</span>, <span class="hljs-params">onError</span>, <span class="hljs-params">options</span>)</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//浏览器不支持geolocation</span><br>        console.log(<span class="hljs-string">&quot;浏览器不支持!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>点击<a href="https://xypecho.github.io/test/browserPositioning.html">这里</a>看demo</p><h3 id="6、js生成随机数"><a href="#6、js生成随机数" class="headerlink" title="6、js生成随机数"></a>6、js生成随机数</h3><p>核心代码</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandomMumber</span>(<span class="hljs-params">size</span>) &#123;<br>    <span class="hljs-keyword">var</span> arr = [];<br>    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    arr.<span class="hljs-built_in">push</span>(i);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">65</span>; i &lt;= <span class="hljs-number">90</span>; i++) &#123;<br>    arr.<span class="hljs-built_in">push</span>(String.<span class="hljs-built_in">fromCharCode</span>(i).toLowerCase());<br>    arr.<span class="hljs-built_in">push</span>(String.<span class="hljs-built_in">fromCharCode</span>(i).toUpperCase());<br>    &#125;<br>    <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>    <span class="hljs-keyword">var</span> num = arr[Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * arr.<span class="hljs-built_in">length</span>)];<br>    str += num;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(str);<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br>getRandomMumber(<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><h3 id="7、生成指定区间的随机数"><a href="#7、生成指定区间的随机数" class="headerlink" title="7、生成指定区间的随机数"></a>7、生成指定区间的随机数</h3><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 随机数，能取到最大值</span><br><span class="hljs-comment">    * @param &#123;*&#125; min </span><br><span class="hljs-comment">    * @param &#123;*&#125; max </span><br><span class="hljs-comment">    */</span><br><span class="hljs-keyword">function</span> getRandom(<span class="hljs-built_in">min</span>, <span class="hljs-built_in">max</span>) &#123;<br>    <span class="hljs-keyword">return</span> Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">max</span> + <span class="hljs-number">1</span> - <span class="hljs-built_in">min</span>) + <span class="hljs-built_in">min</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>点击<a href="https://xypecho.github.io/test/getRandomNumber.html">这里</a>看demo</p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Native踩坑指南</title>
    <link href="/2019/01/14/React-Native%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    <url>/2019/01/14/React-Native%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="1-初次编译运行-React-Native-应用时的坑"><a href="#1-初次编译运行-React-Native-应用时的坑" class="headerlink" title="1.初次编译运行 React Native 应用时的坑"></a>1.初次编译运行 React Native 应用时的坑</h3><p>首先按照react native的<a href="https://reactnative.cn/docs/getting-started.html">中文网</a>上的说明，一步步搭建环境这边是没什么坑的，大部分都坑在<code>react-native run-android</code>真机运行这个上面。基本都是报错<code> :app:installDebug FAILED</code>,<a href="https://stackoverflow.com/questions/37500205/react-native-appinstalldebug-failed">这里</a>的答案足够解决很多问题，但是！！！如果你的尝试了google到的所有答案，都还没解决的话可以试试升级下USB驱动…我就是因为这个问题被坑了整整三天…</p><h3 id="2-项目已经安装到手机了，与电脑断开连接后如何再次连接调试"><a href="#2-项目已经安装到手机了，与电脑断开连接后如何再次连接调试" class="headerlink" title="2.项目已经安装到手机了，与电脑断开连接后如何再次连接调试"></a>2.项目已经安装到手机了，与电脑断开连接后如何再次连接调试</h3><p>首先把你的设备通过 USB 数据线连接到电脑上，并开启 USB 调试。<br>运行项目<code>react-native start</code>,<br>然后在项目的根目录打开cmd，运行<code>adb reverse tcp:8081 tcp:8081</code></p><h3 id="3-真机调试时，每次更新代码都要摇一摇手机？"><a href="#3-真机调试时，每次更新代码都要摇一摇手机？" class="headerlink" title="3.真机调试时，每次更新代码都要摇一摇手机？"></a>3.真机调试时，每次更新代码都要摇一摇手机？</h3><p>项目根目录执行<code>adb shell input keyevent 82</code>,解放你的双手</p>]]></content>
    
    
    <categories>
      
      <category>React Native</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React Native</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>收藏一些炫酷的css效果(持续更新)</title>
    <link href="/2019/01/03/%E6%94%B6%E8%97%8F%E4%B8%80%E4%BA%9B%E7%82%AB%E9%85%B7%E7%9A%84css%E6%95%88%E6%9E%9C-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <url>/2019/01/03/%E6%94%B6%E8%97%8F%E4%B8%80%E4%BA%9B%E7%82%AB%E9%85%B7%E7%9A%84css%E6%95%88%E6%9E%9C-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="css实现loading全屏加载动画"><a href="#css实现loading全屏加载动画" class="headerlink" title="css实现loading全屏加载动画"></a>css实现loading全屏加载动画</h3><img src="/2019/01/03/%E6%94%B6%E8%97%8F%E4%B8%80%E4%BA%9B%E7%82%AB%E9%85%B7%E7%9A%84css%E6%95%88%E6%9E%9C-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/TIM%E5%9B%BE%E7%89%8720190103165705.png" class=""><p>戳<a href="https://xypecho.github.io/test/loading.html">这里</a>看demo</p><h3 id="从右出来（类似翻页效果）"><a href="#从右出来（类似翻页效果）" class="headerlink" title="从右出来（类似翻页效果）"></a>从右出来（类似翻页效果）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.slider-enter-active</span>, <span class="hljs-selector-class">.slider-leave-active</span> &#123;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">5s</span>;<br>&#125;<br><span class="hljs-selector-class">.slider-enter</span>, <span class="hljs-selector-class">.slider-leave-to</span>  &#123;<br>  <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">100%</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>戳这里看<a href="https://xypecho.github.io/test/transition/transition01.html">demo</a></p><h3 id="输入框样式动画"><a href="#输入框样式动画" class="headerlink" title="输入框样式动画"></a>输入框样式动画</h3><p>输入框focus时占位文案移到输入框顶部，这是很常见的一个动画</p><p>戳这里看<a href="https://xypecho.github.io/test/transition/transition01.html">demo</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue项目打包优化</title>
    <link href="/2018/10/24/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/"/>
    <url>/2018/10/24/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前段时间腾讯云有优惠，买了个1核1G的云主机来放练手的项目，经过一波操作终于部署成功了，but首屏打开贼慢，于是来一波性能优化之旅。</p></blockquote><p>首先看看项目加载了哪些文件</p><img src="/2018/10/24/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/TIM%E5%9B%BE%E7%89%8720181024212254.png" class=""><p>打马的部分是服务器的公网ip，我们发现加载最耗时的主要是两个文件一个是首屏的大图，另一个是<code>vendor.2b23f6448b79423c7a25.js</code>这个文件。下面我们来着手优化:</p><h3 id="1、vue路由懒加载"><a href="#1、vue路由懒加载" class="headerlink" title="1、vue路由懒加载"></a>1、vue路由懒加载</h3><blockquote><p>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p></blockquote><p>路由懒加载是优化效果最明显的,因为路由的懒加载意味着<strong>当路由被访问的时候才加载对应组件，当构建的项目比较大的时候，懒加载可以分割代码块，提高页面的初始加载效率</strong>，我们先来优化路由，我们之前的路由都是下面这样的写法，这样的写法会造成进入首页时，需要加载的内容过多，时间过长，首屏长时间空白。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">export <span class="hljs-keyword">default</span> <span class="hljs-built_in">new</span> Router(&#123;<br>  routes: [<br>    &#123;<br>      <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>      redirect: <span class="hljs-string">&#x27;/recommend&#x27;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/recommend&#x27;</span>,<br>      component: recommend<br>    &#125;,<br>    &#123;<br>      <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/singer&#x27;</span>,<br>      component: singer,<br>      children: [<br>        &#123;<br>          <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;:id&#x27;</span>,<br>          component: singerDetail<br>        &#125;<br>      ]<br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>我们应当使用懒加载的写法，如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">export const normalRouter = [<br>  &#123;<br>    <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    component: <span class="hljs-keyword">login</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/index&#x27;</span>,<br>    component: resolve =&gt; require([<span class="hljs-string">&#x27;@/pages/index/index&#x27;</span>], resolve),<br>    redirect: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;首页&#x27;</span>,<br>    children: [<br>      &#123;<br>        <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>        component: resolve =&gt; require([<span class="hljs-string">&#x27;@/pages/home/home&#x27;</span>], resolve),<br>        <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;工作台&#x27;</span>,<br>        icon: <span class="hljs-string">&#x27;el-icon-menu&#x27;</span><br>      &#125;,<br>    <br>      &#123;<br>        <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/404&#x27;</span>,<br>        component: resolve =&gt; require([<span class="hljs-string">&#x27;@/components/404/404&#x27;</span>], resolve),<br>        <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;404&#x27;</span>,<br>        icon: <span class="hljs-string">&#x27;el-icon-menu&#x27;</span><br>      &#125;<br>    ]<br>  &#125;,<br>  &#123;<br>    <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>,<br>    redirect: <span class="hljs-string">&#x27;/404&#x27;</span><br>  &#125;<br>];<br></code></pre></td></tr></table></figure><p>配置完路由后，执行<code>npm run build</code>就会发现不同路由对应的组件分割成不同的代码块</p><img src="/2018/10/24/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/TIM%E5%9B%BE%E7%89%8720181024220419.png" class=""><h3 id="2、代码压缩-gzip"><a href="#2、代码压缩-gzip" class="headerlink" title="2、代码压缩(gzip)"></a>2、代码压缩(gzip)</h3><p>这个是除了路由懒加载之外，优化效果其次明显的。我们找到nginx的配置文件<code>nginx.conf</code>,在http对象中加上以下代码</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">gzip <span class="hljs-keyword">on</span>; <br>gzip_comp_level <span class="hljs-number">5</span>; <br>gzip_types <span class="hljs-built_in">text</span>/plain <span class="hljs-built_in">application</span>/javascript <span class="hljs-built_in">application</span>/x-javascript <span class="hljs-built_in">text</span>/javascript <span class="hljs-built_in">text</span>/xml <span class="hljs-built_in">text</span>/css;<br></code></pre></td></tr></table></figure><img src="/2018/10/24/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/TIM%E5%9B%BE%E7%89%8720181025211556.png" class=""><p><strong>对比最开始的图，首屏加载时间从25.89s优化到12.64s，整整快了13s</strong></p><h3 id="3、禁止vue打包生产map文件"><a href="#3、禁止vue打包生产map文件" class="headerlink" title="3、禁止vue打包生产map文件"></a>3、禁止vue打包生产map文件</h3><blockquote><p>map文件的作用：项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。有了map就可以像未加密的代码一样，准确的输出是哪一行哪一列有错。</p></blockquote><p>找到vue项目下的<code>config/index.js</code>文件，搜索到<code>productionSourceMap</code>,把后面的值改成false</p><img src="/2018/10/24/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/TIM%E5%9B%BE%E7%89%8720181025220637.png" class=""><p><strong>首屏加载时间从12.64s到6.97s</strong></p>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
      <category>性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodeJs项目部署腾讯云完整流程</title>
    <link href="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/"/>
    <url>/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>国庆死宅在家时看到腾讯云搞活动,云主机8块钱一个月，正好前段时间写了个node的后台管理系统，于是就买了3个月正好可以自己熟悉一下项目部署的全部过程。</p><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181003143442.png" class=""><h3 id="0、登陆服务器"><a href="#0、登陆服务器" class="headerlink" title="0、登陆服务器"></a>0、登陆服务器</h3><p>如果你买的主机的系统不是<code>centos 7.2</code>的话，可以跟着<a href="https://cloud.tencent.com/document/product/213/5435">腾讯云的文档</a>来一步步走，如果你是和我一样的小白，买服务器的时候用的默认配置即操作系统是<code>centos 7.2</code>的话，可以参考<a href="https://cloud.tencent.com/document/product/213/5436">这个文档</a>进行登录。<br>(ps:最开始我一直不能用windows的远程桌面登录我还一直以为是我电脑的问题，直到我提交了工单，才发现<code>centos 7.2</code>无法使用window远程桌面进行登录)</p><h3 id="1、部署node环境"><a href="#1、部署node环境" class="headerlink" title="1、部署node环境"></a>1、部署node环境</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 使用 wget 安装方式<br>wget https:<span class="hljs-regexp">//</span>nodejs.org<span class="hljs-regexp">/dist/</span>v6.<span class="hljs-number">10.3</span>/node-v6.<span class="hljs-number">10.3</span>-linux-x64.tar.xz<br><br><span class="hljs-regexp">//</span> 解压<br>tar xvJf node-v6.<span class="hljs-number">10.3</span>-linux-x64.tar.xz<br><br><span class="hljs-regexp">//</span> 将解压的 Node.js 目录移动到 <span class="hljs-regexp">/usr/</span>local 目录下<br>mv node-v6.<span class="hljs-number">10.3</span>-linux-x64 <span class="hljs-regexp">/usr/</span>local/node<br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/node/</span>bin<span class="hljs-regexp">/node /</span>bin/node<br><br><span class="hljs-regexp">//</span> 配置和使用 npm<br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/node/</span>bin<span class="hljs-regexp">/npm /</span>bin/npm<br><br><span class="hljs-regexp">//</span> 配置环境变量<br>echo <span class="hljs-string">&#x27;export PATH=/usr/local/node/bin:$PATH&#x27;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>profile<br><br><span class="hljs-regexp">//</span> 生效环境变量<br>source <span class="hljs-regexp">/etc/</span>profile<br></code></pre></td></tr></table></figure><p>然后使用命令<code>node -v</code>来测试是否安装成功,如果出现以下输出，那么恭喜你，成功配置了node环境！</p><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181003151922.png" class=""><h4 id="1-1升级node版本"><a href="#1-1升级node版本" class="headerlink" title="1.1升级node版本"></a>1.1升级node版本</h4><p>目前我们安装的node是6.x版本的，那么我们如何在linux下升级node呢？</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 安装node版本管理工具 n<br>npm install -g n<br><br><span class="hljs-regexp">//</span> 进入该文件进行编辑<br>vim ~/.bash_profile<br><br><span class="hljs-regexp">//</span> 将下面两行代码插入到文件末尾 <br>export N_PREFIX=<span class="hljs-regexp">/usr/</span>local<br>export PATH=<span class="hljs-variable">$N_PREFIX</span>/bin:<span class="hljs-variable">$PATH</span><br><br><span class="hljs-regexp">//</span> 按下esc，然后输入 <br>:wq<br><br><span class="hljs-regexp">//</span> 执行source使修改生效<br>source ~/.bash_profile<br><br><span class="hljs-regexp">//</span> 执行n模版的升级命令<br>n stable<br></code></pre></td></tr></table></figure><p>执行node -v看看，有没有成功升级</p><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181003181802.png" class=""><h3 id="2、部署Nginx"><a href="#2、部署Nginx" class="headerlink" title="2、部署Nginx"></a>2、部署Nginx</h3><p><code>Nginx</code>可能很多搞前端的小伙伴没怎么接触过(其实我也没怎么接触过…)，但是你一定经常看到这个</p><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181005142352.png" class=""><p><a href="https://juejin.im/post/5bacbd395188255c8d0fd4b2?utm_source=gold_browser_extension">Nginx与前端开发</a>这篇文章应该是一个很好的读物，介绍了Nginx。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 添加CentOS <span class="hljs-number">7</span> Nginx yum资源库<br>rpm -Uvh http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/packages/</span>centos<span class="hljs-regexp">/7/</span>noarch<span class="hljs-regexp">/RPMS/</span>nginx-release-centos-<span class="hljs-number">7</span>-<span class="hljs-number">0</span>.el7.ngx.noarch.rpm<br><br><span class="hljs-regexp">//</span> 安装nginx<br>yum install -y nginx<br><br><span class="hljs-regexp">//</span> 启动Nginx<br>systemctl start nginx.service<br></code></pre></td></tr></table></figure><p>如果你的服务器一切正常的话，你应该会看到这个页面</p><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181005155318.png" class=""><h4 id="2-1部署vue前端项目"><a href="#2-1部署vue前端项目" class="headerlink" title="2.1部署vue前端项目"></a>2.1部署vue前端项目</h4><p>接上文，我们发现nginx的首页即上图的路径是在<code>usr/share/nginx/html</code>下，于是我们把打包后的vue项目用ftp上传至该目录下。直接用ip访问试试看</p><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181022205104.jpg" class=""><p>perfect，我们完成了第一步，接下来我们来把后端代码也部署到服务器。</p><h4 id="2-2部署node后端项目"><a href="#2-2部署node后端项目" class="headerlink" title="2.2部署node后端项目"></a>2.2部署node后端项目</h4><h5 id="2-2-1ftp上传项目"><a href="#2-2-1ftp上传项目" class="headerlink" title="2.2.1ftp上传项目"></a>2.2.1ftp上传项目</h5><p>我们需要使用ftp把后端项目上传到服务器，首先在<code>/usr/local/</code>路径下新建一个<code>deployment</code>文件夹里面用来存放后端项目。</p><h5 id="2-2-2安装pm2并启动nodejs项目"><a href="#2-2-2安装pm2并启动nodejs项目" class="headerlink" title="2.2.2安装pm2并启动nodejs项目"></a>2.2.2安装pm2并启动nodejs项目</h5><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">npm install -<span class="hljs-keyword">g</span> pm2 <span class="hljs-comment">// 全局安装pm2</span><br><span class="hljs-keyword">cd</span> /usr/<span class="hljs-keyword">local</span>/deployment  <span class="hljs-comment">//进入刚刚存放后端项目的文件</span><br>pm2 start <span class="hljs-keyword">app</span>.js <span class="hljs-comment">// 启动服务</span><br></code></pre></td></tr></table></figure><p>由于我的后端项目是运行在8081端口的，首先要去腾讯云开放8081端口，</p><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181023203734.png" class=""><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181023203903.png" class=""><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181023204152.png" class=""><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181023204240.png" class=""><p>端口开放成功后，执行<code>pm2 restart all</code> 来重新启动后端项目，然后访问网站的8081端口</p><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181023204444.png" class=""><p>nice，后端也成功部署上去了，接下来就是安装mysql了。</p><h3 id="3、安装mysql"><a href="#3、安装mysql" class="headerlink" title="3、安装mysql"></a>3、安装mysql</h3><p>依次执行以下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>dev.mysql.com<span class="hljs-regexp">/get/my</span>sql57-community-release-el7-<span class="hljs-number">7</span>.noarch.rpm <span class="hljs-regexp">//</span> 下载mysql的源<br>yum localinstall -y mysql57-community-release-el7-<span class="hljs-number">7</span>.noarch.rpm <span class="hljs-regexp">//</span> 安装yum库<br>yum install -y mysql-community-server <span class="hljs-regexp">//</span> 安装MySQL<br>systemctl start mysqld.service <span class="hljs-regexp">//</span> 启动MySQL服务<br></code></pre></td></tr></table></figure><p>MySQL5.7加强了root用户的安全性，因此在第一次安装后会初始化一个随机密码，以下为查看初始随机密码的方式</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">grep <span class="hljs-string">&#x27;temporary password&#x27;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/mysqld.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>用上面查看到的随机密码登录mysql</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span> <br></code></pre></td></tr></table></figure><p>修改mysql密码方式</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">user</span>() identified <span class="hljs-keyword">by</span> &quot;123456&quot;;<br></code></pre></td></tr></table></figure><p>but,这样的密码肯定是不符合mysql的密码规则的，但是我们又不想设置多复杂的密码，那么执行以下命令就可以解决了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">set</span> <span class="hljs-keyword">global</span> validate_password_policy=<span class="hljs-number">0</span>;   <span class="hljs-comment">// 这是在mysql里面执行的哦</span><br></code></pre></td></tr></table></figure><p>然后执行如下命令授权远程链接</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;your password&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>;<br><br></code></pre></td></tr></table></figure><h3 id="4、部署后端接口"><a href="#4、部署后端接口" class="headerlink" title="4、部署后端接口"></a>4、部署后端接口</h3><p>在本地下载navicat,然后连接mysql(ps:ssh栏目的密码是服务器的密码，常规栏目的密码是mysql的密码)</p><img src="/2018/10/03/nodeJs%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%85%BE%E8%AE%AF%E4%BA%91%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/TIM%E5%9B%BE%E7%89%8720181023213926.png" class="">,这边不会的可以看看[这篇文章](https://blog.csdn.net/fenfei12138/article/details/49661879)<p>然后打开网站发现…终于部署上去了。</p>]]></content>
    
    
    <categories>
      
      <category>项目部署</category>
      
      <category>node.js</category>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目部署</tag>
      
      <tag>linux</tag>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组对象如何去重</title>
    <link href="/2018/09/27/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%A6%82%E4%BD%95%E5%8E%BB%E9%87%8D/"/>
    <url>/2018/09/27/%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%E5%A6%82%E4%BD%95%E5%8E%BB%E9%87%8D/</url>
    
    <content type="html"><![CDATA[<p>好久没更新博客，因为自从跳槽到现在的公司一直很忙，最关键技术栈竟然变成了jquery + bootstrap！！！很多代码封装无力，做了很多重复的活！！！<br>好了，不吐槽了，转到今天的主题，如何给数组对象去重,举个栗子:</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">[<br>&#123;<span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;test&#x27;</span>,age:<span class="hljs-number">12</span>&#125;,<br>&#123;<span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;test1&#x27;</span>,age:<span class="hljs-number">13</span>&#125;,<br>&#123;<span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;test2&#x27;</span>,age:<span class="hljs-number">14</span>&#125;,<br>&#123;<span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;test&#x27;</span>,age:<span class="hljs-number">12</span>&#125;<br>]<br><span class="hljs-comment">// 需要将上面的数组对象去重</span><br></code></pre></td></tr></table></figure><h3 id="0、利用Lodash中的uniqWith方法去重"><a href="#0、利用Lodash中的uniqWith方法去重" class="headerlink" title="0、利用Lodash中的uniqWith方法去重"></a>0、利用Lodash中的uniqWith方法去重</h3><p><a href="https://www.lodashjs.com/">Lodash</a>是一套工具库，内部封装了很多字符串、数组、对象等常见数据类型的处理函数。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let arr = [<br>&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;test&#x27;</span>, age: <span class="hljs-number">12</span> &#125;,<br>&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;test1&#x27;</span>, age: <span class="hljs-number">13</span> &#125;,<br>&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">14</span> &#125;,<br>&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">15</span> &#125;,<br>&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;test&#x27;</span>, age: <span class="hljs-number">12</span> &#125;<br>];<br>console.log(arr);<br><br>console.log(_.uniqWith(arr, _.isEqual));//[&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;test&#x27;</span>, age: <span class="hljs-number">12</span> &#125;,&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;test1&#x27;</span>, age: <span class="hljs-number">13</span> &#125;,&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">14</span> &#125;,&#123; <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">15</span> &#125;];<br></code></pre></td></tr></table></figure><h3 id="1、for循环去重"><a href="#1、for循环去重" class="headerlink" title="1、for循环去重"></a>1、for循环去重</h3><p>这个应该是最基础的，也是很多人最先想到的给数组对象去重的方法</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span> arr = [<br>&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test&#x27;</span>, age: <span class="hljs-number">12</span> &#125;,<br>&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test1&#x27;</span>, age: <span class="hljs-number">13</span> &#125;,<br>&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">14</span> &#125;,<br>&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">15</span> &#125;,<br>&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test&#x27;</span>, age: <span class="hljs-number">12</span> &#125;<br>];<br><span class="hljs-keyword">let</span> newArr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br><span class="hljs-keyword">let</span> tag =<span class="hljs-built_in"> true</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">0</span>; j &lt; newArr.length; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[i]<span class="hljs-built_in">.name</span> == newArr[j]<span class="hljs-built_in">.name</span> &amp;&amp; arr[i].age == newArr[j].age) &#123;<br>tag =<span class="hljs-built_in"> false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (tag) &#123;<br>newArr.push(arr[i]);<br>&#125;<br>&#125;<br>console.log(newArr); // [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test&#x27;</span>, age: <span class="hljs-number">12</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test1&#x27;</span>, age: <span class="hljs-number">13</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">14</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">15</span> &#125;];<br></code></pre></td></tr></table></figure><h3 id="2、利用JSON-stringify这个方法来字符串化数组里面的值，从而比较字符串来实现去重"><a href="#2、利用JSON-stringify这个方法来字符串化数组里面的值，从而比较字符串来实现去重" class="headerlink" title="2、利用JSON.stringify这个方法来字符串化数组里面的值，从而比较字符串来实现去重"></a>2、利用JSON.stringify这个方法来字符串化数组里面的值，从而比较字符串来实现去重</h3><p>经过测试发现JSON.stringify后的<code>&#123; name: &#39;test&#39;, age: 12 &#125;</code>,<code>&#123; age: 12, name: &#39;test&#39; &#125;</code>值虽然不同，但显然他们是一样的对象，所以这个方法有bug，慎用！！！</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">let</span> arr = [<br>&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test&#x27;</span>, age: <span class="hljs-number">12</span> &#125;,<br>&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test1&#x27;</span>, age: <span class="hljs-number">13</span> &#125;,<br>&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">14</span> &#125;,<br>&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">15</span> &#125;,<br>&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test&#x27;</span>, age: <span class="hljs-number">12</span> &#125;<br>];<br><span class="hljs-keyword">let</span> reduceRepeat = (arr) =&gt; &#123;<br><span class="hljs-keyword">let</span> newArr = [];<br>arr.forEach(<span class="hljs-type">item</span> =&gt; &#123;<br>newArr[JSON.stringify(<span class="hljs-type">item</span>)] = <span class="hljs-type">item</span>;<br>&#125;);<br>arr = Object.keys(newArr).<span class="hljs-keyword">map</span>(<span class="hljs-type">item</span> =&gt; &#123;<br><span class="hljs-keyword">return</span> JSON.parse(<span class="hljs-type">item</span>);<br>&#125;)<br><span class="hljs-keyword">return</span> arr;<br>&#125;;<br>reduceRepeat(arr);// [&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test&#x27;</span>, age: <span class="hljs-number">12</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test1&#x27;</span>, age: <span class="hljs-number">13</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">14</span> &#125;,&#123;<span class="hljs-built_in"> name</span>: <span class="hljs-string">&#x27;test2&#x27;</span>, age: <span class="hljs-number">15</span> &#125;];<br></code></pre></td></tr></table></figure><h3 id="3、-利用reduce去重"><a href="#3、-利用reduce去重" class="headerlink" title="3、 利用reduce去重"></a>3、 利用reduce去重</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sas">const arr = [<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;All&#x27;</span>, value: <span class="hljs-string">&#x27;All&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;All&#x27;</span>, value: <span class="hljs-string">&#x27;All&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;Alex&#x27;</span>, value: <span class="hljs-string">&#x27;Ninja&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;Bill&#x27;</span>, value: <span class="hljs-string">&#x27;Op&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;Cill&#x27;</span>, value: <span class="hljs-string">&#x27;iopop&#x27;</span> &#125;<br>]<br><br>var result = arr.reduce((<span class="hljs-keyword">unique</span>, o) =&gt; &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">unique</span>.some(obj =&gt; obj.<span class="hljs-keyword">label</span> === o.<span class="hljs-keyword">label</span> <span class="hljs-variable">&amp;&amp;</span> obj.value === o.value)) &#123;<br><span class="hljs-keyword">unique</span>.push(o);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">unique</span>;<br>&#125;, []);<br><br>console.<span class="hljs-meta">log</span>(result);<br></code></pre></td></tr></table></figure><h3 id="4、-利用filter"><a href="#4、-利用filter" class="headerlink" title="4、 利用filter"></a>4、 利用filter</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sas">const arr = [<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;All&#x27;</span>, value: <span class="hljs-string">&#x27;All&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;All&#x27;</span>, value: <span class="hljs-string">&#x27;All&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;Alex&#x27;</span>, value: <span class="hljs-string">&#x27;Ninja&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;Bill&#x27;</span>, value: <span class="hljs-string">&#x27;Op&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;Cill&#x27;</span>, value: <span class="hljs-string">&#x27;iopop&#x27;</span> &#125;<br>]<br>const result = arr.filter((v, i, a) =&gt; a.find<span class="hljs-meta">Index</span>(t =&gt; (t.<span class="hljs-keyword">label</span> === v.<span class="hljs-keyword">label</span> <span class="hljs-variable">&amp;&amp;</span> t.value === v.value)) === i)<br></code></pre></td></tr></table></figure><p>上面的代码太过精简，我们来分解一下</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sas">const arr = [<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;All&#x27;</span>, value: <span class="hljs-string">&#x27;All&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;All&#x27;</span>, value: <span class="hljs-string">&#x27;All&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;Alex&#x27;</span>, value: <span class="hljs-string">&#x27;Ninja&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;Alex&#x27;</span>, value: <span class="hljs-string">&#x27;Ninja&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;Alex&#x27;</span>, value: <span class="hljs-string">&#x27;Ninja1&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;Bill&#x27;</span>, value: <span class="hljs-string">&#x27;Op&#x27;</span> &#125;,<br>&#123; <span class="hljs-keyword">label</span>: <span class="hljs-string">&#x27;Cill&#x27;</span>, value: <span class="hljs-string">&#x27;iopop&#x27;</span> &#125;<br>]<br>const result = arr.filter((v, i, a) =&gt; &#123;<br>// v为当前遍历到的对象<br>// i为当前对象的索引<br>// a为完整的arr数组<br>let <span class="hljs-keyword">index</span> = a.find<span class="hljs-meta">Index</span>(t =&gt; &#123;<br>// find<span class="hljs-meta">Index</span>()返回符合条件的对象的索引<br><span class="hljs-keyword">if</span> (t.<span class="hljs-keyword">label</span> === v.<span class="hljs-keyword">label</span> <span class="hljs-variable">&amp;&amp;</span> t.value === v.value) &#123;<br><span class="hljs-keyword">return</span> t;<br>&#125;<br>&#125;)<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">index</span> === i) &#123;<br><span class="hljs-keyword">return</span> v;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>数组</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>数组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql中的一些常用语句</title>
    <link href="/2018/07/23/mysql%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/"/>
    <url>/2018/07/23/mysql%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="1、四大操作语句——增删改查"><a href="#1、四大操作语句——增删改查" class="headerlink" title="1、四大操作语句——增删改查"></a>1、四大操作语句——增删改查</h3><p>此处的示例表名字为 test_table</p><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test_table (<span class="hljs-type">NAME</span>,<span class="hljs-keyword">PASSWORD</span>) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-number">123456</span>) // 给test_table中的<span class="hljs-type">NAME</span>,<span class="hljs-keyword">PASSWORD</span>两个字段插入值<br></code></pre></td></tr></table></figure><h4 id="2-删"><a href="#2-删" class="headerlink" title="2.删"></a>2.删</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">from</span> test_table <span class="hljs-comment">// 删除test_table表中所有数据</span><br><br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">from</span> test_table  WHERE ID = <span class="hljs-number">1</span><span class="hljs-comment">// 删除test_table表中ID字段值为1的数据</span><br></code></pre></td></tr></table></figure><h4 id="3-改"><a href="#3-改" class="headerlink" title="3.改"></a>3.改</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">UPDATE</span> test_table <span class="hljs-keyword">SET</span> <span class="hljs-keyword">PASSWORD</span> = <span class="hljs-string">&#x27;123456a&#x27;</span> <span class="hljs-keyword">WHERE</span> id = <span class="hljs-number">1</span>; // 更新test_table中id为1的PASSWORD字段<br><br><span class="hljs-keyword">UPDATE</span> test_table <span class="hljs-keyword">SET</span> <span class="hljs-built_in">title</span>=<span class="hljs-string">&#x27;测试的title&#x27;</span>,description=<span class="hljs-string">&#x27;测试的description&#x27;</span>,href=<span class="hljs-string">&#x27;测试的href&#x27;</span> <span class="hljs-keyword">WHERE</span> ID =<span class="hljs-number">1</span>; //更新多个字段<br></code></pre></td></tr></table></figure><h4 id="4-查"><a href="#4-查" class="headerlink" title="4.查"></a>4.查</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table  // 搜索test_table表中所有字段<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">Title</span>,Src <span class="hljs-keyword">FROM</span> test_table // 搜索test_table表中的<span class="hljs-built_in">Title</span>和Src两个字段<br></code></pre></td></tr></table></figure><h3 id="2、子句"><a href="#2、子句" class="headerlink" title="2、子句"></a>2、子句</h3><h4 id="1-WHERE-子句"><a href="#1-WHERE-子句" class="headerlink" title="1.WHERE 子句"></a>1.WHERE 子句</h4><blockquote><p>WHERE 子句用于过滤记录。</p></blockquote><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">WHERE</span> ID = <span class="hljs-number">1</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">//搜索test_table表中id为1的数据</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">WHERE</span> AGE&gt;<span class="hljs-number">18</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 搜索test_table表中AGE大于18的数据</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">WHERE</span> AGE&lt;=<span class="hljs-number">18</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 搜索test_table表中AGE小于等于18的数据</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">WHERE</span> AGE&gt;=<span class="hljs-number">18</span> <span class="hljs-keyword">AND</span> NAME = <span class="hljs-string">&#x27;jack&#x27;</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 搜索test_table表中AGE大于等于18并且NAME等于‘jack’的数据</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">WHERE</span> AGE&gt;=<span class="hljs-number">18</span> <span class="hljs-keyword">OR</span> NAME = <span class="hljs-string">&#x27;jack&#x27;</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 搜索test_table表中AGE大于等于18或者NAME等于‘jack’的数据</span><br></code></pre></td></tr></table></figure><h4 id="2-ORDER-子句"><a href="#2-ORDER-子句" class="headerlink" title="2.ORDER 子句"></a>2.ORDER 子句</h4><blockquote><p>ORDER 子句负责排序</p></blockquote><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">ASC</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 从test_table表中搜索所有数据按age升序</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">DESC</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 从test_table表中搜索所有数据按age降序</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> age <span class="hljs-keyword">ASC</span>,id <span class="hljs-keyword">DESC</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 从test_table表中搜索所有数据按age升序,如果age相同，则按id降序排序</span><br></code></pre></td></tr></table></figure><h4 id="3-GROUP-子句"><a href="#3-GROUP-子句" class="headerlink" title="3.GROUP 子句"></a>3.GROUP 子句</h4><blockquote><p>GROUP聚类 ，即合并相同的数据</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> COUNT(*) <span class="hljs-keyword">FROM</span> test_table; // 获取test_table表中所有数据的条数<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> age; // 合并相同age的数据，即显示所有age不相同的数据<br><br><span class="hljs-keyword">SELECT</span> age,COUNT(age) <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> age; // 获取所有的age，以及对应的age出现的次数<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">class</span>,AVG(score) <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">class</span>; // 算各个班级的平均分<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">class</span>,MAX(score),MIN(score) <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">class</span>; // 获取各个班级里面最高分和最低分<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">class</span>,SUM(score) <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">class</span>; // 获取班级总分<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">class</span>,SUM(score) <span class="hljs-keyword">FROM</span> score <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> score <span class="hljs-keyword">ASC</span>; // 获取班级总分并按照分钟竟然升序<br></code></pre></td></tr></table></figure><h4 id="4-LIMIT-子句"><a href="#4-LIMIT-子句" class="headerlink" title="4.LIMIT 子句"></a>4.LIMIT 子句</h4><blockquote><p>主要作用是限制输出</p></blockquote><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table LIMIT <span class="hljs-number">10</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 获取test_table中的前10条数据</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table LIMIT <span class="hljs-number">3</span>,<span class="hljs-number">8</span><span class="hljs-punctuation">;</span> <span class="hljs-comment">// 从第三条开始获取8条数据(起始数字为0)</span><br><br><br><span class="hljs-comment">//分页demo，每页20条数据</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">20</span><span class="hljs-punctuation">;</span><span class="hljs-comment">//第一页 </span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table LIMIT <span class="hljs-number">20</span>,<span class="hljs-number">20</span><span class="hljs-punctuation">;</span><span class="hljs-comment">//第二页 </span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table LIMIT <span class="hljs-number">40</span>,<span class="hljs-number">20</span><span class="hljs-punctuation">;</span><span class="hljs-comment">//第三页 </span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table LIMIT (N-<span class="hljs-number">1</span>)*<span class="hljs-number">20</span>,<span class="hljs-number">20</span><span class="hljs-punctuation">;</span><span class="hljs-comment">//第N页 </span><br></code></pre></td></tr></table></figure><h4 id="5-like-子句"><a href="#5-like-子句" class="headerlink" title="5.like 子句"></a>5.like 子句</h4><blockquote><p>利用通配符匹配而不是直接匹配完全一模一样的</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%王%&#x27;</span>; // 匹配<span class="hljs-type">name</span>字段中包含&quot;王&quot;的数据<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;王%&#x27;</span>; // 匹配<span class="hljs-type">name</span>字段中以&quot;王&quot;开头的数据<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%王&#x27;</span>; // 匹配<span class="hljs-type">name</span>字段中以&quot;王&quot;结尾的数据<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;__王&#x27;</span>; // 注意&quot;王&quot;前面有两个<span class="hljs-string">&#x27;_&#x27;</span> ,三位字符且结尾字符是王的<br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;王_&#x27;</span>; // 两位字符且以王开头的<br></code></pre></td></tr></table></figure><h3 id="3、-综合语句"><a href="#3、-综合语句" class="headerlink" title="3、 综合语句"></a>3、 综合语句</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">class</span>,COUNT(<span class="hljs-keyword">class</span>) <span class="hljs-keyword">FROM</span> test_table <span class="hljs-keyword">WHERE</span> score &gt; <span class="hljs-number">60</span> <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> COUNT(<span class="hljs-keyword">class</span>) <span class="hljs-keyword">ASC</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">2</span>;<br><br>//从所有班级里面获取分数<span class="hljs-number">60</span>分以上的人数，并按照人数排序，最后输出人数最少的两个班级<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈深拷贝与浅拷贝</title>
    <link href="/2018/07/02/%E6%B5%85%E8%B0%88%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2018/07/02/%E6%B5%85%E8%B0%88%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<p>一开始看到深拷贝与浅拷贝我是完全一脸懵逼的，之前只在掘金的热门文章看到过，不过当时也没深究。</p><p>最近项目有个需求才让我真正认识深拷贝，项目需求是这样的，有一个用来存储element多选下拉框选中的值的数组，传往后台是后台需要字符串，于是机智的我立马加上一个<code>join(&#39;,&#39;)</code>然后这边传<br>往后台，万万没想到，因为我用了element的<code>rules</code>来验证表单是否非空的，将数组改成字符串之后验证就不通过了，因为element的验证还会验证数据的类型。然后我就准备用一个临时变量来存储表单数据，然后修改临时变量里面的数组(将其变成字符串),改好后准备再次提交时，又验证失败了，当时又一脸懵逼了，为什么这样也报错。于是百度了一翻知道了深拷贝。</p><h2 id="1、-为什么修改临时变量form表单的数据也会修改？"><a href="#1、-为什么修改临时变量form表单的数据也会修改？" class="headerlink" title="1、 为什么修改临时变量form表单的数据也会修改？"></a>1、 为什么修改临时变量form表单的数据也会修改？</h2><p>下面来一个demo</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>let arr1 = arr;<br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1);<br></code></pre></td></tr></table></figure><p>看到这个例子，大多数人的答案肯定是arr是<code>[1, 2, 3, 4]</code>,arr1是<code>[&quot;a&quot;, 2, 3, 4]</code>,然而情况确是</p><img src="/2018/07/02/%E6%B5%85%E8%B0%88%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/TIM%E5%9B%BE%E7%89%8720180702210628.png" class=""><p>再来一个demo</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let a <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>let b <span class="hljs-operator">=</span> a<span class="hljs-comment">;</span><br><span class="hljs-attribute">b</span><span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-comment">;</span><br>console.log(a)<br>console.log(b)<br></code></pre></td></tr></table></figure><p>有了上面例子的经验，机智的小伙伴们一定以为输出的都是2，然而</p><img src="/2018/07/02/%E6%B5%85%E8%B0%88%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/TIM%E5%9B%BE%E7%89%8720180702211042.png" class=""><p>简单粗暴的回答就是：数组是引用类型，修改数组中值会修改内存地址中的数据。</p><p>下面的详细的讲解以下:</p><h3 id="1-1数据类型"><a href="#1-1数据类型" class="headerlink" title="1.1数据类型"></a>1.1数据类型</h3><p>javascript中有基本类型和引用类型两种数据类型</p><blockquote><p>5种基本类型分别为Undefined、Null、Boolean、Number 和 String，变量是直接按值存放的，存放在栈内存中的简单数据段，可以直接访问。</p></blockquote><blockquote><p>引用类型为Function,Array,Object，是存放在堆内存中的对象，变量保存的是一个指针，这个指针指向另一个位置。当需要访问引用类型（如对象，数组等）的值时，首先从栈中获得该对象的地址指针，然后再从堆内存中取得所需的数据。</p></blockquote><p>所以赋值时，基本类型是直接复制了一个新的变量，新旧两个变量之间没有关系；而引用类型也复制了新的变量，但这个变量是一个指针，新旧两个指针指向同一个对象，所以修改临时变量也会改动原有的form表单的数据</p><h2 id="2、如果想实现项目里面的那个需求的话要怎么做？"><a href="#2、如果想实现项目里面的那个需求的话要怎么做？" class="headerlink" title="2、如果想实现项目里面的那个需求的话要怎么做？"></a>2、如果想实现项目里面的那个需求的话要怎么做？</h2><h3 id="2-1深拷贝的实现"><a href="#2-1深拷贝的实现" class="headerlink" title="2.1深拷贝的实现"></a>2.1深拷贝的实现</h3><h4 id="2-1-1利用JSON对象来实现最简单的深拷贝"><a href="#2-1-1利用JSON对象来实现最简单的深拷贝" class="headerlink" title="2.1.1利用JSON对象来实现最简单的深拷贝"></a>2.1.1利用JSON对象来实现最简单的深拷贝</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> arr1 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr));<br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1) <br></code></pre></td></tr></table></figure><p>输出为<img src="/2018/07/02/%E6%B5%85%E8%B0%88%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/TIM%E5%9B%BE%E7%89%8720180702212636.png" class=""></p><p>这种方法使用较为简单，可以满足基本的深拷贝需求，而且能够处理JSON格式能表示的所有数据类型，但是对于正则表达式类型、函数类型等无法进行深拷贝(而且会直接丢失相应的值)。还有一点不好的地方是它会抛弃对象的constructor。也就是深拷贝之后，不管这个对象原来的构造函数是什么，在深拷贝之后都会变成Object。同时如果对象中存在循环引用的情况也无法正确处理。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 来一个JSON深拷贝的坑的示例</span><br>const obj = &#123;<br>    <span class="hljs-attr">arr</span>: [<span class="hljs-number">111</span>, <span class="hljs-number">222</span>],<br>    <span class="hljs-attr">obj</span>: &#123;<span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;对象&#x27;</span>&#125;,<br>    <span class="hljs-attr">a</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;函数&#x27;</span>)&#125;,<br>    <span class="hljs-attr">date</span>: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(),<br>    <span class="hljs-attr">reg</span>: <span class="hljs-regexp">/正则/ig</span><br>&#125;;<br>let obj1 = JSON.parse(JSON.stringify(obj));<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj1);<br></code></pre></td></tr></table></figure><p>输出为<img src="/2018/07/02/%E6%B5%85%E8%B0%88%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/TIM%E5%9B%BE%E7%89%8720180702213352.png" class=""><br>可以从中看出，obj中的普通对象和数组都能拷贝，然而date对象成了字符串，函数直接就不见了，正则成了一个空对象。</p><h4 id="2-1-2-for-in-实现深拷贝"><a href="#2-1-2-for-in-实现深拷贝" class="headerlink" title="2.1.2 for in 实现深拷贝"></a>2.1.2 for in 实现深拷贝</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepClone</span>(<span class="hljs-params">source</span>)&#123;<br>   <span class="hljs-keyword">if</span>(!source || <span class="hljs-keyword">typeof</span> source !== <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>     <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;数据不是引用类型&#x27;</span>);<br>   &#125;<br>   <span class="hljs-keyword">var</span> targetObj = source.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span> ? [] : &#123;&#125;;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> keys <span class="hljs-keyword">in</span> source)&#123;<br>      <span class="hljs-keyword">if</span>(source.<span class="hljs-title function_">hasOwnProperty</span>(keys))&#123;<br>         <span class="hljs-keyword">if</span>(source[keys] &amp;&amp; <span class="hljs-keyword">typeof</span> source[keys] === <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<br>           targetObj[keys] = source[keys].<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span> ? [] : &#123;&#125;;<br>           targetObj[keys] = <span class="hljs-title function_">deepClone</span>(source[keys]);<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>           targetObj[keys] = source[keys];<br>         &#125;<br>      &#125; <br>   &#125;<br>   <span class="hljs-keyword">return</span> targetObj;<br>&#125;<br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> arr1 = <span class="hljs-title function_">deepClone</span>(arr);<br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1)<br></code></pre></td></tr></table></figure><p>输出为<img src="/2018/07/02/%E6%B5%85%E8%B0%88%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/TIM%E5%9B%BE%E7%89%8720180702214533.png" class=""></p><h2 id="3、拓展，浅拷贝的实现"><a href="#3、拓展，浅拷贝的实现" class="headerlink" title="3、拓展，浅拷贝的实现"></a>3、拓展，浅拷贝的实现</h2><h3 id="3-1-最简单的浅拷贝"><a href="#3-1-最简单的浅拷贝" class="headerlink" title="3.1 最简单的浅拷贝"></a>3.1 最简单的浅拷贝</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// 对象</span><br><span class="hljs-keyword">var</span> o1 = &#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">var</span> o2 = o1;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(o1 === o2);  <span class="hljs-comment">// =&gt;true</span><br>o2.a = <span class="hljs-number">2</span>; <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(o1.a); <span class="hljs-comment">// =&gt; 2</span><br><br><span class="hljs-comment">// 数组</span><br><span class="hljs-keyword">var</span> o1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> o2 = o1;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(o1 === o2); <span class="hljs-comment">// =&gt; true</span><br>o2.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(o1); <span class="hljs-comment">// =&gt; [1,2,3,4]</span><br></code></pre></td></tr></table></figure><p>拷贝原对象的引用，这是最简单的浅拷贝。</p><h3 id="3-2-Object-assign"><a href="#3-2-Object-assign" class="headerlink" title="3.2 Object.assign()"></a>3.2 Object.assign()</h3><blockquote><p>Object.assign是ES6的新函数。Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign() 进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">let</span> arr1 = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>([], arr)<br>arr1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr) <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1) <span class="hljs-comment">//  [&quot;a&quot;, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h3 id="3-3-扩展运算符-amp-解构赋值"><a href="#3-3-扩展运算符-amp-解构赋值" class="headerlink" title="3.3 扩展运算符&amp;解构赋值"></a>3.3 扩展运算符&amp;解构赋值</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arcade">const arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>const newArr = [...arr]<br>arr.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// [1, 2, 3, 4]</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(newArr); <span class="hljs-comment">// [1, 2, 3]</span><br><br><br>const a = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;1&#x27;</span>,<br>    <span class="hljs-attr">address</span>: &#123;<br>        <span class="hljs-attr">province</span>: <span class="hljs-string">&#x27;sichuan&#x27;</span>,<br>        <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;chengdu&#x27;</span><br>    &#125;<br>&#125;<br><br>let &#123;<br>    name,<br>    address<br>&#125; = a<br><br>name = <span class="hljs-string">&#x27;myname&#x27;</span><br>address.province = <span class="hljs-string">&#x27;shanghai&#x27;</span><br>address.city = <span class="hljs-string">&#x27;shanghai&#x27;</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(name, address) <span class="hljs-comment">// myname &#123;province: &#x27;shanghai&#x27;, city: &#x27;shanghai&#x27;&#125;</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a) <span class="hljs-comment">// &#123; address: &#123;province: &#x27;shanghai&#x27;, city: &#x27;shanghai&#x27;&#125;  name: &quot;1&quot; &#125;</span><br></code></pre></td></tr></table></figure><h2 id="4、深拷贝与浅拷贝的区别"><a href="#4、深拷贝与浅拷贝的区别" class="headerlink" title="4、深拷贝与浅拷贝的区别"></a>4、深拷贝与浅拷贝的区别</h2><p>浅拷贝是复制,两个对象指向同一个地址;</p><p>深拷贝是新开栈,两个对象指向不同的地址</p><p> | 和原数据是否指向同一对象 | 第一层数据为基本数据类型 | 原数据中包含子对象<br>:- | :- | :- | :-<br>赋值 | 是 | 改变会使原数据一起改变 | 改变会使原数据一起改变<br>浅拷贝 | 否 | 不会改变原数据 | 改变会使原数据一起改变<br>深拷贝 | 否 | 不会改变原数据 | 不会改变原数据</p><p>参考资料：<br><a href="https://github.com/wengjq/Blog/issues/3">javaScript中浅拷贝和深拷贝的实现</a><br><a href="https://segmentfault.com/a/1190000008637489">JavaScript中的浅拷贝和深拷贝</a><br><a href="https://www.jb51.net/article/87751.htm">再谈Javascript中的基本类型和引用类型(推荐)</a><br><a href="https://juejin.im/post/5b235b726fb9a00e8a3e4e88">JavaScript深拷贝的一些坑</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决v-for循环图片，地址没被编译的bug</title>
    <link href="/2018/06/27/%E8%A7%A3%E5%86%B3v-for%E5%BE%AA%E7%8E%AF%E5%9B%BE%E7%89%87%EF%BC%8C%E5%9C%B0%E5%9D%80%E6%B2%A1%E8%A2%AB%E7%BC%96%E8%AF%91%E7%9A%84bug/"/>
    <url>/2018/06/27/%E8%A7%A3%E5%86%B3v-for%E5%BE%AA%E7%8E%AF%E5%9B%BE%E7%89%87%EF%BC%8C%E5%9C%B0%E5%9D%80%E6%B2%A1%E8%A2%AB%E7%BC%96%E8%AF%91%E7%9A%84bug/</url>
    
    <content type="html"><![CDATA[<p>最近项目里面有个导航栏，里面的每个导航标题前面有个icon图标，图标是存放在assets里面的,最开始的写法如下</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">data</span>()&#123;<br>return &#123;<br><span class="hljs-selector-tag">nav</span>: [<br>&#123;<br>name: <span class="hljs-string">&#x27;导航A&#x27;</span>,<br>icon: <span class="hljs-string">&#x27;~assets/img/a.png&#x27;</span><br>&#125;,<br>&#123;<br>name: <span class="hljs-string">&#x27;导航B&#x27;</span>,<br>icon: <span class="hljs-string">&#x27;~assets/img/b.png&#x27;</span><br>&#125;<br>]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这是遍历到dom里面，直接渲染为<code>&lt;img src =&#39;~assets/img/a.png&#39;&gt;</code>,于是换了一种写法换成了相对路径，</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">data</span>()&#123;<br>return &#123;<br><span class="hljs-selector-tag">nav</span>: [<br>&#123;<br>name: <span class="hljs-string">&#x27;导航A&#x27;</span>,<br>icon: <span class="hljs-string">&#x27;../../assets/img/a.png&#x27;</span><br>&#125;,<br>&#123;<br>name: <span class="hljs-string">&#x27;导航B&#x27;</span>,<br>icon: <span class="hljs-string">&#x27;../../assets/img/b.png&#x27;</span><br>&#125;<br>]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是仍然不奏效，google了一翻解决了bug,正确的写法如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css">data()&#123;<br>return &#123;<br><span class="hljs-selector-tag">nav</span>: [<br>&#123;<br>name: <span class="hljs-string">&#x27;导航A&#x27;</span>,<br>icon: <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../assets/img/a.png&#x27;</span>)<br>&#125;,<br>&#123;<br>name: <span class="hljs-string">&#x27;导航B&#x27;</span>,<br>icon: <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../assets/img/b.png&#x27;</span>)<br>&#125;<br>]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>BUG集锦</category>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
      <tag>BUG集锦</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>理解JavaScript中的原型和原型链</title>
    <link href="/2018/05/30/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2018/05/30/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h3 id="1、-什么是原型"><a href="#1、-什么是原型" class="headerlink" title="1、 什么是原型"></a>1、 什么是原型</h3><blockquote><p>每一个JavaScript对象(null除外)都和另一个对象相关联。’另一个’对象就是我们熟知的原型，每一个对象都从原型继承属性。</p></blockquote><span id="more"></span><p>从《JavaScript权威指南》中可以知道，每一个对象都有一个原型对象，那么怎么知道一个对象所对应的原型对象呢？<br>(ps:在es6中可以使用Object.getPrototypeOf()函数来插件到原型。)<br><strong>对象<code>__proto__</code>属性的值就是它所对应的原型对象：</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let arr <span class="hljs-operator">=</span> []<span class="hljs-comment">;</span><br>console.log(arr)<span class="hljs-comment">; // 输出的结果见下图</span><br></code></pre></td></tr></table></figure><img src="/2018/05/30/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/TIM%E5%9B%BE%E7%89%8720180530152330.png" class=""><img src="/2018/05/30/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/TIM%E5%9B%BE%E7%89%8720180530152817.png" class=""><p>第二张图里面可以看到，不管我们给数组定义什么内容，它们总是有一些相同的方法和属性比如：map方法，length属性。</p><img src="/2018/05/30/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/TIM%E5%9B%BE%E7%89%8720180530154103.png" class=""><p>上图说明一个对象所拥有的属性不仅仅是它本身拥有的属性，它还会从其他对象中继承一些属性。当js在一个对象中找不到需要的属性时，它会到这个对象的父对象上去找，以此类推，这就构成了<code>对象的原型链</code>。<br>简单来说，在 JavaScript 中每个对象都会有一个 <code>__proto__</code> 属性，当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去 <code>__proto__</code> 里找这个属性，这个 <code>__proto__</code> 又会有自己的 <code>__proto__</code>，于是就这样一直找下去。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 来一个栗子深入理解下原型</span><br><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;;<br>person.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">let</span> littlePerson = <span class="hljs-keyword">new</span> <span class="hljs-title function_">person</span>();<br>littlePerson.<span class="hljs-title function_">say</span>(); <span class="hljs-comment">// hello world</span><br><br><span class="hljs-comment">//littlePerson里面是没有定义say方法的，当我们直接调用say方法时，littlePerson里面是获取不到的，于是就去littlePerson里面__proto__里面找，而我们在person.prototype.say里面定义的say方法，于是littlePerson在 person.prototype 中就找到了这个方法。 </span><br></code></pre></td></tr></table></figure><img src="/2018/05/30/%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/TIM%E5%9B%BE%E7%89%8720180530160525.png" class=""><h3 id="2、什么是原型链"><a href="#2、什么是原型链" class="headerlink" title="2、什么是原型链"></a>2、什么是原型链</h3><p>上文已经提到了原型链，接下来看看《JavaScript权威指南》里面关于原型链的解释：</p><blockquote><p>所有的内置的构造函数(以及大部分的自定义构造函数)都具有一个继承自Object.prototype的原型。例如，Date.prototype的属性继承自Object.prototype,因此由new Date()创建的Date对象同时继承自Date.prototype和Object.prototype。这一系列链接的原型对象就是所谓的<code>原型链(prototype chain)</code></p></blockquote><h4 id="2-1-继承"><a href="#2-1-继承" class="headerlink" title="2.1 继承"></a>2.1 继承</h4><blockquote><p>假设要查询对象o的属性x，如果o中不存在x，那么将会继续在o的原型对象中查询属性x。如果原型对象中也没有x，但这个原型对象也有原型，那么继续在这个原型对象的原型上执行查询，直到找到x或者查找到一个原型是null的对象为止。可以看到，对象的原型属性构成了一个”链”，通过这个”链”可以实现属性的继承。</p></blockquote><p>下面来一个继承的demo：</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inherit</span>(<span class="hljs-params">p</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (p === <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-built_in">TypeError</span>(); <span class="hljs-comment">// 因为原型链终点为null，所以不能输入null</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.create) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.create(p); <span class="hljs-comment">// Object.create是es6才有的方法，要判断浏览器是否支持该方法</span><br>  &#125;<br>  <span class="hljs-comment">// 如果浏览器不支持Object.create就用其他方法来创建新对象</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span>(p) !== <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; <span class="hljs-keyword">typeof</span>(p) !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-built_in">TypeError</span>(); <br>  &#125;<br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<br>  foo.prototype = p;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> foo();<br>&#125;<br><br><br><span class="hljs-keyword">let</span> obj = &#123;&#125;; <span class="hljs-comment">// obj从Object.prototype继承对象的方法</span><br>obj.x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">let</span> p = inherit(obj); <span class="hljs-comment">// p继承obj和Object.prototype</span><br>p.y = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">let</span> q = inherit(p); <span class="hljs-comment">// q继承p，obj和Object.prototype</span><br><span class="hljs-built_in">console</span>.log(q.x + q.y); <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h4 id="2-2-属性赋值"><a href="#2-2-属性赋值" class="headerlink" title="2.2 属性赋值"></a>2.2 属性赋值</h4><blockquote><p>属性赋值操作首先检查原型链，以此判断是否允许赋值操作。例如，如果o继承自一个只读属性x，那么赋值操作是不允许的。<br>如果允许属性赋值操作，它也总是在原始对象上创建属性或对已有的属性赋值。而不会去修改原型链。<br>在JS中，只有在查询属性时才会体会到继承的存在，而设置属性则和继承无关。这是JS的一个重要特征，该特征让程序员可以有选择地覆盖继承的属性。</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> <span class="hljs-keyword">inherit</span>(p) &#123;<br>  <span class="hljs-keyword">if</span> (p === <span class="hljs-keyword">null</span>) &#123;<br>    throw TypeError(); // 因为原型链终点为<span class="hljs-keyword">null</span>，所以不能输入<span class="hljs-keyword">null</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">Object</span>.<span class="hljs-keyword">create</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">Object</span>.<span class="hljs-keyword">create</span>(p); // <span class="hljs-keyword">Object</span>.<span class="hljs-keyword">create</span>是es6才有的方法，要判断浏览器是否支持该方法<br>  &#125;<br>  // 如果浏览器不支持<span class="hljs-keyword">Object</span>.<span class="hljs-keyword">create</span>就用其他方法来创建新对象<br>  <span class="hljs-keyword">if</span> (typeof(p) !== <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; typeof(p) !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    throw TypeError(); <br>  &#125;<br>  <span class="hljs-keyword">function</span> foo()&#123;&#125;;<br>  foo.prototype = p;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> foo();<br>&#125;<br><br><br>let obj = &#123;<span class="hljs-type">name</span>: <span class="hljs-string">&#x27;呆呆&#x27;</span>&#125;;<br>let new_obj = <span class="hljs-keyword">inherit</span>(obj);<br>new_obj.name = <span class="hljs-string">&#x27;爱死比&#x27;</span>;<br>console.log(obj); // &#123;<span class="hljs-type">name</span>: &quot;呆呆&quot;&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3-属性访问错误"><a href="#2-3-属性访问错误" class="headerlink" title="2.3 属性访问错误"></a>2.3 属性访问错误</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let p = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(p.q.<span class="hljs-built_in">length</span>); <span class="hljs-comment">// Cannot read property &#x27;length&#x27; of null</span><br><br><br><span class="hljs-comment">//在不能确定p属性有length属性前，不能这样写，可以试试下面的写法</span><br>let len = p &amp;&amp; p.q &amp;&amp; p.q.<span class="hljs-built_in">length</span>; <span class="hljs-comment">// 这种写法可以避免类型错误异常</span><br></code></pre></td></tr></table></figure><h4 id="2-4-删除属性"><a href="#2-4-删除属性" class="headerlink" title="2.4 删除属性"></a>2.4 删除属性</h4><blockquote><p>delete运算符只能删除自有属性，不能删除继承属性（要删除继承属性必须从定义这个属性的原型对象上面删除它，而且这会影响到所有继承自这个原型<br>的对象）当delete表达式删除成功或没有任何副作用（比如删除不存在的属性）时，它返回true，如果delete后不是一个属性访问表达式，delete同样<br>返回true</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let p = &#123;<span class="hljs-type">name</span>: <span class="hljs-string">&#x27;as&#x27;</span>&#125;;<br>console.log(p); // &#123;<span class="hljs-type">name</span>: &quot;as&quot;&#125;<br><span class="hljs-keyword">delete</span> p.name;<br>console.log(p); // &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="2-5-检测是否存在某个属性"><a href="#2-5-检测是否存在某个属性" class="headerlink" title="2.5 检测是否存在某个属性"></a>2.5 检测是否存在某个属性</h4><blockquote><p>in运算符的左侧是属性名(字符串)，右侧是对象。如果对象的自有属性或继承属性中包含这个属性则返回true。</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let obj = &#123;<span class="hljs-type">name</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>&#125;;<br>console.log(<span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">in</span> obj); // <span class="hljs-keyword">true</span> , 必须要用字符串，否则不管是否存在都会返回<span class="hljs-keyword">false</span><br>console.log(<span class="hljs-type">name</span> <span class="hljs-keyword">in</span> obj); // <span class="hljs-keyword">false</span><br>console.log(<span class="hljs-string">&#x27;toString&#x27;</span> <span class="hljs-keyword">in</span> obj); // <span class="hljs-keyword">true</span> ,obj 继承了 <span class="hljs-keyword">Object</span>.prototype里面的属性<br></code></pre></td></tr></table></figure><blockquote><p>对象的hasOwnProperty()方法用来检测给定的名字是否是对象的自有属性。对于继承属性则返回false。</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let obj = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.hasOwnProperty(<span class="hljs-string">&#x27;name&#x27;</span>)); <span class="hljs-comment">// true ,必须要用字符串，否则不管是否存在都会返回false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.hasOwnProperty(name)); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.hasOwnProperty(<span class="hljs-string">&#x27;toString&#x27;</span>)); <span class="hljs-comment">// false , toString是继承属性</span><br></code></pre></td></tr></table></figure><blockquote><p>propertyIsEnumerable()是hasOwnProperty()的增强版，只有检测到是自有属性且这个属性的可枚举性(enumerable attribute)为true时才返回true。</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let obj = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.propertyIsEnumerable(<span class="hljs-string">&#x27;name&#x27;</span>)); <span class="hljs-comment">// true ,obj有一个可枚举的自有属性 name</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.propertyIsEnumerable(name)); <span class="hljs-comment">// false ，不是字符串</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.propertyIsEnumerable(<span class="hljs-string">&#x27;toString&#x27;</span>)); <span class="hljs-comment">// false , toString是继承属性</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(Object.prototype.propertyIsEnumerable(<span class="hljs-string">&#x27;toString&#x27;</span>)); <span class="hljs-comment">//false 因为不可枚举</span><br></code></pre></td></tr></table></figure><blockquote><p>除了使用in运算符之外，另一种更简便的方法就是使用’!&#x3D;&#x3D;’判断一个属性是否是undefined</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let obj = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.name !== <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.age !== <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.toString !== <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// true ,obj继承了Object.prototype里面的toString属性</span><br></code></pre></td></tr></table></figure><p><strong>一个只能用in的特殊案例</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">// in 可以区分不存在的属性和存在但是值为undefined的属性</span><br>let obj = &#123;<span class="hljs-attr">name</span>: <span class="hljs-literal">undefined</span>&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;name&#x27;</span> in obj); <span class="hljs-comment">//true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.name !== <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// false , 属性存在，但是值为undefined</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(obj.hasOwnProperty(<span class="hljs-string">&#x27;name&#x27;</span>)); <span class="hljs-comment">// true</span><br>delete obj.name;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;name&#x27;</span> in obj); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>参考资料：<br><a href="https://blog.csdn.net/shi0090/article/details/45008595">简单介绍javascript 中<code>__proto__</code>属性的原理</a><br><a href="https://zhuanlan.zhihu.com/p/22787302">JS重点整理之JS原型链彻底搞清楚</a><br><a href="https://www.jianshu.com/p/116ea3be6ef5">彻底理解js的原型链</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>原型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>原型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>package.json的理解与学习</title>
    <link href="/2018/05/29/package-json%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AD%A6%E4%B9%A0/"/>
    <url>/2018/05/29/package-json%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="1、package-json是什么"><a href="#1、package-json是什么" class="headerlink" title="1、package.json是什么"></a>1、package.json是什么</h2><blockquote><p>1、每个项目的根目录下面，一般都有一个package.json文件，定义了这个项目所需要的各种模块，以及项目的配置信息（比如名称、版本、许可证等元数据）。npm install命令根据这个配置文件，自动下载所需的模块，也就是配置项目所需的运行和开发环境。<br>2、package.json文件可以手工编写，也可以使用npm init命令自动生成。</p></blockquote><p>下面是一个最简单package.json</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123;<br>  &quot;name&quot;: &quot;&quot;,<br>  &quot;version&quot;: &quot;&quot;<br>&#125;<br>// package.json文件就是一个<span class="hljs-type">JSON</span>对象，该对象的每一个成员就是当前项目的一项设置。比如<span class="hljs-type">name</span>就是项目名称，<span class="hljs-keyword">version</span>是版本<br></code></pre></td></tr></table></figure><h2 id="2、详解package-json里面的各个字段"><a href="#2、详解package-json里面的各个字段" class="headerlink" title="2、详解package.json里面的各个字段"></a>2、详解package.json里面的各个字段</h2><h3 id="2-1-scripts字段"><a href="#2-1-scripts字段" class="headerlink" title="2.1 scripts字段"></a>2.1 scripts字段</h3><p>scripts指定了运行脚本命令的npm命令行缩写。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">npm run dev 执行了scripts字段里面的dev里面的内容<br><br>&quot;scripts&quot;: &#123;<br>  &quot;dev&quot;: &quot;webpack-dev-server --inline --progress --config <span class="hljs-keyword">build</span>/webpack.dev.conf.js<span class="hljs-string">&quot;,</span><br><span class="hljs-string">  &quot;</span><span class="hljs-keyword">start</span><span class="hljs-string">&quot;: &quot;</span>npm run dev<span class="hljs-string">&quot;,</span><br><span class="hljs-string">  &quot;</span>unit<span class="hljs-string">&quot;: &quot;</span>jest --config test/unit/jest.conf.js --coverage<span class="hljs-string">&quot;,</span><br><span class="hljs-string">  &quot;</span>e2e<span class="hljs-string">&quot;: &quot;</span>node test/e2e/runner.js<span class="hljs-string">&quot;,</span><br><span class="hljs-string">  &quot;</span>test<span class="hljs-string">&quot;: &quot;</span>npm run unit &amp;&amp; npm run e2e<span class="hljs-string">&quot;,</span><br><span class="hljs-string">  &quot;</span>lint<span class="hljs-string">&quot;: &quot;</span>eslint --ext .js,.vue src test/unit/specs test/e2e/specs<span class="hljs-string">&quot;,</span><br><span class="hljs-string">  &quot;</span><span class="hljs-keyword">build</span><span class="hljs-string">&quot;: &quot;</span>node <span class="hljs-keyword">build</span>/<span class="hljs-keyword">build</span>.js<span class="hljs-string">&quot;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-2-dependencies字段，devDependencies字段"><a href="#2-2-dependencies字段，devDependencies字段" class="headerlink" title="2.2 dependencies字段，devDependencies字段"></a>2.2 dependencies字段，devDependencies字段</h3><p>dependencies((上线和开发都需要的依赖))字段指定了项目运行所依赖的模块，devDependencies(开发时运行的依赖)指定项目开发所需要的模块。<br>它们都指向一个对象。该对象的各个成员，分别由模块名和对应的版本要求组成，表示依赖的模块及其版本范围。<br>关于安装模块的版本需要注意下面几点：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>、指定版本：例如<span class="hljs-string">&quot;vue&quot;</span>: <span class="hljs-string">&quot;2.5.2&quot;</span>,即执行npm install时只安装<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.<span class="hljs-number">2</span>版本的vue<br><span class="hljs-attribute">2</span>、波浪号（tilde）+ 指定版本：例如<span class="hljs-string">&quot;vue&quot;</span>: <span class="hljs-string">&quot;~2.5.2&quot;</span>,即安装<span class="hljs-number">2</span>.<span class="hljs-number">5</span>.x里面的最新版本，不会安装<span class="hljs-number">2</span>.<span class="hljs-number">6</span>.x里面的版本<br><span class="hljs-attribute">3</span>、插入号（caret）+ 指定版本：例如<span class="hljs-string">&quot;vue&quot;</span>: <span class="hljs-string">&quot;^2.5.2&quot;</span>,即安装<span class="hljs-number">2</span>.x.x里面的最新版本，但不会安装<span class="hljs-number">3</span>.x.x里面的版本<br><span class="hljs-attribute">4</span>、latest：安装最新版本，例如：<span class="hljs-string">&quot;vue&quot;</span>: latest<br><br><span class="hljs-attribute">ps</span>：版本号的<span class="hljs-number">3</span>位数字分别对应 大版本，次要版本，小版本<br></code></pre></td></tr></table></figure><h2 id="3、engines-字段"><a href="#3、engines-字段" class="headerlink" title="3、engines 字段"></a>3、engines 字段</h2><p>engines字段指明了该模块运行的平台。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;engines&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;node&quot;</span>: <span class="hljs-string">&quot;&gt;= 4.0.0&quot;</span>, <span class="hljs-regexp">//</span> 需要node的版本大于等于<span class="hljs-number">4.0</span><br>  <span class="hljs-string">&quot;npm&quot;</span>: <span class="hljs-string">&quot;&gt;= 3.0.0&quot;</span> <span class="hljs-regexp">//</span> 需要npm的版本大于等于<span class="hljs-number">3.0</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、browserslist-字段"><a href="#4、browserslist-字段" class="headerlink" title="4、browserslist 字段"></a>4、browserslist 字段</h2><p>限制了浏览器或者客户端需要什么版本才可运行,一些插件例如<code>Autoprefixer</code>会读取里面配置的浏览器来自动加上css前缀。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-string">&quot;browserslist&quot;</span>: [<br>  <span class="hljs-string">&quot;&gt; 1%&quot;</span>,<br>  <span class="hljs-string">&quot;last 2 versions&quot;</span>,<br>  <span class="hljs-string">&quot;not ie &lt;= 8&quot;</span><br>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>package.json</category>
      
    </categories>
    
    
    <tags>
      
      <tag>package.json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm的一些常用命令</title>
    <link href="/2018/05/18/npm%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2018/05/18/npm%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="1、初始化项目"><a href="#1、初始化项目" class="headerlink" title="1、初始化项目"></a>1、初始化项目</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm init <span class="hljs-regexp">//</span>初始化项目，生成package.json文件<br>npm init -y <span class="hljs-regexp">//</span>生成的默认的package.json(无需一直按yes)<br></code></pre></td></tr></table></figure><h3 id="2、安装模块"><a href="#2、安装模块" class="headerlink" title="2、安装模块"></a>2、安装模块</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install <span class="hljs-regexp">//</span> 用于下载package.json里面的模块<br>npm install vue vuex vue-router -S <span class="hljs-regexp">//</span> 同时下载多个包<br>npm install -g express <span class="hljs-regexp">//</span> 全局安装express模块，即在其他文件夹里面也可以require进来<br>npm install –save-dev xxx <span class="hljs-regexp">//</span> 表示将该模块写入devDependencies(开发时运行的依赖)属性，可以简写为npm install  xxx -D<br>npm install --save xxx <span class="hljs-regexp">//</span> 表示将该模块写入dependencies(上线和开发都需要的依赖)属性,可以简写为npm install  xxx -S<br></code></pre></td></tr></table></figure><h3 id="3、查看某个包的所有版本"><a href="#3、查看某个包的所有版本" class="headerlink" title="3、查看某个包的所有版本"></a>3、查看某个包的所有版本</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> view <span class="hljs-string">&#x27;xxx&#x27;</span> versions <br>例：<br><span class="hljs-built_in">npm</span> view video.js versions<br></code></pre></td></tr></table></figure><h3 id="4、升级某个包"><a href="#4、升级某个包" class="headerlink" title="4、升级某个包"></a>4、升级某个包</h3><h4 id="4-1-升级package-json中的包"><a href="#4-1-升级package-json中的包" class="headerlink" title="4.1 升级package.json中的包"></a>4.1 升级package.json中的包</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs q">npm <span class="hljs-keyword">update</span> xxx<br>例：<br>npm <span class="hljs-keyword">update</span> video.js <span class="hljs-comment">//这种升级方式只能升级对应的版本里面的最高的，例：现在的版本的 6.0.1  用该指令最高只能手机到 6.9.x，不能升级到7.0以后的</span><br></code></pre></td></tr></table></figure><h4 id="4-2-升级全局安装的包"><a href="#4-2-升级全局安装的包" class="headerlink" title="4.2 升级全局安装的包"></a>4.2 升级全局安装的包</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm i xxx -g <span class="hljs-regexp">//</span> 例如npm i webpack -g<br>npm update -g <span class="hljs-regexp">//</span> 升级全部可以升级的包<br></code></pre></td></tr></table></figure><h3 id="5、卸载某个包"><a href="#5、卸载某个包" class="headerlink" title="5、卸载某个包"></a>5、卸载某个包</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs processing">npm uninstall -g xxx <span class="hljs-comment">//删除xxx全局模块</span><br>npm uninstall 模块：删除模块，但不删除模块留在<span class="hljs-keyword">package</span>.<span class="hljs-property">json</span>中的对应信息<br>npm uninstall 模块 --<span class="hljs-built_in">save</span> 删除模块，同时删除模块留在<span class="hljs-keyword">package</span>.<span class="hljs-property">json</span>中dependencies下的对应信息<br>npm uninstall 模块 --<span class="hljs-built_in">save</span>-dev 删除模块，同时删除模块留在<span class="hljs-keyword">package</span>.<span class="hljs-property">json</span>中devDependencies下的对应信息<br>例：<br>npm uninstall -g vue<br>如果要卸载所有包，直接删除node_modules文件夹即可。。。<br></code></pre></td></tr></table></figure><h3 id="6、查看所有安装的包"><a href="#6、查看所有安装的包" class="headerlink" title="6、查看所有安装的包"></a>6、查看所有安装的包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h3 id="7、查看全局安装过的包"><a href="#7、查看全局安装过的包" class="headerlink" title="7、查看全局安装过的包"></a>7、查看全局安装过的包</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm list -g <span class="hljs-comment">--depth 0</span><br></code></pre></td></tr></table></figure><h3 id="8、查看哪些包有更新"><a href="#8、查看哪些包有更新" class="headerlink" title="8、查看哪些包有更新"></a>8、查看哪些包有更新</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm outdated <span class="hljs-regexp">//</span> 在项目所在文件夹执行的话，可以看到当前项目中的node_modules中的包，是否有更新<br>npm outdated -g --depth=<span class="hljs-number">0</span> <span class="hljs-regexp">//</span> 查看全局(-g)安装的包是否有更新<br></code></pre></td></tr></table></figure><h3 id="9、查看全局安装的包的位置"><a href="#9、查看全局安装的包的位置" class="headerlink" title="9、查看全局安装的包的位置"></a>9、查看全局安装的包的位置</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm root -g  <span class="hljs-regexp">//</span> 输出C:\Program Files\nodejs\node_modules<br></code></pre></td></tr></table></figure><h3 id="10、设置代理"><a href="#10、设置代理" class="headerlink" title="10、设置代理"></a>10、设置代理</h3><p>因为众所周知的原因，有时候install很慢那我们就需要设置代理来加速安装。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 临时使用，<br>npm --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org install xxx<br><br><span class="hljs-regexp">//</span> 持久使用<br>npm config set registry https:<span class="hljs-regexp">//</span>registry.npm.taobao.org<br><span class="hljs-regexp">//</span> 配置后可通过下面方式来验证是否成功 <br>npm config get registry<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常见的Http状态显示</title>
    <link href="/2018/05/17/%E5%B8%B8%E8%A7%81%E7%9A%84Http%E7%8A%B6%E6%80%81%E6%98%BE%E7%A4%BA/"/>
    <url>/2018/05/17/%E5%B8%B8%E8%A7%81%E7%9A%84Http%E7%8A%B6%E6%80%81%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="1xx（临时响应）"><a href="#1xx（临时响应）" class="headerlink" title="1xx（临时响应）"></a>1xx（临时响应）</h3><p>表示临时响应并需要请求者继续执行操作的状态代码。</p><table><thead><tr><th align="left">代码</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">100</td><td align="left">（继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</td></tr><tr><td align="left">101</td><td align="left">（切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换</td></tr></tbody></table><h3 id="2xx-（成功）"><a href="#2xx-（成功）" class="headerlink" title="2xx （成功）"></a>2xx （成功）</h3><p>表示成功处理了请求的状态代码。</p><table><thead><tr><th align="left">代码</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">200</td><td align="left">（成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</td></tr><tr><td align="left">201</td><td align="left">（已创建） 请求成功并且服务器创建了新的资源。</td></tr><tr><td align="left">202</td><td align="left">（已接受） 服务器已接受请求，但尚未处理。</td></tr><tr><td align="left">203</td><td align="left">（非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。</td></tr><tr><td align="left">204</td><td align="left">（无内容） 服务器成功处理了请求，但没有返回任何内容。</td></tr><tr><td align="left">205</td><td align="left">（重置内容） 服务器成功处理了请求，但没有返回任何内容。</td></tr><tr><td align="left">206</td><td align="left">（部分内容） 服务器成功处理了部分 GET 请求。</td></tr></tbody></table><h3 id="3xx-（重定向）"><a href="#3xx-（重定向）" class="headerlink" title="3xx （重定向）"></a>3xx （重定向）</h3><p>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</p><table><thead><tr><th align="left">代码</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">300</td><td align="left">（多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</td></tr><tr><td align="left">301</td><td align="left">（永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td></tr><tr><td align="left">302</td><td align="left">（临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td></tr><tr><td align="left">303</td><td align="left">（查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</td></tr><tr><td align="left">304</td><td align="left">（未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</td></tr><tr><td align="left">305</td><td align="left">（使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</td></tr><tr><td align="left">307</td><td align="left">（临时重定向） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</td></tr></tbody></table><h3 id="4xx（请求错误）"><a href="#4xx（请求错误）" class="headerlink" title="4xx（请求错误）"></a>4xx（请求错误）</h3><p>这些状态代码表示请求可能出错，妨碍了服务器的处理。</p><table><thead><tr><th align="left">代码</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">400</td><td align="left">（错误请求） 服务器不理解请求的语法。</td></tr><tr><td align="left">401</td><td align="left">（未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</td></tr><tr><td align="left">403</td><td align="left">（禁止） 服务器拒绝请求。</td></tr><tr><td align="left">404</td><td align="left">（未找到） 服务器找不到请求的网页。</td></tr><tr><td align="left">405</td><td align="left">（方法禁用） 禁用请求中指定的方法。</td></tr><tr><td align="left">406</td><td align="left">（不接受） 无法使用请求的内容特性响应请求的网页。</td></tr><tr><td align="left">407</td><td align="left">（需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。</td></tr><tr><td align="left">408</td><td align="left">（请求超时） 服务器等候请求时发生超时。</td></tr><tr><td align="left">409</td><td align="left">（冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</td></tr><tr><td align="left">410</td><td align="left">（已删除） 如果请求的资源已永久删除，服务器就会返回此响应。</td></tr><tr><td align="left">411</td><td align="left">（需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。</td></tr><tr><td align="left">412</td><td align="left">（未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。</td></tr><tr><td align="left">413</td><td align="left">（请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</td></tr><tr><td align="left">414</td><td align="left">（请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。</td></tr><tr><td align="left">415</td><td align="left">（不支持的媒体类型） 请求的格式不受请求页面的支持。</td></tr><tr><td align="left">416</td><td align="left">（请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。</td></tr><tr><td align="left">417</td><td align="left">（未满足期望值） 服务器未满足”期望”请求标头字段的要求。</td></tr></tbody></table><h3 id="5xx（服务器错误）"><a href="#5xx（服务器错误）" class="headerlink" title="5xx（服务器错误）"></a>5xx（服务器错误）</h3><p>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</p><table><thead><tr><th align="left">代码</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">500</td><td align="left">（服务器内部错误） 服务器遇到错误，无法完成请求。</td></tr><tr><td align="left">501</td><td align="left">（尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</td></tr><tr><td align="left">502</td><td align="left">（错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</td></tr><tr><td align="left">503</td><td align="left">（服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</td></tr><tr><td align="left">504</td><td align="left">（网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</td></tr><tr><td align="left">505</td><td align="left">（HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>http</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue里面如何监听键盘事件</title>
    <link href="/2018/05/15/vue%E9%87%8C%E9%9D%A2%E5%A6%82%E4%BD%95%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
    <url>/2018/05/15/vue%E9%87%8C%E9%9D%A2%E5%A6%82%E4%BD%95%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>最近项目里面有个需求：点击小图全屏展示大图,然后用户点击右上角的<code>X</code>按钮或者直接按<code>ESC</code>退出大图模式。<br>点击小图全屏展示大图和按x关闭大图都很容易实现，但是监听esc的事件费了点事件，最开始是这么写的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;viewLargerImageContainer&quot;</span> @keyup<span class="hljs-number">.27</span>=<span class="hljs-string">&#x27;escEvent&#x27;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-circle-close-outline close-icon&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;closeImg&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgSrc&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#x27;largerImg&#x27;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>然而并没有奏效，因为<code>@keyup</code>这样的写法似乎只能在<code>input</code>这样的输入框里面执行，于是百度到<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent">KeyboardEvent</a>,解决了问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;div <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;viewLargerImageContainer&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;el-icon-circle-close-outline close-icon&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;closeImg&#x27;)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:src</span>=<span class="hljs-string">&quot;imgSrc&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&#x27;largerImg&#x27;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">escEvent</span>();<br>&#125;,<br><br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">escEvent</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> keyName = event.<span class="hljs-property">key</span>;<br>      <span class="hljs-keyword">if</span> (keyName === <span class="hljs-string">&#x27;Escape&#x27;</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;closeImg&#x27;</span>);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node.js学习笔记</title>
    <link href="/2018/05/14/node-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/05/14/node-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="0、nodeJs特征"><a href="#0、nodeJs特征" class="headerlink" title="0、nodeJs特征"></a>0、nodeJs特征</h2><p>单线程、非阻塞I&#x2F;O、事件驱动</p><h2 id="1、node里面的全局对象"><a href="#1、node里面的全局对象" class="headerlink" title="1、node里面的全局对象"></a>1、node里面的全局对象</h2><blockquote><p>JavaScript有且仅有一个全局对象，在浏览器中，叫window对象。而在Node.js环境中，也有唯一的全局对象，但不叫window，而叫global</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(__dirname); <span class="hljs-comment">//输出F:\node学习\beginning    获取当前文件所在的路径</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(__filename);<span class="hljs-comment">//输出F:\node学习\beginning\test.js 获取当前文件路径</span><br><br></code></pre></td></tr></table></figure><h2 id="2、模块的引入"><a href="#2、模块的引入" class="headerlink" title="2、模块的引入"></a>2、模块的引入</h2><blockquote><p>一个模块想要对外暴露变量（函数也是变量），可以用module.exports &#x3D; variable;，一个模块要引用其他模块暴露的变量，用var ref &#x3D; require(‘module_name’);就拿到了引用模块的变量。</p></blockquote><h3 id="2-1-单个函数的export"><a href="#2-1-单个函数的export" class="headerlink" title="2.1 单个函数的export"></a>2.1 单个函数的export</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这是count.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">arr</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`the lenght of arr is <span class="hljs-subst">$&#123;arr.length&#125;</span>`</span>);<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = counter;<br><br><br><span class="hljs-comment">//这是test.js</span><br><span class="hljs-keyword">var</span> counter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./count.js&#x27;</span>); <span class="hljs-comment">//引入模块</span><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>];<br><span class="hljs-title function_">counter</span>(arr);<br><br>node test.<span class="hljs-property">js</span> <span class="hljs-comment">//输出 the lenght of arr is 7</span><br></code></pre></td></tr></table></figure><h3 id="2-2-export多个函数或者变量"><a href="#2-2-export多个函数或者变量" class="headerlink" title="2.2 export多个函数或者变量"></a>2.2 export多个函数或者变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这是count.js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">counter</span>(<span class="hljs-params">arr</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`the lenght of arr is <span class="hljs-subst">$&#123;arr.length&#125;</span>`</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">const</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">counter</span> = counter;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">test</span> = test;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">a</span> = a;<br><span class="hljs-attr">ps</span>: 此处可以简写为<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>counter,<br>test,<br>a<br>&#125;<br><br><br><br><span class="hljs-comment">//这是test.js</span><br><span class="hljs-keyword">var</span> shuffle = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./count.js&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(shuffle.<span class="hljs-property">a</span>);<br>shuffle.<span class="hljs-title function_">test</span>();<br><br>node test.<span class="hljs-property">js</span> <span class="hljs-comment">//输出 10 &#x27;hello world&#x27;</span><br><br><br><span class="hljs-comment">//test.js里面的require可以直接引入需要的函数或者数值</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./count.js&#x27;</span>).<span class="hljs-property">a</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><h3 id="2-3模块化编程思想"><a href="#2-3模块化编程思想" class="headerlink" title="2.3模块化编程思想"></a>2.3模块化编程思想</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这是server.js</span><br><span class="hljs-keyword">let</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">server</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">let</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span>&#125;);<span class="hljs-comment">//设置响应头</span><br><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">createReadStream</span>(__dirname + <span class="hljs-string">&#x27;/transition01.html&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>);<br>data.<span class="hljs-title function_">pipe</span>(response);<br>&#125;);<br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server start at localhost:3000&#x27;</span>);<br>&#125;<br><span class="hljs-built_in">exports</span>.<span class="hljs-property">server</span> = server;<br><br><span class="hljs-comment">//这是app.js</span><br><span class="hljs-keyword">var</span> server = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./server.js&#x27;</span>);<br>server.<span class="hljs-title function_">server</span>(); <span class="hljs-comment">//输出 &#x27;hello world&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="2-4-require的各种写法"><a href="#2-4-require的各种写法" class="headerlink" title="2.4 require的各种写法"></a>2.4 require的各种写法</h3><p>直接require文件名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> foo = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;foo.js&#x27;</span>);  <span class="hljs-comment">// 这种写法将直接从node_modules文件夹中查找对于的文件</span><br></code></pre></td></tr></table></figure><p>直接require一个文件夹(即没有文件后缀)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">const foo = require(<span class="hljs-string">&#x27;foo&#x27;</span>);  <span class="hljs-regexp">//</span>  直接从node_modules中找到foo文件夹执行里面的index.js<br><br><span class="hljs-regexp">//</span>如果foo文件夹里面没有index.js则必须要有package.json文件，里面指定了入口文件<br>&#123;<br><span class="hljs-string">&#x27;name&#x27;</span> : <span class="hljs-string">&#x27;foo&#x27;</span>,<br><span class="hljs-string">&#x27;version&#x27;</span> : <span class="hljs-string">&#x27;1.1.1&#x27;</span>,<br><span class="hljs-string">&#x27;main&#x27;</span> : <span class="hljs-string">&#x27;xxx.js&#x27;</span>  <span class="hljs-regexp">//</span> 必须要有main这个字段，里面对应的值是执行文件的文件名字 <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="如果require的模块与系统内置模块名字冲突，系统的模块会覆盖自定义的模块"><a href="#如果require的模块与系统内置模块名字冲突，系统的模块会覆盖自定义的模块" class="headerlink" title="如果require的模块与系统内置模块名字冲突，系统的模块会覆盖自定义的模块"></a>如果require的模块与系统内置模块名字冲突，系统的模块会覆盖自定义的模块</h4><h2 id="3、events-事件"><a href="#3、events-事件" class="headerlink" title="3、events (事件)"></a>3、events (事件)</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">let</span> events = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;events&#x27;</span>); <span class="hljs-comment">//引入事件库</span><br><span class="hljs-built_in">var</span> myEvents = <span class="hljs-literal">new</span> events.EventEmitter(); <span class="hljs-comment">//创建一个EventEmitter实例</span><br>myEvents.<span class="hljs-keyword">on</span>(<span class="hljs-string">&#x27;someEvent&#x27;</span>,function(<span class="hljs-built_in">data</span>)&#123; <span class="hljs-comment">//someEvent是指某个事件例如click ，data是传入的数据</span><br>console.<span class="hljs-keyword">log</span>(<span class="hljs-built_in">data</span>); <br>&#125;)<br>myEvents.emit(<span class="hljs-string">&#x27;someEvent&#x27;</span>, <span class="hljs-string">&#x27;hello world&#x27;</span>); <span class="hljs-comment">//手动触发函数</span><br></code></pre></td></tr></table></figure><h2 id="4、文件系统"><a href="#4、文件系统" class="headerlink" title="4、文件系统"></a>4、文件系统</h2><h3 id="4、1读取文件内容"><a href="#4、1读取文件内容" class="headerlink" title="4、1读取文件内容"></a>4、1读取文件内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//同步读取文件</span><br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>); <span class="hljs-comment">// 引入文件库</span><br><span class="hljs-keyword">let</span> txt = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;./file.txt&#x27;</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>); <span class="hljs-comment">//readFileSync接受两个参数，第一个是文件路径，第二个是文件的编码格式</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(txt); <span class="hljs-comment">//输出‘hello world’</span><br><br><span class="hljs-comment">//这是file.txt里面的内容</span><br>hello world<br><br><br><span class="hljs-comment">//异步读取文件</span><br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;aaa.txt&#x27;</span>,<span class="hljs-string">&#x27;utf-8&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">err,data</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err); <span class="hljs-comment">//null</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <span class="hljs-comment">// &#x27;hello worldd&#x27;</span><br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;读取文件成功&#x27;</span>);<br>输出为<br>读取文件成功<br><span class="hljs-literal">null</span><br>hello world<br></code></pre></td></tr></table></figure><h3 id="4、2创建文件并写入内容"><a href="#4、2创建文件并写入内容" class="headerlink" title="4、2创建文件并写入内容"></a>4、2创建文件并写入内容</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//同步创建文件</span><br><span class="hljs-keyword">let</span> fs = require(&#x27;fs&#x27;);<br><span class="hljs-keyword">let</span> txt = fs.read<span class="hljs-constructor">FileSync(&#x27;.<span class="hljs-operator">/</span><span class="hljs-params">file</span>.<span class="hljs-params">txt</span>&#x27;)</span>;<br>fs.write<span class="hljs-constructor">FileSync(&#x27;<span class="hljs-params">aaa</span>.<span class="hljs-params">txt</span>&#x27;,<span class="hljs-params">txt</span>)</span>; <span class="hljs-comment">//把file.txt里面的内容写入到新建的aaa.txt里面</span><br><br><span class="hljs-comment">//异步创建文件</span><br>fs.write<span class="hljs-constructor">File(&#x27;<span class="hljs-params">aaa</span>.<span class="hljs-params">txt</span>&#x27;,<span class="hljs-params">data</span>,()</span> =&gt; &#123;<br>console.log(&#x27;txt file has been created&#x27;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4、3删除文件"><a href="#4、3删除文件" class="headerlink" title="4、3删除文件"></a>4、3删除文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//同步删除</span><br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">unlinkSync</span>(<span class="hljs-string">&#x27;server.js&#x27;</span>);<br><br><span class="hljs-comment">//异步删除</span><br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">unlink</span>(<span class="hljs-string">&#x27;aaa.txt&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;finished&#x27;</span>);<br>输出<br>finished<br>删除成功<br></code></pre></td></tr></table></figure><h3 id="4、4创建文件夹和删除文件夹"><a href="#4、4创建文件夹和删除文件夹" class="headerlink" title="4、4创建文件夹和删除文件夹"></a>4、4创建文件夹和删除文件夹</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//同步创建</span><br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">mkdirSync</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>);<br><br><br><span class="hljs-comment">//异步创建</span><br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">mkdir</span>(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;创建成功&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//同步删除文件夹</span><br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">rmdirSync</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>);<br><br><span class="hljs-comment">//异步删除</span><br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">rmdir</span>(<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除成功&#x27;</span>);<br>&#125;);<br><br><br><span class="hljs-comment">//demo，创建文件夹，并在里面新建文件</span><br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br>fs.<span class="hljs-title function_">mkdir</span>(<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;<br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;test/aaa.txt&#x27;</span>,<span class="hljs-string">&#x27;hello world&#x27;</span>,<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;成功创建文件夹和文件&#x27;</span>);<br>&#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="4-5-获取文件的详细信息"><a href="#4-5-获取文件的详细信息" class="headerlink" title="4.5 获取文件的详细信息"></a>4.5 获取文件的详细信息</h3><blockquote><p>如果我们要获取文件大小，创建时间等信息，可以使用fs.stat()，它返回一个Stat对象，能告诉我们文件或目录的详细信息：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">let</span> <span class="hljs-string">fs</span> <span class="hljs-string">=</span> <span class="hljs-string">require(&#x27;fs&#x27;);</span><br><span class="hljs-string">fs.stat(&#x27;./test.txt&#x27;,((err,data)</span> <span class="hljs-string">=&gt;</span> &#123;<br><span class="hljs-string">console.log(data);</span><br>&#125;<span class="hljs-string">))</span><br><br><span class="hljs-string">//输出以下内容</span><br><span class="hljs-string">Stats</span> &#123;<br>  <span class="hljs-attr">dev:</span> <span class="hljs-number">563682</span>,<br>  <span class="hljs-attr">mode:</span> <span class="hljs-number">33206</span>,<br>  <span class="hljs-attr">nlink:</span> <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">uid:</span> <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">gid:</span> <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">rdev:</span> <span class="hljs-number">0</span>,<br>  <span class="hljs-attr">blksize:</span> <span class="hljs-string">undefined</span>,<br>  <span class="hljs-attr">ino:</span> <span class="hljs-number">1688849860428397</span>,<br>  <span class="hljs-attr">size:</span> <span class="hljs-number">23</span>,<br>  <span class="hljs-attr">blocks:</span> <span class="hljs-string">undefined</span>,<br>  <span class="hljs-attr">atimeMs:</span> <span class="hljs-number">1526475120655.8008</span>,<br>  <span class="hljs-attr">mtimeMs:</span> <span class="hljs-number">1526475270067.3467</span>,<br>  <span class="hljs-attr">ctimeMs:</span> <span class="hljs-number">1526475270067.3467</span>,<br>  <span class="hljs-attr">birthtimeMs:</span> <span class="hljs-number">1526475120655.8008</span>,<br>  <span class="hljs-attr">atime:</span> <span class="hljs-number">2018-05-16T12:52:00.656Z</span>,<br>  <span class="hljs-attr">mtime:</span> <span class="hljs-number">2018-05-16T12:54:30.067Z</span>,<br>  <span class="hljs-attr">ctime:</span> <span class="hljs-number">2018-05-16T12:54:30.067Z</span>,<br>  <span class="hljs-attr">birthtime:</span> <span class="hljs-number">2018-05-16T12:52:00.656Z</span> <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-6-获取一个文件夹里面所有文件-包括文件夹里面的文件夹"><a href="#4-6-获取一个文件夹里面所有文件-包括文件夹里面的文件夹" class="headerlink" title="4.6 获取一个文件夹里面所有文件(包括文件夹里面的文件夹)"></a>4.6 获取一个文件夹里面所有文件(包括文件夹里面的文件夹)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br>http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (req.<span class="hljs-property">url</span> === <span class="hljs-string">&#x27;/favicon.ico&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>fs.<span class="hljs-title function_">readdir</span>(<span class="hljs-string">&#x27;../1、http模块&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <span class="hljs-comment">// 返回的data是个数组</span><br>&#125;);<br>res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;success&#x27;</span>);<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="5、stream-流"><a href="#5、stream-流" class="headerlink" title="5、stream (流)"></a>5、stream (流)</h2><blockquote><p>什么是流？流是一种抽象的数据结构。想象水流，当在水管中流动时，就可以从某个地方（例如自来水厂）源源不断地到达另一个地方（比如你家的洗手池）。我们也可以把数据看成是数据流，比如你敲键盘的时候，就可以把每个字符依次连起来，看成字符流。这个流是从键盘输入到应用程序，实际上它还对应着一个名字：标准输入流（stdin）。如果应用程序把字符一个一个输出到显示器上，这也可以看成是一个流，这个流也有名字：标准输出流（stdout）。流的特点是数据是有序的，而且必须依次读取，或者依次写入，不能像Array那样随机定位。</p></blockquote><h3 id="5-1-读取流"><a href="#5-1-读取流" class="headerlink" title="5.1 读取流"></a>5.1 读取流</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">let</span> myFile = fs.<span class="hljs-title function_">createReadStream</span>(__dirname + <span class="hljs-string">&#x27;/test.txt&#x27;</span>);<br>myFile.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123; <span class="hljs-comment">// &#x27;data&#x27;,代表是接受收据时执行的函数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res); <span class="hljs-comment">//&lt;Buffer 69 6e 70 75 74 20 69 6e 70 75 74 20 69 6e 70 75 74 20 69 6e 70 75 74&gt;</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="5-2-写入流"><a href="#5-2-写入流" class="headerlink" title="5.2 写入流"></a>5.2 写入流</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> fs = require(&#x27;fs&#x27;);<br><span class="hljs-keyword">let</span> myReadFile = fs.create<span class="hljs-constructor">ReadStream(<span class="hljs-params">__dirname</span> + &#x27;<span class="hljs-operator">/</span><span class="hljs-params">test</span>.<span class="hljs-params">txt</span>&#x27;)</span>;<br>myReadFile.set<span class="hljs-constructor">Encoding(&#x27;<span class="hljs-params">utf8</span>&#x27;)</span>;<br><span class="hljs-keyword">let</span> myWriteFile = fs.create<span class="hljs-constructor">WriteStream(<span class="hljs-params">__dirname</span> + &#x27;<span class="hljs-operator">/</span><span class="hljs-params">new</span>.<span class="hljs-params">txt</span>&#x27;)</span>;<br>myReadFile.on(&#x27;data&#x27;,(res) =&gt; &#123;<br>myWriteFile.write(res);<br>&#125;);<br><br><br><br><span class="hljs-comment">//利用管道写入流</span><br><span class="hljs-keyword">let</span> fs = require(&#x27;fs&#x27;);<br><span class="hljs-keyword">let</span> readStream = fs.create<span class="hljs-constructor">ReadStream(<span class="hljs-params">__dirname</span> + &#x27;<span class="hljs-operator">/</span><span class="hljs-params">count</span>.<span class="hljs-params">js</span>&#x27;)</span>;<br><span class="hljs-keyword">let</span> writeStream = fs.create<span class="hljs-constructor">WriteStream(<span class="hljs-params">__dirname</span> + &#x27;<span class="hljs-operator">/</span><span class="hljs-params">a</span>.<span class="hljs-params">js</span>&#x27;)</span>;<br><br>readStream.pipe(writeStream);<br></code></pre></td></tr></table></figure><h2 id="6、http模块"><a href="#6、http模块" class="headerlink" title="6、http模块"></a>6、http模块</h2><h3 id="6-0-get和post请求区别"><a href="#6-0-get和post请求区别" class="headerlink" title="6.0 get和post请求区别"></a>6.0 get和post请求区别</h3><p>get请求数据在URL中，post请求数据不在URL中<br>post接收数据比get大很多</p><h3 id="6-1-创建web服务器"><a href="#6-1-创建web服务器" class="headerlink" title="6.1 创建web服务器"></a>6.1 创建web服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//初体验</span><br><span class="hljs-comment">// 引用模块</span><br><span class="hljs-keyword">let</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-comment">//创建一个服务器，回调函数表示收到请求后做的事，request是请求，response是响应</span><br><span class="hljs-keyword">let</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`服务器已经打开<span class="hljs-subst">$&#123;request.url&#125;</span>`</span>);<br>response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;完毕&#x27;</span>);<span class="hljs-comment">//必须要有end，不然一直在加载</span><br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>);<br><br><br><br><span class="hljs-keyword">let</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>); <span class="hljs-comment">//引入http模块</span><br><span class="hljs-keyword">let</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;);<span class="hljs-comment">//设置响应头</span><br>response.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;hello from application&#x27;</span>);<br>response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;end&#x27;</span>);<br>&#125;); <span class="hljs-comment">//创建server服务器</span><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<span class="hljs-comment">//监听3000端口</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server start at localhost:3000&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="6-2-响应JSON"><a href="#6-2-响应JSON" class="headerlink" title="6.2 响应JSON"></a>6.2 响应JSON</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">let</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;);<span class="hljs-comment">//设置响应头</span><br><span class="hljs-keyword">let</span> data = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xyp&#x27;</span>,<br><span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;man&#x27;</span>,<br><span class="hljs-attr">age</span>: <span class="hljs-number">25</span>,<br><span class="hljs-attr">job</span>: <span class="hljs-string">&#x27;developer&#x27;</span><br>&#125;<br>response.<span class="hljs-title function_">end</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>&#125;);<br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server start at localhost:3000&#x27;</span>);<br></code></pre></td></tr></table></figure><p>输出为<img src="/2018/05/14/node-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/TIM%E5%9B%BE%E7%89%8720180516220031.png" class=""></p><h3 id="6-3-响应HTML页面"><a href="#6-3-响应HTML页面" class="headerlink" title="6.3 响应HTML页面"></a>6.3 响应HTML页面</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">//直接把html写在变量里面</span><br><span class="language-xml">let http = require(&#x27;http&#x27;);</span><br><span class="language-xml">let server = http.createServer((request, response) =&gt; </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">response.writeHead(200, &#123;&#x27;Content-Type&#x27;: &#x27;text/html&#x27;&#125;</span><span class="language-xml">);//设置响应头</span><br><span class="language-xml">let data = `<span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>`;</span><br><span class="language-xml">response.end(data);</span><br><span class="language-xml">&#125;);</span><br><span class="language-xml">server.listen(3000);</span><br><span class="language-xml">console.log(&#x27;server start at localhost:3000&#x27;);</span><br></code></pre></td></tr></table></figure><p>输出为 <img src="/2018/05/14/node-js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/TIM%E5%9B%BE%E7%89%8720180516222743.png" class=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//读取外部文件</span><br><span class="hljs-keyword">let</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">let</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">let</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">request, response</span>) =&gt;</span> &#123;<br>response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span>&#125;);<span class="hljs-comment">//此处设置为‘text/plain’的话，浏览器将不会解析为html，会变成纯文本输出</span><br><span class="hljs-keyword">let</span> data = fs.<span class="hljs-title function_">createReadStream</span>(__dirname + <span class="hljs-string">&#x27;/transition01.html&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>);<br>data.<span class="hljs-title function_">pipe</span>(response);<br>&#125;);<br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server start at localhost:3000&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="7、路由"><a href="#7、路由" class="headerlink" title="7、路由"></a>7、路由</h2><h3 id="7-1-实现一个简单的路由"><a href="#7-1-实现一个简单的路由" class="headerlink" title="7.1 实现一个简单的路由"></a>7.1 实现一个简单的路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//app.js</span><br><span class="hljs-keyword">var</span> startServer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./server.js&#x27;</span>);<br>startServer.<span class="hljs-title function_">startServer</span>();<br><br><span class="hljs-comment">//server.js</span><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">startServer</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> onRequest = <span class="hljs-keyword">function</span>(<span class="hljs-params">request, response</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(request.<span class="hljs-property">url</span>); <span class="hljs-comment">//输出的是localhost:3000/admin ，3000后面的内容，例如本例输出的是‘/admin’</span><br>        <span class="hljs-keyword">if</span> (request.<span class="hljs-property">url</span> === <span class="hljs-string">&#x27;/&#x27;</span> || request.<span class="hljs-property">url</span> === <span class="hljs-string">&#x27;/home&#x27;</span>) &#123;<br>            response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span> &#125;);<br>            fs.<span class="hljs-title function_">createReadStream</span>(__dirname + <span class="hljs-string">&#x27;/index.html&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>).<span class="hljs-title function_">pipe</span>(response);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (request.<span class="hljs-property">url</span> === <span class="hljs-string">&#x27;/review&#x27;</span>) &#123;<br>            response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span> &#125;);<br>            fs.<span class="hljs-title function_">createReadStream</span>(__dirname + <span class="hljs-string">&#x27;/review.html&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>).<span class="hljs-title function_">pipe</span>(response);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (request.<span class="hljs-property">url</span> === <span class="hljs-string">&#x27;/api/v1/records&#x27;</span>) &#123;<br>            response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span> &#125;);<br>            <span class="hljs-keyword">var</span> jsonObj = &#123;<br>                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;hfpp2012&quot;</span><br>            &#125;;<br>            response.<span class="hljs-title function_">end</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(jsonObj));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">404</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span> &#125;);<br>            fs.<span class="hljs-title function_">createReadStream</span>(__dirname + <span class="hljs-string">&#x27;/404.html&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>).<span class="hljs-title function_">pipe</span>(response);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> server = http.<span class="hljs-title function_">createServer</span>(onRequest);<br><br>    server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server started on localhost port 3000&#x27;</span>);<br>&#125;<br><br><span class="hljs-built_in">exports</span>.<span class="hljs-property">startServer</span> = startServer;<br></code></pre></td></tr></table></figure><h2 id="8、express框架的使用"><a href="#8、express框架的使用" class="headerlink" title="8、express框架的使用"></a>8、express框架的使用</h2><h3 id="8-1-express创建web服务"><a href="#8-1-express创建web服务" class="headerlink" title="8.1 express创建web服务"></a>8.1 express创建web服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">let</span> server = <span class="hljs-title function_">express</span>();<br><br>server.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/a.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br>res.<span class="hljs-title function_">end</span>();<br>&#125;) <span class="hljs-comment">// 用use处理请求</span><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决span标签内意外出现的空格</title>
    <link href="/2018/05/12/%E8%A7%A3%E5%86%B3span%E6%A0%87%E7%AD%BE%E5%86%85%E6%84%8F%E5%A4%96%E5%87%BA%E7%8E%B0%E7%9A%84%E7%A9%BA%E6%A0%BC/"/>
    <url>/2018/05/12/%E8%A7%A3%E5%86%B3span%E6%A0%87%E7%AD%BE%E5%86%85%E6%84%8F%E5%A4%96%E5%87%BA%E7%8E%B0%E7%9A%84%E7%A9%BA%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<p>今天下午实现一个保留用户换行的功能的时候意外的遇到的一个bug  </p><img src="/2018/05/12/%E8%A7%A3%E5%86%B3span%E6%A0%87%E7%AD%BE%E5%86%85%E6%84%8F%E5%A4%96%E5%87%BA%E7%8E%B0%E7%9A%84%E7%A9%BA%E6%A0%BC/TIM%E5%9B%BE%E7%89%8720180512163926.png" class="">  <p>上图是输入的内容，希望展示的时候能够带有换行，于是机智的我给span加上了一个css属性<code>white-space: pre</code><br>然后打开页面看效果却发现  </p><img src="/2018/05/12/%E8%A7%A3%E5%86%B3span%E6%A0%87%E7%AD%BE%E5%86%85%E6%84%8F%E5%A4%96%E5%87%BA%E7%8E%B0%E7%9A%84%E7%A9%BA%E6%A0%BC/TIM%E5%9B%BE%E7%89%8720180512164136.png" class="">  <p>什么鬼？？？为什么会出现了首行的空格，于是各种debug无果之后…</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;span style=<span class="hljs-string">&quot;white-space: pre;&quot;</span>&gt;&#123;&#123; qa_comment &#125;&#125;&lt;/span&gt;<br></code></pre></td></tr></table></figure><p>发现把span写在一行竟然神奇的解决了bug…</p><img src="/2018/05/12/%E8%A7%A3%E5%86%B3span%E6%A0%87%E7%AD%BE%E5%86%85%E6%84%8F%E5%A4%96%E5%87%BA%E7%8E%B0%E7%9A%84%E7%A9%BA%E6%A0%BC/TIM%E5%9B%BE%E7%89%8720180512164358.png" class=""><p>记录一下，防止以后再遇到不知道怎么解决…</p>]]></content>
    
    
    <categories>
      
      <category>BUG集锦</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BUG集锦</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>改变浏览器滚动条样式</title>
    <link href="/2018/05/11/%E6%94%B9%E5%8F%98%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/"/>
    <url>/2018/05/11/%E6%94%B9%E5%8F%98%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>当块级内容区域超出块级元素范围的时候，就会以滚动条的形式展示，你可以滚动里面的内容，里面的内容不会超出块级区域范围。<br>有时候我们需要自定义滚动条的样式，比如一开始就它显示，比如想改变滚动条的颜色，设置轨道的样式等</p></blockquote><h2 id="认识chrome下的滚动条"><a href="#认识chrome下的滚动条" class="headerlink" title="认识chrome下的滚动条"></a>认识chrome下的滚动条</h2><img src="/2018/05/11/%E6%94%B9%E5%8F%98%E6%B5%8F%E8%A7%88%E5%99%A8%E6%BB%9A%E5%8A%A8%E6%9D%A1%E6%A0%B7%E5%BC%8F/1254557929-5a570728e504b_articlex.png" class="">  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css">//设置scrollbar的为CSS伪元素，对应上图的数字<br>::-webkit-scrollbar              &#123; <span class="hljs-comment">/* 1 */</span> &#125; //滚动条整体部分<br>::-webkit-scrollbar-button       &#123; <span class="hljs-comment">/* 2 */</span> &#125; //滚动条两端的按钮<br>::-webkit-scrollbar-track        &#123; <span class="hljs-comment">/* 3 */</span> &#125; // 外层轨道<br>::-webkit-scrollbar-track-piece  &#123; <span class="hljs-comment">/* 4 */</span> &#125; //内层轨道，滚动条中间部分（除去）<br>::-webkit-scrollbar-thumb        &#123; <span class="hljs-comment">/* 5 */</span> &#125; //滚动条里面可以拖动的那个<br>::-webkit-scrollbar-corner       &#123; <span class="hljs-comment">/* 6 */</span> &#125; //边角<br>::-webkit-resizer                &#123; <span class="hljs-comment">/* 7 */</span> &#125; //定义右下角拖动块的样式<br><br>::-webkit-scrollbar &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>&#125;//实现chrome下，隐藏滚动条但是仍然可以滚动的功能<br></code></pre></td></tr></table></figure><p>点击这边查看<a href="https://xypecho.github.io/test/scrollbar.html">demo</a></p><h2 id="修改firefox下的滚动条样式"><a href="#修改firefox下的滚动条样式" class="headerlink" title="修改firefox下的滚动条样式"></a>修改firefox下的滚动条样式</h2><p>火狐本身没办法通过CSS来自定义滚动条，但是可以通过一些JS库来模拟，例如<a href="https://github.com/utatti/perfect-scrollbar">perfect-scrollbar</a><br>perfect-scrollbar的使用方法很简单  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PerfectScrollbar</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;perfect-scrollbar&#x27;</span>; <span class="hljs-comment">//引入包</span><br><br><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">PerfectScrollbar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PerfectScrollbar</span>(<span class="hljs-string">&#x27;#nav_wrapper&#x27;</span>); <span class="hljs-comment">//nav_wrapper是需要滚动的容器的id</span><br>  &#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><p>点击这里查看<a href="https://xypecho.github.io/test/scrollBar/fireFoxBar.html">deno</a></p><h2 id="修改IE下的滚动条样式"><a href="#修改IE下的滚动条样式" class="headerlink" title="修改IE下的滚动条样式"></a>修改IE下的滚动条样式</h2><p>如果你们公司还没放弃IE的话…<a href="https://www.cnblogs.com/koleyang/p/5484922.html">这里</a>或许有你想要的</p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios使用说明</title>
    <link href="/2018/05/11/axios%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2018/05/11/axios%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h2 id="为什么转用axios"><a href="#为什么转用axios" class="headerlink" title="为什么转用axios"></a>为什么转用axios</h2><p>由于vue的作者尤雨溪大大说了，vue2.0以后的版本已经不再维护<code>vue-resource</code>了，推荐大家使用axios；一番摸索之后，发现axios的使用和ajax极其相似但也有很多不同的地方，于是记下来方面以后回顾</p><span id="more"></span><h2 id="对比ajax和axios的使用方法"><a href="#对比ajax和axios的使用方法" class="headerlink" title="对比ajax和axios的使用方法"></a>对比ajax和axios的使用方法</h2><p>在使用axios之前先回顾下如何用jquery的ajax来进行请求:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-comment">//此处也可以说是GET</span><br><span class="hljs-attr">url</span>: url,<br><span class="hljs-attr">data</span>: data,<br><span class="hljs-attr">dataType</span>: dataType,<br><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">res, status</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;,<br><span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>在vue、react等MVVM等框架兴起之前，jquery基本是前端的必备工具，而jquery基于原生XHR的封装的ajax更成为了前后端交互的主要方式，而现在jquery明显有些过时了，下面展示下如何用axios进行数据请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//get请求</span><br>axios.<span class="hljs-title function_">get</span>(url, &#123;<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">ID</span>: <span class="hljs-number">12345</span><br>    &#125;<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>  &#125;);<br><br><span class="hljs-comment">//post请求</span><br>axios.<span class="hljs-title function_">post</span>(url, &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Flintstone&#x27;</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>  &#125;);<br><span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><h2 id="vue项目里面使用axios使用"><a href="#vue项目里面使用axios使用" class="headerlink" title="vue项目里面使用axios使用"></a>vue项目里面使用axios使用</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> axios<br></code></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>目前vue里面使用axios大抵是如下两种方式</p><h5 id="1、和vue-resource使用类似"><a href="#1、和vue-resource使用类似" class="headerlink" title="1、和vue-resource使用类似"></a>1、和vue-resource使用类似</h5><p>在main.js里面引入</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">import axios from <span class="hljs-string">&quot;axios&quot;</span>;<br><br><span class="hljs-comment">//与很多第三方模块不同的是，axios不能使用use方法，转而应该进行如下操作</span><br>Vue.prototype.<span class="hljs-symbol">$a</span>xios = axios;<br><span class="hljs-comment">//然后就可以在vue的组件里面使用了</span><br>this.<span class="hljs-symbol">$a</span>xios.get(<span class="hljs-string">&quot;/seller&quot;</span>,&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-number">123</span>&#125;).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(res);<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="2、在需要的模块或者组件里面使用"><a href="#2、在需要的模块或者组件里面使用" class="headerlink" title="2、在需要的模块或者组件里面使用"></a>2、在需要的模块或者组件里面使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>;<br><br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Flintstone&#x27;</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>  &#125;);<br></code></pre></td></tr></table></figure><h2 id="如何利用axios来实现跨域"><a href="#如何利用axios来实现跨域" class="headerlink" title="如何利用axios来实现跨域"></a>如何利用axios来实现跨域</h2><p>此处以获取QQ音乐的歌词为例，首先打开build文件夹下面的<code>webpack.dev.conf.js</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>) <span class="hljs-comment">//需要npm install express</span><br><span class="hljs-keyword">var</span> axios = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>)<br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_ invoke__">express</span>();<br><span class="hljs-keyword">var</span> apiRoutes = express.<span class="hljs-title function_ invoke__">Router</span>();<br>app.<span class="hljs-keyword">use</span>(<span class="hljs-string">&#x27;/api&#x27;</span>, apiRoutes)<br></code></pre></td></tr></table></figure><p>然后在devWebpackConfig里面的devServer这边写代码如下图：  </p><img src="/2018/05/11/axios%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/TIM%E5%9B%BE%E7%89%8720180511224508.png" class=""><p>主要代码就是before里面的这段。<br>然后在src下面新建一个api文件夹  </p><img src="/2018/05/11/axios%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/TIM%E5%9B%BE%E7%89%8720180511225348.png" class="">  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span>; <span class="hljs-comment">//首先引入axios</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getLyrics</span>(<span class="hljs-params">mid</span>) &#123;<br>  <span class="hljs-keyword">const</span> url = <span class="hljs-string">&#x27;/api/lyric&#x27;</span>; <span class="hljs-comment">//这边是在webpack.dev.conf.js中设置的接口的别名</span><br>  <span class="hljs-keyword">const</span> param = &#123;<br>    <span class="hljs-attr">g_tk</span>: <span class="hljs-number">1928093487</span>,<br>    <span class="hljs-attr">inCharset</span>: <span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>    <span class="hljs-attr">outCharset</span>: <span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>    <span class="hljs-attr">notice</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">format</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>    <span class="hljs-attr">songmid</span>: mid,<br>    <span class="hljs-attr">platform</span>: <span class="hljs-string">&#x27;yqq&#x27;</span>,<br>    <span class="hljs-attr">hostUin</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">needNewCode</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">categoryId</span>: <span class="hljs-number">10000000</span>,<br>    <span class="hljs-attr">pcachetime</span>: +<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>  &#125;; <span class="hljs-comment">//此处是正常获取数据需要传递的参数</span><br>  <span class="hljs-keyword">return</span> axios.<span class="hljs-title function_">get</span>(url, &#123;<br>    <span class="hljs-attr">params</span>:param<br>  &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>);<br>&#125;) <span class="hljs-comment">//开始获取数据</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在想要获取刚刚得到数据的地方引入<code>getLyrics</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;getLyrics&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;src/api/lyrics&#x27;</span>;<br><br><span class="hljs-title function_">getLyrics</span>(mid).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;);<br></code></pre></td></tr></table></figure><p>上面这些就是axios的基本使用方法,更多详细信息可以移步<a href="https://www.kancloud.cn/yunye/axios/234845">这里</a></p>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
      <category>axios</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取两个数字之间的随机数以及如何打乱数组</title>
    <link href="/2018/05/03/%E8%8E%B7%E5%8F%96%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/2018/05/03/%E8%8E%B7%E5%8F%96%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%AD%97%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>Math.random()可以获取到0到1之间的随机数，但是要获取指定值之间的任意数值的话就需要一定的数学计算了，下面是代码存档</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">min,max</span>) &#123;<br>  document.writeln(Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">max</span> - <span class="hljs-built_in">min</span> + <span class="hljs-number">1</span>) +<span class="hljs-built_in">min</span>));<br>&#125;;<br>setInterval(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  test(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>);<br>&#125;,<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>点击<a href="https://xypecho.github.io/test/random.html">这里</a>查看demo</p><h3 id="拓展1、-高效打乱数组的方法"><a href="#拓展1、-高效打乱数组的方法" class="headerlink" title="拓展1、 高效打乱数组的方法"></a>拓展1、 高效打乱数组的方法</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">shuffle</span>(<span class="hljs-params">arr</span>) &#123;<br>    arr.<span class="hljs-built_in">sort</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> Math.<span class="hljs-built_in">random</span>() - <span class="hljs-number">0.5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="拓展2、-打乱数组的方法"><a href="#拓展2、-打乱数组的方法" class="headerlink" title="拓展2、 打乱数组的方法"></a>拓展2、 打乱数组的方法</h3><p>上面的方法并不是<strong>真随机</strong>打乱数组，每个元素仍然有很大机率在它原来的位置附近出现。<a href="https://oldj.net/blog/2017/01/23/shuffle-an-array-in-javascript/">详见这里</a></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs maxima">function getRandom(<span class="hljs-built_in">min</span>, <span class="hljs-built_in">max</span>) &#123;<br><span class="hljs-built_in">return</span> Math.<span class="hljs-built_in">floor</span>(Math.<span class="hljs-built_in">random</span>() * (<span class="hljs-built_in">max</span> - <span class="hljs-built_in">min</span> + <span class="hljs-number">1</span>) +<span class="hljs-built_in">min</span>);<br>&#125;<br>function shuffle(arr) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">let</span> i = <span class="hljs-number">0</span>; i &lt; arr.<span class="hljs-built_in">length</span>; i++) &#123;<br><span class="hljs-built_in">let</span> temp = getRandom(<span class="hljs-number">0</span>, i);<br><span class="hljs-built_in">let</span> t = arr[i];<br>arr[i] = arr[temp];<br>arr[temp] = t;<br>&#125;<br><span class="hljs-built_in">return</span> arr;<br>&#125;<br><span class="hljs-built_in">let</span> arr = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>arr[i] = i;<br>&#125;<br>console.<span class="hljs-built_in">log</span>(shuffle(arr));<br></code></pre></td></tr></table></figure><p>es6的实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">shuffle</span>(<span class="hljs-params">arr</span>) &#123;<br><span class="hljs-keyword">let</span> i = arr.<span class="hljs-property">length</span>;<br><span class="hljs-keyword">while</span> (i) &#123;<br><span class="hljs-keyword">let</span> j = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * i--);<br>[arr[j], arr[i]] = [arr[i], arr[j]];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css实现保留返回数据的回车符</title>
    <link href="/2018/04/18/css%E5%AE%9E%E7%8E%B0%E4%BF%9D%E7%95%99%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E7%9A%84%E5%9B%9E%E8%BD%A6%E7%AC%A6/"/>
    <url>/2018/04/18/css%E5%AE%9E%E7%8E%B0%E4%BF%9D%E7%95%99%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E7%9A%84%E5%9B%9E%E8%BD%A6%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>对于一般的从后端拿的数据中包含换行符的，要么是使用正则来匹配替换，要么是用’pre’这个标签来实现.<br>但是在用vue+element项目中的表格里面时字段都是用props传进去的，用formatter格式也很复杂，这时就需要一个css的黑科技属性了</p><blockquote><p>white-space: pre (空白会被浏览器保留。其行为方式类似 HTML 中的 pre 标签)</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;el-<span class="hljs-keyword">table</span>-<span class="hljs-keyword">column</span><br>  <span class="hljs-keyword">class</span>-<span class="hljs-type">name</span>=<span class="hljs-string">&#x27;command&#x27;</span><br>  min-width=<span class="hljs-string">&#x27;120&#x27;</span><br>  prop=&quot;command&quot;<br>  label=&quot;命令&amp;响应&quot;&gt;<br>&lt;/el-<span class="hljs-keyword">table</span>-<span class="hljs-keyword">column</span>&gt;<br><br><br>.command<br>  .cell<br>    white-space: pre;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决子组件获取不到父组件传值问题</title>
    <link href="/2018/04/07/%E8%A7%A3%E5%86%B3%E5%AD%90%E7%BB%84%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E9%97%AE%E9%A2%98/"/>
    <url>/2018/04/07/%E8%A7%A3%E5%86%B3%E5%AD%90%E7%BB%84%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>最近自己在用vue仿写QQ音乐是遇到一个问题：父组件往子组件里面传了3个值，前两个在子组件里面能获取到，最后一个怎么都获取不到。  </p><img src="/2018/04/07/%E8%A7%A3%E5%86%B3%E5%AD%90%E7%BB%84%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E9%97%AE%E9%A2%98/TIM%E5%9B%BE%E7%89%8720180407205309.png" class="">  <p>(上图这是父组件往子组件传的三个值)</p><span id="more"></span><img src="/2018/04/07/%E8%A7%A3%E5%86%B3%E5%AD%90%E7%BB%84%E4%BB%B6%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E7%88%B6%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC%E9%97%AE%E9%A2%98/TIM%E5%9B%BE%E7%89%8720180407210049.png" class="">  <p>(这是父组件里面获取song这个字段的方式)<br>在百度之后才知道 <font color='red'>异步从接口里取的，那这个组件在任何生命周期里都取不到，而应该在接口调取后取到。</font><br>但是如果在子组件再调一次接口虽然能解决问题，但明显很不优雅，于是有了如下两个解决方案</p><ul><li>在组件上加上v-if&#x3D;”song.length”，可以确保song有值后调用，然后你就可以在生命周期created里面取到值了。</li><li>可以参考<a href="https://cn.vuejs.org/v2/guide/components.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">vue官方文档-异步组件</a>这一块 Vue.js-异步组件 来实现。</li></ul><p>下面是第一种解决方案的代码：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;slider&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;singerDetail&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">musicList</span> <span class="hljs-attr">:avater</span>=<span class="hljs-string">&#x27;singer.avater&#x27;</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&#x27;singer.name&#x27;</span> <span class="hljs-attr">:songList</span>=<span class="hljs-string">&#x27;song&#x27;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;song.length&#x27;</span>&gt;</span> //加上v-if确保song有值<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">musicList</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第二中解决方案异步组件暂时还没研究懂，这个坑等我研究懂了再填…</p>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css实现渐变色</title>
    <link href="/2018/04/02/css%E5%AE%9E%E7%8E%B0%E6%B8%90%E5%8F%98%E8%89%B2/"/>
    <url>/2018/04/02/css%E5%AE%9E%E7%8E%B0%E6%B8%90%E5%8F%98%E8%89%B2/</url>
    
    <content type="html"><![CDATA[<img src="/2018/04/02/css%E5%AE%9E%E7%8E%B0%E6%B8%90%E5%8F%98%E8%89%B2/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_152264566613.png" class="">  <p>这是要实现的效果图,经常能看到这样一种效果，最初以为是用ps实现的后来发现了css3的一个关于背景图的属性<em>background-clip</em>,下面上实现的代码</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs maxima">.<span class="hljs-built_in">demo</span>-<span class="hljs-number">1</span> &#123;<br>  margin: 40px auto;<br>  <span class="hljs-built_in">width</span>: 200px;<br>  <span class="hljs-built_in">height</span>: 40px;<br>  <span class="hljs-built_in">border</span>-<span class="hljs-built_in">radius</span>: 20px;<br>  line-<span class="hljs-built_in">height</span>: 40px;<br>  text-align: <span class="hljs-built_in">center</span>;<br>  <span class="hljs-built_in">color</span>: white;<br>  <br>  <span class="hljs-built_in">background</span>-<span class="hljs-built_in">image</span>: <span class="hljs-built_in">linear</span>-gradient(<br>                    90deg,<br>                    #7e40ee <span class="hljs-number">0</span>,<br>                    #63d9ee <span class="hljs-number">100</span><span class="hljs-symbol">%</span><br>    );<br>&#125;<br>&lt;div class=<span class="hljs-string">&quot;demo-1&quot;</span>&gt;<br>  按钮<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>点击<a href="https://xypecho.github.io/test/GradientColor.html">这里</a>看渐变色demo<br>参考链接<a href="https://juejin.im/post/5abdf558518825557e7880bd?utm_source=gold_browser_extension">#每日一记#让我们玩起流行的渐变色</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开源中国愚人节特效存档</title>
    <link href="/2018/04/01/%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD%E6%84%9A%E4%BA%BA%E8%8A%82%E7%89%B9%E6%95%88%E5%AD%98%E6%A1%A3/"/>
    <url>/2018/04/01/%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD%E6%84%9A%E4%BA%BA%E8%8A%82%E7%89%B9%E6%95%88%E5%AD%98%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>OSC愚人节首页的特效存档<span id="more"></span></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">//主要的css样式<br><span class="hljs-selector-class">.shake</span>&#123;<span class="hljs-attribute">display</span>:inherit;<span class="hljs-attribute">transform-origin</span>:center center;<span class="hljs-attribute">animation-name</span>:shake;<span class="hljs-attribute">animation-duration</span>:<span class="hljs-number">8s</span>;<span class="hljs-attribute">animation-timing-function</span>:ease-in-out;<span class="hljs-attribute">animation-iteration-count</span>:infinite&#125;<span class="hljs-keyword">@keyframes</span> shake&#123;<span class="hljs-number">2%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">2px</span>,<span class="hljs-number">10px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0.5deg</span>)&#125;<span class="hljs-number">4%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">8px</span>,-<span class="hljs-number">1px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">6%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">0px</span>,-<span class="hljs-number">2px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">8%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">8px</span>,-<span class="hljs-number">5px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">10%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">4px</span>,-<span class="hljs-number">3px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">12%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">8px</span>,<span class="hljs-number">10px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">14%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">3px</span>,<span class="hljs-number">10px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">16%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">7px</span>,<span class="hljs-number">9px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">18%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">9px</span>,<span class="hljs-number">2px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0.5deg</span>)&#125;<span class="hljs-number">20%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">7px</span>,<span class="hljs-number">5px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">22%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">8px</span>,<span class="hljs-number">4px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">24%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">2px</span>,<span class="hljs-number">9px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.5deg</span>)&#125;<span class="hljs-number">26%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">3px</span>,-<span class="hljs-number">9px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">28%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">1px</span>,-<span class="hljs-number">6px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">3.5deg</span>)&#125;<span class="hljs-number">30%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">2px</span>,<span class="hljs-number">10px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0.5deg</span>)&#125;<span class="hljs-number">32%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">7px</span>,<span class="hljs-number">3px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">34%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">3px</span>,-<span class="hljs-number">6px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">36%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">5px</span>,-<span class="hljs-number">7px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">38%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">8px</span>,<span class="hljs-number">10px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">3.5deg</span>)&#125;<span class="hljs-number">40%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">3px</span>,-<span class="hljs-number">1px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">42%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">7px</span>,<span class="hljs-number">8px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">44%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">6px</span>,-<span class="hljs-number">2px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">3.5deg</span>)&#125;<span class="hljs-number">46%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">4px</span>,<span class="hljs-number">8px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">3.5deg</span>)&#125;<span class="hljs-number">48%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">6px</span>,-<span class="hljs-number">5px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">50%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">10px</span>,<span class="hljs-number">5px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">52%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">2px</span>,-<span class="hljs-number">9px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">54%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">5px</span>,-<span class="hljs-number">7px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">56%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">10px</span>,-<span class="hljs-number">6px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.5deg</span>)&#125;<span class="hljs-number">58%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">3px</span>,<span class="hljs-number">8px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">60%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">7px</span>,-<span class="hljs-number">6px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">62%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">8px</span>,<span class="hljs-number">6px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">64%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">10px</span>,<span class="hljs-number">6px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">66%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">2px</span>,-<span class="hljs-number">1px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">3.5deg</span>)&#125;<span class="hljs-number">68%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">9px</span>,<span class="hljs-number">5px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">70%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">5px</span>,<span class="hljs-number">6px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.5deg</span>)&#125;<span class="hljs-number">72%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">1px</span>,<span class="hljs-number">9px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0.5deg</span>)&#125;<span class="hljs-number">74%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">5px</span>,<span class="hljs-number">0px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">3.5deg</span>)&#125;<span class="hljs-number">76%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">7px</span>,-<span class="hljs-number">8px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.5deg</span>)&#125;<span class="hljs-number">78%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">3px</span>,-<span class="hljs-number">5px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">80%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">2px</span>,<span class="hljs-number">9px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">82%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">7px</span>,<span class="hljs-number">6px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">3.5deg</span>)&#125;<span class="hljs-number">84%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">8px</span>,-<span class="hljs-number">2px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">86%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">5px</span>,-<span class="hljs-number">6px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">88%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">9px</span>,<span class="hljs-number">0px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.5deg</span>)&#125;<span class="hljs-number">90%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">7px</span>,<span class="hljs-number">3px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.5deg</span>)&#125;<span class="hljs-number">92%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">9px</span>,-<span class="hljs-number">7px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.5deg</span>)&#125;<span class="hljs-number">94%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">10px</span>,<span class="hljs-number">10px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">96%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">1px</span>,<span class="hljs-number">6px</span>) <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">2.5deg</span>)&#125;<span class="hljs-number">98%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">2px</span>,<span class="hljs-number">1px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">1.5deg</span>)&#125;<span class="hljs-number">0%</span>,<span class="hljs-number">100%</span>&#123;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0</span>)&#125;&#125;<span class="hljs-selector-class">.fool-day</span>&#123;<span class="hljs-attribute">display</span>:none;<span class="hljs-attribute">position</span>:fixed;<span class="hljs-attribute">z-index</span>:<span class="hljs-number">9999999</span>;<span class="hljs-attribute">background</span>:<span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">5</span>);<span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;<span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>&#125;<span class="hljs-selector-class">.fool-day</span> <span class="hljs-selector-tag">img</span>&#123;<span class="hljs-attribute">position</span>:fixed;<span class="hljs-attribute">display</span>:block;<span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;<span class="hljs-attribute">left</span>:<span class="hljs-number">50%</span>;<span class="hljs-attribute">transform</span>:<span class="hljs-built_in">translate</span>(-<span class="hljs-number">50%</span>,-<span class="hljs-number">50%</span>);<span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;&#125;<br><br></code></pre></td></tr></table></figure><p>戳<a href="https://xypecho.github.io/test/0sc4_1.html">这里</a>看demo</p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS调换数组元素位置</title>
    <link href="/2018/03/30/JS%E8%B0%83%E6%8D%A2%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E4%BD%8D%E7%BD%AE/"/>
    <url>/2018/03/30/JS%E8%B0%83%E6%8D%A2%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>项目上遇到一个需求，需要调换&#x2F;批量调换数组元素的位置，记录一下解决方案</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs prolog">例<span class="hljs-number">1</span>：a,b两个元素位置互换<br>arr1 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>];<br>arr1[<span class="hljs-number">1</span>]=arr1.splice(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,arr1[<span class="hljs-number">1</span>])[<span class="hljs-number">0</span>];<br>输出[<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>]<br><br><br>例<span class="hljs-number">2</span>：d的位置跳到第一位<br>arr2 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>];<br>arr2.splice(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>);<br>arr2.unshift(<span class="hljs-string">&#x27;d&#x27;</span>);<br>输出[<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>]<br><br>例<span class="hljs-number">3</span>：a的位置移到最后一位<br>arr3 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>];<br>arr3.splice(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>arr3.push(<span class="hljs-string">&#x27;a&#x27;</span>);<br>输出[<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>];<br><br>例<span class="hljs-number">4</span>：把cd的位置往前移动一位<br>arr4 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>];<br>let idx = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>arr4.forEach((val,index) =&gt; &#123;<br>  idx.forEach((item) =&gt; &#123;<br>    if (index == item) &#123;<br>      arr4[index<span class="hljs-number">-1</span>]=arr4.splice(index,<span class="hljs-number">1</span>,arr4[index<span class="hljs-number">-1</span>])[<span class="hljs-number">0</span>];<br>    &#125;<br>  &#125;);<br>&#125;);<br>输出[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>]<br><br>例<span class="hljs-number">5</span>：把ab的位置往后移动一位<br>arr5 = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>];<br>let idx = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>];<br>arr5.forEach((val) =&gt; &#123;<br>//马克，现在没思路<br>&#125;)<br></code></pre></td></tr></table></figure><p>点击<a href="https://xypecho.github.io/test/arrsort.html">这里</a>看demo</p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue里面动态更新echarts数据</title>
    <link href="/2018/03/28/vue%E9%87%8C%E9%9D%A2%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0echarts%E6%95%B0%E6%8D%AE/"/>
    <url>/2018/03/28/vue%E9%87%8C%E9%9D%A2%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0echarts%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>&#x2F;<em>先占坑，有机会在填</em>&#x2F;<br>前几天项目上用个功能，要用图表来动态显示传入的数据，看到这个需要一下子就想到了<a href="http://echarts.baidu.com/">echarts</a>,<br>于是开始鼓捣起来。<br>由于是第一次使用echarts，只能把文档里面的demo在vue里面展示出来不知道怎么往图表里面动态传数据，百度之后发现基本全是写的死数据，自己折腾了半天终于搞起来了，下面上代码:</p><span id="more"></span><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">initCharts() &#123;<br>  <span class="hljs-keyword">this</span>.echartData = <span class="hljs-keyword">this</span>.historyTempData; <span class="hljs-comment">//从后端获取的获取</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.chart) &#123;<br>    <span class="hljs-keyword">this</span>.chart.clear();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">this</span>.chart = echarts.<span class="hljs-keyword">init</span>(document.getElementById(<span class="hljs-string">&#x27;temperChart&#x27;</span>));<br>  &#125;<br>  let tZeroData;<br>  let tOneData;<br>  let bedData;<br>  let chamberData;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.echartData.t0) &#123;<br>    tZeroData = <span class="hljs-keyword">this</span>.echartData.t0.map((<span class="hljs-keyword">val</span>) =&gt; [<span class="hljs-keyword">val</span>.time, <span class="hljs-keyword">val</span>.current, <span class="hljs-keyword">val</span>.machine_id]);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    tZeroData = [];<br>  &#125;<br>  console.log(tZeroData);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.echartData.t1) &#123;<br>    tOneData = <span class="hljs-keyword">this</span>.echartData.t1.map((<span class="hljs-keyword">val</span>) =&gt; [<span class="hljs-keyword">val</span>.time, <span class="hljs-keyword">val</span>.current, <span class="hljs-keyword">val</span>.machine_id]);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    tOneData = [];<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.echartData.bed) &#123;<br>    bedData = <span class="hljs-keyword">this</span>.echartData.bed.map((<span class="hljs-keyword">val</span>) =&gt; [<span class="hljs-keyword">val</span>.time, <span class="hljs-keyword">val</span>.current, <span class="hljs-keyword">val</span>.machine_id]);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    bedData = [];<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.echartData.chamber) &#123;<br>    chamberData = <span class="hljs-keyword">this</span>.echartData.chamber.map((<span class="hljs-keyword">val</span>) =&gt; [<span class="hljs-keyword">val</span>.time, <span class="hljs-keyword">val</span>.current, <span class="hljs-keyword">val</span>.machine_id]);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    chamberData = [];<br>  &#125;<br>  <span class="hljs-keyword">const</span> colors = [<span class="hljs-string">&#x27;#e60012&#x27;</span>, <span class="hljs-string">&#x27;#00b7ee&#x27;</span>, <span class="hljs-string">&#x27;#80c269&#x27;</span>, <span class="hljs-string">&#x27;#fff100&#x27;</span>];<br>  <span class="hljs-keyword">this</span>.chart.setOption(&#123;<br>    color: colors,<br>    legend: &#123;<br>      left: <span class="hljs-string">&#x27;center&#x27;</span>,<br>      <span class="hljs-keyword">data</span>: [<span class="hljs-string">&#x27;喷头一&#x27;</span>, <span class="hljs-string">&#x27;喷头二&#x27;</span>, <span class="hljs-string">&#x27;腔体&#x27;</span>, <span class="hljs-string">&#x27;底板&#x27;</span>]<br>    &#125;,<br>    toolbox: &#123;<br>      feature: &#123;<br>        saveAsImage: &#123;&#125;,<br>        dataView: &#123;<br>          optionToContent: function(opt) &#123;<br>            <span class="hljs-keyword">const</span> axisData = opt.series;<br>            <span class="hljs-keyword">const</span> series = opt.series;<br>            let table = <span class="hljs-string">&#x27;&lt;table border=&quot;1px&quot; style=&quot;width:100%;text-align:center;font-size:15px;border-collapse:collapse&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td style=&quot;width:20%&quot;&gt;时间&lt;/td&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td style=&quot;width:20%&quot;&gt;&#x27;</span> + series[<span class="hljs-number">0</span>].name + <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td style=&quot;width:20%&quot;&gt;&#x27;</span> + series[<span class="hljs-number">1</span>].name + <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td style=&quot;width:20%&quot;&gt;&#x27;</span> + series[<span class="hljs-number">2</span>].name + <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td style=&quot;width:20%&quot;&gt;&#x27;</span> + series[<span class="hljs-number">3</span>].name + <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>            <span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>, l = axisData[<span class="hljs-number">0</span>].<span class="hljs-keyword">data</span>.length; i &lt; l; i++) &#123;<br>              table += <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span> + axisData[<span class="hljs-number">0</span>].<span class="hljs-keyword">data</span>[i][<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span> + axisData[<span class="hljs-number">0</span>].<span class="hljs-keyword">data</span>[i][<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;度&lt;/td&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span> + axisData[<span class="hljs-number">1</span>].<span class="hljs-keyword">data</span>[i][<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;度&lt;/td&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span> + axisData[<span class="hljs-number">2</span>].<span class="hljs-keyword">data</span>[i][<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;度&lt;/td&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;td&gt;&#x27;</span> + axisData[<span class="hljs-number">3</span>].<span class="hljs-keyword">data</span>[i][<span class="hljs-number">1</span>] + <span class="hljs-string">&#x27;度&lt;/td&gt;&#x27;</span> +<br>                        <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>            &#125;<br>            table += <span class="hljs-string">&#x27;&lt;/tbody&gt;&lt;/table&gt;&#x27;</span>;<br>            <span class="hljs-keyword">return</span> table;<br>          &#125; <span class="hljs-comment">//数据视图时的格式</span><br>        &#125;,<br>        restore: &#123;&#125;<br>      &#125;<br>    &#125;,<br>    tooltip: &#123;<br>      show: <span class="hljs-literal">true</span>,<br>      trigger: <span class="hljs-string">&#x27;axis&#x27;</span>,<br>      formatter: function(param) &#123;<br>        <span class="hljs-keyword">return</span> `$&#123;param[<span class="hljs-number">0</span>].seriesName&#125;: $&#123;param[<span class="hljs-number">0</span>].<span class="hljs-keyword">data</span>[<span class="hljs-number">0</span>]&#125;, $&#123;Number(param[<span class="hljs-number">0</span>].<span class="hljs-keyword">data</span>[<span class="hljs-number">1</span>]).toFixed(<span class="hljs-number">2</span>)&#125;度`;<br>      &#125;,<br>      axisPointer: &#123;<br>        animation: <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;,<br>    xAxis: &#123;<br>      type: <span class="hljs-string">&#x27;time&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;时间&#x27;</span>,<br>      splitLine: &#123;<br>        show: <span class="hljs-literal">false</span><br>      &#125;,<br>      <span class="hljs-keyword">data</span>: []<br>    &#125;,<br>    yAxis: &#123;<br>      type: <span class="hljs-string">&#x27;value&#x27;</span>,<br>      name: <span class="hljs-string">&#x27;温度&#x27;</span>,<br>      max: function (<span class="hljs-keyword">val</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">val</span>.max + <span class="hljs-number">50</span>;<br>      &#125;,<br>      boundaryGap: [<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;100%&#x27;</span>],<br>      axisLabel: &#123;<br>        formatter: (value, index) =&gt; parseInt(value).toFixed(<span class="hljs-number">2</span>)<br>      &#125;,<br>      splitLine: &#123;<br>        show: <span class="hljs-literal">false</span><br>      &#125;<br>    &#125;,<br>    series: [<br>      &#123;<br>        name: <span class="hljs-string">&#x27;喷头一&#x27;</span>,<br>        type: <span class="hljs-string">&#x27;line&#x27;</span>,<br>        showSymbol: <span class="hljs-literal">false</span>,<br>        hoverAnimation: <span class="hljs-literal">false</span>,<br>        <span class="hljs-keyword">data</span>: tZeroData<br>      &#125;,<br>      &#123;<br>        name: <span class="hljs-string">&#x27;喷头二&#x27;</span>,<br>        type: <span class="hljs-string">&#x27;line&#x27;</span>,<br>        showSymbol: <span class="hljs-literal">false</span>,<br>        hoverAnimation: <span class="hljs-literal">false</span>,<br>        <span class="hljs-keyword">data</span>: tOneData<br>      &#125;,<br>      &#123;<br>        name: <span class="hljs-string">&#x27;腔体&#x27;</span>,<br>        type: <span class="hljs-string">&#x27;line&#x27;</span>,<br>        showSymbol: <span class="hljs-literal">false</span>,<br>        hoverAnimation: <span class="hljs-literal">false</span>,<br>        <span class="hljs-keyword">data</span>: chamberData<br>      &#125;,<br>      &#123;<br>        name: <span class="hljs-string">&#x27;底板&#x27;</span>,<br>        type: <span class="hljs-string">&#x27;line&#x27;</span>,<br>        showSymbol: <span class="hljs-literal">false</span>,<br>        hoverAnimation: <span class="hljs-literal">false</span>,<br>        <span class="hljs-keyword">data</span>: bedData<br>      &#125;<br>    ]<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript权威指南笔记</title>
    <link href="/2018/03/27/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/03/27/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="在函数体内，局部变量优先级高于全局变量"><a href="#在函数体内，局部变量优先级高于全局变量" class="headerlink" title="在函数体内，局部变量优先级高于全局变量"></a>在函数体内，局部变量优先级高于全局变量</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&#x27;global&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkscope</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&#x27;local&#x27;</span>;<br><span class="hljs-keyword">return</span> scope;<br>&#125;<br>checkscope(); <span class="hljs-comment">//输出‘local’</span><br><br><br><span class="hljs-comment">//下面是局部作用域嵌套的例子</span><br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&#x27;global&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkScope</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&#x27;local&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">nested</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&#x27;nested scope&#x27;</span>;<br><span class="hljs-keyword">return</span> scope;<br>&#125;<br><span class="hljs-keyword">return</span> nested();<br>&#125;<br>checkScope(); <span class="hljs-comment">//输出 &quot;nested scope&quot;</span><br></code></pre></td></tr></table></figure><h4 id="声明提前"><a href="#声明提前" class="headerlink" title="声明提前"></a>声明提前</h4><blockquote><p>JavaScript的函数作用域是指函数内声明的所有变量在函数体内始终是可见的。有意思的是，这意味着变量在声明之前甚至已经可用。JavaScript的这个特性被非正式的称为<code>声明提前（hoisting）</code>，即JavaScript函数里声明的所有变量都被提前至函数体的顶部。</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&#x27;global&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(scope); <span class="hljs-comment">//输出undefined</span><br><span class="hljs-keyword">var</span> scope = <span class="hljs-string">&#x27;local&#x27;</span>; <span class="hljs-comment">//变量在这里赋值，但在函数体内均有定义</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(scope); <span class="hljs-comment">//输出local</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上面例子里的f函数，第一行的<code>console.log(scope)</code>没有输出’global’是因为函数作用域的特性，局部变量在整个函数体始终是有定义的，也就是说，在函数体内的局部变量覆盖了同名的全局变量。<br>没有输出’local’是因为只有在函数执行到var语句的时候，局部变量才会被真正赋值。<br>上面的例子等价于：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> scope; <span class="hljs-comment">//在函数顶部声明了局部变量</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(scope); <span class="hljs-comment">//输出undefined，是因为变量存在，但没有赋值</span><br>scope = <span class="hljs-string">&#x27;local&#x27;</span>;<span class="hljs-comment">//这里将其初始化并赋值</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(scope); <span class="hljs-comment">//输出local</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><blockquote><p>当运算符在操作数之前，称为‘前增量’运算符，它对操作数进行增量运算，并返回计算后的值；<br>当运算符在操作数之后，称为‘后增量’运算符，它对操作数进行增量计算，但返回未做增量计算的值。</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> i = <span class="hljs-number">1</span>;j = ++i; //i和j值都是<span class="hljs-number">2</span> <br><span class="hljs-attribute">var</span> i = <span class="hljs-number">1</span>;j = i++; // i是<span class="hljs-number">2</span>，j是<span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><h4 id="throw语句"><a href="#throw语句" class="headerlink" title="throw语句"></a>throw语句</h4><blockquote><p>throw语句用来抛出一个用户自定义的异常。当前函数的执行将被停止（throw之后的语句将不会执行），并且控制将被传递到调用堆栈中的第一个catch块。如果调用者函数中没有catch块，程序将会终止。</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">function <span class="hljs-built_in">add</span>(num) &#123;<br>if (num &lt; <span class="hljs-number">0</span>) &#123;<br>throw new <span class="hljs-built_in">Error</span>(&#x27;num不能是负数&#x27;);<br>&#125;<br>for (let i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>console<span class="hljs-selector-class">.log</span>(i);<br>&#125;<br>&#125;<br><span class="hljs-built_in">add</span>(-<span class="hljs-number">1</span>); <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><img src="/2018/03/27/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0/TIM%E5%9B%BE%E7%89%8720180530094624.png" class=""><p>当抛出异常时，JavaScript解释器会立即停止当前正在执行的逻辑，并跳转至就近的异常处理程序。</p><h4 id="try-x2F-catch-x2F-finally语句"><a href="#try-x2F-catch-x2F-finally语句" class="headerlink" title="try&#x2F;catch&#x2F;finally语句"></a>try&#x2F;catch&#x2F;finally语句</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-comment">// 需要被执行的语句。</span><br>&#125;<br><span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-comment">// 如果在try块里有异常被抛出时执行的语句。</span><br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>  <span class="hljs-comment">// 无论是否有异常抛出或捕获这些语句都将执行。</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">let</span> num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;请输入一个正整数&#x27;</span>));<br><span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;num不是正整数&#x27;</span>);<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num * num);<br>&#125;<br><span class="hljs-keyword">catch</span>(e)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行结束&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2018/03/27/JavaScript%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0/TIM%E5%9B%BE%E7%89%8720180530102003.png" class=""><h4 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h4><blockquote><p>JavaScript查找某个未使用命名空间的变量时，会通过作用域链来查找，作用域链是跟执行代码的context或者包含这个变量的函数有关。’with’语句將某个对象添加的作用域链的顶部，如果在statement中有某个未使用命名空间的变量，跟作用域链中的某个属性同名，则这个变量将指向这个属性值。如果沒有同名的属性，则将拋出ReferenceError异常。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 如果要获取一个表单里面的address字段的值，通常是这样 document.forms[0].address.value</span><br><span class="hljs-comment">// 如果这种表达式在代码中多次出现，则可以使用with语句将form对象添加至作用域链的顶层：</span><br><span class="hljs-title function_">with</span>(<span class="hljs-params"><span class="hljs-variable language_">document</span>.forms[<span class="hljs-number">0</span>]</span>)&#123;<br>name.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>age.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>sex.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><blockquote><p>可以通过对象直接量、关键字new和es6中的Object.create()函数来创建对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//对象直接量</span><br><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><span class="hljs-keyword">let</span> arr = [];<br><br><br><span class="hljs-comment">//new 方法</span><br><span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-keyword">let</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br><span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-keyword">let</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;js&#x27;</span>); <span class="hljs-comment">//定义了名为 reg 的 RegExp 对象，其模式是 &quot;js&quot;,当您使用该 RegExp 对象在一个字符串中检索时，将寻找的是字符 &quot;js&quot;。</span><br><br><br><span class="hljs-comment">// Object.create()</span><br><span class="hljs-keyword">const</span> person = &#123;<br>  <span class="hljs-attr">isHuman</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">printIntroduction</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`My name is <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>. Am I human? <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.isHuman&#125;</span>`</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> me = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(person);<br><br>me.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;Matthew&quot;</span>; <span class="hljs-comment">// &quot;name&quot; is a property set on &quot;me&quot;, but not on &quot;person&quot;</span><br>me.<span class="hljs-property">isHuman</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// inherited properties can be overwritten</span><br><br>me.<span class="hljs-title function_">printIntroduction</span>();<br><span class="hljs-comment">// expected output: &quot;My name is Matthew. Am I human? true&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="属性getter和setter"><a href="#属性getter和setter" class="headerlink" title="属性getter和setter"></a>属性getter和setter</h4><blockquote><p>在es6中，属性值可以用一个或者两个方法替代，这两个方法就是getter和setter。由getter和setter定义的属性称做’存取器属性’(accessor property),它不同于’数据属性’(data property)，数据属性只有一个简单的值。</p></blockquote><p>下面是一个get的demo：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> obj = &#123;<br>  x: <span class="hljs-number">4</span>, <span class="hljs-comment">// x，y就是数据属性</span><br>  y: <span class="hljs-number">2</span>,<br>  <span class="hljs-function"><span class="hljs-keyword">get</span> <span class="hljs-title">z</span>()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.x * <span class="hljs-keyword">this</span>.y;<br>  &#125;<br>&#125;<br>console.log(obj.z); <span class="hljs-comment">// 8</span><br></code></pre></td></tr></table></figure><p>当程序查询存取器的属性值时，JavaScript代用getter方法（无参数），这个方法的返回值就是该属性存取表达式的值。当程序设置一个存取器属性值时，JavaScript调用setter方法，将赋值表达式右侧的值当作参数传入setter。从某种意义上来说，这个方法负责设置属性值，可以忽略该方法的返回值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>click it<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> obj = &#123;</span><br><span class="language-javascript">    <span class="hljs-comment">//这个数据属性包含下一个序列号</span></span><br><span class="language-javascript">    <span class="hljs-comment">//$符号暗示这个属性是一个私有属性</span></span><br><span class="language-javascript">    <span class="hljs-attr">$n</span>:<span class="hljs-number">0</span>,</span><br><span class="language-javascript">    <span class="hljs-comment">//返回当前值,然后自增</span></span><br><span class="language-javascript">    <span class="hljs-keyword">get</span> <span class="hljs-title function_">next</span>()&#123;<span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$n</span>++&#125;,</span><br><span class="language-javascript">    <span class="hljs-comment">//给n设置新的值,但只有当它比当前值大时才设置成功</span></span><br><span class="language-javascript">    <span class="hljs-keyword">set</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">n</span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span>(n&gt;=<span class="hljs-variable language_">this</span>.<span class="hljs-property">$n</span>)&#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">this</span>.<span class="hljs-property">$n</span> = n;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">throw</span> <span class="hljs-string">&quot;序列号的值不能比当前值小&quot;</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;;</span><br><span class="language-javascript">  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">increase</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">next</span>);</span><br><span class="language-javascript">    obj.<span class="hljs-property">next</span> = <span class="hljs-number">10</span>; <span class="hljs-comment">// 报错，Uncaught 序列号的值不能比当前值小</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h4><blockquote><p>稀疏数组就是包含从0开始的不连续索引的数组。通常，数组的length属性值代表数组中元素的个数。如果数组是稀疏的，length属性值大于元素的个数。</p></blockquote><h4 id="清空数组的小技巧"><a href="#清空数组的小技巧" class="headerlink" title="清空数组的小技巧"></a>清空数组的小技巧</h4><p>设置length属性为一个小于当前长度的非负整数n时，当前数组中那些索引值大于或等于n的元素将从中删除</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br>arr.<span class="hljs-built_in">length</span> = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// []</span><br></code></pre></td></tr></table></figure><p>还可以将数组的length属性值设置为大于其当前的长度。实际上并不会向数组中添加新的元素，它只是在数组尾部创建了一个空的区域。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// [1, 2, 3, 4, 5]</span><br>arr.<span class="hljs-built_in">length</span> = <span class="hljs-number">7</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr); <span class="hljs-comment">// [1, 2, 3, 4, 5, empty × 2]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript权威指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript权威指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue项目里面频繁打开组件数据异常问题</title>
    <link href="/2018/03/23/vue%E9%A1%B9%E7%9B%AE%E9%87%8C%E9%9D%A2%E9%A2%91%E7%B9%81%E6%89%93%E5%BC%80%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    <url>/2018/03/23/vue%E9%A1%B9%E7%9B%AE%E9%87%8C%E9%9D%A2%E9%A2%91%E7%B9%81%E6%89%93%E5%BC%80%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>最近项目里面遇到的一个bug,<img src="/2018/03/23/vue%E9%A1%B9%E7%9B%AE%E9%87%8C%E9%9D%A2%E9%A2%91%E7%B9%81%E6%89%93%E5%BC%80%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/TIM%E5%9B%BE%E7%89%8720180323125513.png" class="">这样一个表格点击编辑选项，<span id="more"></span><br>里面会出现一个模态框<img src="/2018/03/23/vue%E9%A1%B9%E7%9B%AE%E9%87%8C%E9%9D%A2%E9%A2%91%E7%B9%81%E6%89%93%E5%BC%80%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/TIM%E5%9B%BE%E7%89%8720180323125826.png" class="">里面会展示该行的数据，但是点击下一行里面的编辑的时候经常会出现这样一个bug：<br>点第一行的编辑后，关闭模态框，然后点击第二行的编辑出现的模态框里面的数据仍然是第一行的。<br>解决方案</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">//用vue里的watch钩子，观测点击编辑时传入的id，一旦id发生变化重新加载模态框里面的数据</span><br>watch: &#123;<br>  id: <span class="hljs-keyword">function</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">this</span>.getFilamentDetail();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS实现复制功能</title>
    <link href="/2018/03/21/JS%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/"/>
    <url>/2018/03/21/JS%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%8A%9F%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>最近公司项目有一个需求，实现一键复制激活码功能；发现用document的execCommand方法可以实现复制功能，下面上代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inp&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;btn&#x27;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&#x27;copytext()&#x27;</span>&gt;</span>点击复制<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">let</span> inp = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;inp&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">copytext</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">inp.<span class="hljs-title function_">select</span>();</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&quot;copy&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;复制成功&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><span id="more"></span><p>您可以点击<a href="https://xypecho.github.io/test/copyInputDemo.html">这里</a>看示例</p><h3 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h3><p>直接复制p标签之类的里面的文本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span>这是被复制的文本<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inp&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&#x27;copyText()&#x27;</span>&gt;</span>点击复制p标签里面的内容<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;粘贴到这里试试&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">copyText</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> txt = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;text&#x27;</span>).<span class="hljs-property">innerText</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> inp = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;inp&#x27;</span>);</span><br><span class="language-javascript">inp.<span class="hljs-property">value</span> = txt;</span><br><span class="language-javascript">inp.<span class="hljs-title function_">select</span>();</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;copy&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;复制成功&#x27;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>您可以点击<a href="https://xypecho.github.io/test/copyPdemo.html">这里</a>看复制p标签的示例</p><h3 id="改良篇"><a href="#改良篇" class="headerlink" title="改良篇"></a>改良篇</h3><p>利用Range 对象和HTML5的Selection API</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> copy(el) &#123;<br>var range = document.create<span class="hljs-constructor">Range()</span>;<br>var <span class="hljs-keyword">end</span> = el.childNodes.length;<br>range.set<span class="hljs-constructor">Start(<span class="hljs-params">el</span>,0)</span>;<br>range.set<span class="hljs-constructor">End(<span class="hljs-params">el</span>,<span class="hljs-params">end</span>)</span>;<br><br>var selection = window.get<span class="hljs-constructor">Selection()</span>;<br>selection.remove<span class="hljs-constructor">AllRanges()</span>;<br>selection.add<span class="hljs-constructor">Range(<span class="hljs-params">range</span>)</span>;<br>document.exec<span class="hljs-constructor">Command(<span class="hljs-string">&quot;copy&quot;</span>,<span class="hljs-params">false</span>,<span class="hljs-params">null</span>)</span>;<br>selection.remove<span class="hljs-constructor">Range(<span class="hljs-params">range</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>首先是利用**document.createRange()**创建一个 Range 对象 ,然后获取所需复制元素的子元素的长度大小，然后调用Range对象的setStart和setEnd方法设置选择区域的大小。<br>此时只是设置了选择区域的大小，实际上在window中并没有真正选中，所以还需要调用window.getSelection()生成一个 Selection 对象，在添加选区之前最好先调用selection.removeAllRanges()清除其他的选区，否则浏览器可能会发出下面的警告，然后再调用 Selection 对象的addRange方法，将上一步的 range 作为参数传入，即可将所需复制的元素真正设置为被选择区域。<br>现在就可以像平时选中文字后调用document.execCommand来实现将被选择区域的文字复制到剪贴板。<br>最后还需要调用 Selection 对象的removeRange方法将 Range 对象移除，保证被选择区域永远只有一个被选择的元素，否则某些浏览器在下次可能会因为有两个被选择元素而发出警告或者报错。</p></blockquote><h3 id="最终版"><a href="#最终版" class="headerlink" title="最终版"></a>最终版</h3><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const clipboardWriteText = <span class="hljs-function"><span class="hljs-params">(copyText)</span> =&gt;</span> &#123;<br><span class="hljs-regexp">//</span> 判断是否存在clipboard并且是安全的协议<br><span class="hljs-keyword">if</span> (navigator.clipboard &amp;&amp; window.isSecureContext) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br>navigator.clipboard<br>.writeText(copyText)<br>.<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>resolve();<br>&#125;)<br>.<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;复制失败&#x27;</span>));<br>&#125;);<br>&#125;);<br>&#125;<br><span class="hljs-regexp">//</span> 否则用被废弃的execCommand<br>const textArea = document.createElement(<span class="hljs-string">&#x27;textarea&#x27;</span>);<br>textArea.value = copyText;<br><span class="hljs-regexp">//</span> 使text area不在viewport，同时设置不可见<br>textArea.style.position = <span class="hljs-string">&#x27;absolute&#x27;</span>;<br>textArea.style.opacity = <span class="hljs-string">&#x27;0&#x27;</span>;<br>textArea.style.left = <span class="hljs-string">&#x27;-999999px&#x27;</span>;<br>textArea.style.top = <span class="hljs-string">&#x27;-999999px&#x27;</span>;<br>document.body.append(textArea);<br>textArea.focus();<br>textArea.select();<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve, reject)</span> =&gt;</span> &#123;<br><span class="hljs-regexp">//</span> 执行复制命令并移除文本框<br><span class="hljs-keyword">if</span> (document.execCommand(<span class="hljs-string">&#x27;copy&#x27;</span>)) &#123;<br>document.execCommand(<span class="hljs-string">&#x27;copy&#x27;</span>);<br>resolve();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;复制失败&#x27;</span>));<br>&#125;<br>textArea.remove();<br>&#125;);<br>&#125;;<br><br><span class="hljs-regexp">//</span> 使用<br>clipboardWriteText(<span class="hljs-string">&#x27;balabalabala&#x27;</span>)<br>.<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>console.log(<span class="hljs-string">&#x27;复制成功&#x27;</span>);<br>&#125;)<br>.<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>console.log(<span class="hljs-string">&#x27;复制失败&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><a href="https://juejin.im/post/5ae1d75f6fb9a07aab298faf?utm_source=gold_browser_extension">参考链接</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue实现进度条</title>
    <link href="/2018/03/14/vue%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <url>/2018/03/14/vue%E5%AE%9E%E7%8E%B0%E8%BF%9B%E5%BA%A6%E6%9D%A1/</url>
    
    <content type="html"><![CDATA[<p>以前用jquery切图的时候就很好奇进度条要怎么写，一直没机会写。最近公司项目里面有个文件上传显示进度条的功能，用vue实现了一下，发现数据绑定作用下，进度条很简单就可以实现了。下面上代码</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;start&#x27;</span>&gt;</span>start<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress_wrapper&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;progress&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&#x27;&#123;width:`$&#123;percentage&#125;%`&#125;&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">percentage</span>&#125;&#125;</span><span class="language-xml">%<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> app =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">data</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">percentage</span>:<span class="hljs-number">0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-attr">methods</span>:&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-title function_">start</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">()=&gt;</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">percentage</span>&lt;<span class="hljs-number">100</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">this</span>.<span class="hljs-property">percentage</span> +=<span class="hljs-number">1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;,<span class="hljs-number">100</span>)</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><span id="more"></span><p>您可以点击<a href="https://xypecho.github.io/test/progress.html">这里</a>看demo</p>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es6实现图片全加载完再显示到网页</title>
    <link href="/2018/03/08/es6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%85%A8%E5%8A%A0%E8%BD%BD%E5%AE%8C%E5%86%8D%E6%98%BE%E7%A4%BA%E5%88%B0%E7%BD%91%E9%A1%B5/"/>
    <url>/2018/03/08/es6%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%85%A8%E5%8A%A0%E8%BD%BD%E5%AE%8C%E5%86%8D%E6%98%BE%E7%A4%BA%E5%88%B0%E7%BD%91%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h3 id="利用es6的promise的all方法来实现图片全加载好再显示到网页-下面上代码"><a href="#利用es6的promise的all方法来实现图片全加载好再显示到网页-下面上代码" class="headerlink" title="利用es6的promise的all方法来实现图片全加载好再显示到网页,下面上代码"></a>利用es6的promise的all方法来实现图片全加载好再显示到网页,下面上代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadimg</span>(<span class="hljs-params">src</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;<br><span class="hljs-keyword">let</span> img=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br>img.<span class="hljs-property">src</span>=src;<br>img.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">resolve</span>(img);<br>&#125;<br>img.<span class="hljs-property">onerror</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br><span class="hljs-title function_">reject</span>(err);<br>&#125;<br>&#125;)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showimg</span>(<span class="hljs-params">imgs</span>)&#123;<br>imgs.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">img</span>)&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(img);<br>&#125;)<br>&#125;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<span class="hljs-title function_">loadimg</span>(<span class="hljs-string">&#x27;http://pic9.997788.com/pic_auction/00/09/38/10/au9381026e.jpg&#x27;</span>),<span class="hljs-title function_">loadimg</span>(<span class="hljs-string">&#x27;http://t-1.tuzhan.com/10da2b1e266a/up1/l/2010-03-20/13/timeroy.tuzhan.com_4899c11261d643d088bda1ac5f570e56.jpg&#x27;</span>),<span class="hljs-title function_">loadimg</span>(<span class="hljs-string">&#x27;http://img5.duitang.com/uploads/item/201212/14/20121214223133_jYzPn.jpeg&#x27;</span>)]).<span class="hljs-title function_">then</span>(showimg);<br></code></pre></td></tr></table></figure><span id="more"></span><p>demo看<a href="https://xypecho.github.io/test/imgloading.html">这里</a></p><h3 id="promise的race可以实现只有有一张加载完就显示到网页"><a href="#promise的race可以实现只有有一张加载完就显示到网页" class="headerlink" title="promise的race可以实现只有有一张加载完就显示到网页"></a>promise的race可以实现只有有一张加载完就显示到网页</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadimg</span>(<span class="hljs-params">src</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;<br><span class="hljs-keyword">let</span> img=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br>img.<span class="hljs-property">src</span>=src;<br>img.<span class="hljs-property">onload</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">resolve</span>(img);<br>&#125;<br>img.<span class="hljs-property">onerror</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br><span class="hljs-title function_">reject</span>(err);<br>&#125;<br>&#125;)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showimg</span>(<span class="hljs-params">imgs</span>)&#123;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(imgs);<br>&#125;<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([<span class="hljs-title function_">loadimg</span>(<span class="hljs-string">&#x27;http://pic9.997788.com/pic_auction/00/09/38/10/au9381026e.jpg&#x27;</span>),<span class="hljs-title function_">loadimg</span>(<span class="hljs-string">&#x27;http://t-1.tuzhan.com/10da2b1e266a/up1/l/2010-03-20/13/timeroy.tuzhan.com_4899c11261d643d088bda1ac5f570e56.jpg&#x27;</span>),<span class="hljs-title function_">loadimg</span>(<span class="hljs-string">&#x27;http://img5.duitang.com/uploads/item/201212/14/20121214223133_jYzPn.jpeg&#x27;</span>)]).<span class="hljs-title function_">then</span>(showimg);<br></code></pre></td></tr></table></figure><p>点我看<a href="https://xypecho.github.io/test/imgrace.html">demo</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>ES6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>收藏的一些正则</title>
    <link href="/2018/03/08/%E6%94%B6%E8%97%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%AD%A3%E5%88%99/"/>
    <url>/2018/03/08/%E6%94%B6%E8%97%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%AD%A3%E5%88%99/</url>
    
    <content type="html"><![CDATA[<h3 id="去除参数获取网站主机名"><a href="#去除参数获取网站主机名" class="headerlink" title="去除参数获取网站主机名"></a>去除参数获取网站主机名</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">const url = `<span class="hljs-variable">$&#123;window.location.href.match(/(\w+):\/\/([^/:]+)(:\d*)?/)[0]&#125;</span>`;<br><span class="hljs-regexp">//</span>例：输入http:<span class="hljs-regexp">//</span>www.w3school.com.cn<span class="hljs-regexp">/js/</span>js_obj_regexp.asp，输出为http:<span class="hljs-regexp">//</span>www.w3school.com.cn<br></code></pre></td></tr></table></figure><h3 id="日期合法性校验"><a href="#日期合法性校验" class="headerlink" title="日期合法性校验"></a>日期合法性校验</h3><blockquote><p>日期的合法性校验主要是指校验日期时间是否合法。假如需要用户输入产品的保质期时，输入的值为2018-09-40，那么将返回false，因为9月份不存在40号，它是一个非法的日期数据。</p></blockquote><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">validateDate</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/^(\d+)-(\d&#123;1,2&#125;)-(\d&#123;1,2&#125;)$/</span>;<br>    <span class="hljs-keyword">var</span> r = str.match(reg);<br>    <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    r[<span class="hljs-number">2</span>] = r[<span class="hljs-number">2</span>] - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(r[<span class="hljs-number">1</span>], r[<span class="hljs-number">2</span>], r[<span class="hljs-number">3</span>]);<br>    <span class="hljs-keyword">if</span> (d.getFullYear() != r[<span class="hljs-number">1</span>]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (d.getMonth() != r[<span class="hljs-number">2</span>]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (d.getDate() != r[<span class="hljs-number">3</span>]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(validateDate(<span class="hljs-string">&#x27;2018-08-20&#x27;</span>));  <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(validateDate(<span class="hljs-string">&#x27;2018-08-40&#x27;</span>));  <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>RegExp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RegExp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-router实现全局路由跳转拦截</title>
    <link href="/2018/03/06/vue-router%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E6%8B%A6%E6%88%AA/"/>
    <url>/2018/03/06/vue-router%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E6%8B%A6%E6%88%AA/</url>
    
    <content type="html"><![CDATA[<p>公司项目里面遇到这样一个需求‘除了登录页面之外，所有页面需要登录才能显示’，由于是第一次遇到这种一翻搜索之后得到了解决方案，下面上代码<br>在vue脚手架生成的router文件夹下面的index.js里面,给需要拦截的组件新增里面meta属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<br>  <span class="hljs-attr">path:</span> <span class="hljs-string">&#x27;/entry&#x27;</span>,<br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;entry&#x27;</span>,<br>  <span class="hljs-attr">component:</span> <span class="hljs-string">Entry</span>,<br>  <span class="hljs-attr">meta:</span> &#123;<br>    <span class="hljs-attr">Auth:</span> <span class="hljs-literal">true</span> <span class="hljs-string">//</span> <span class="hljs-string">需要登录</span><br>  &#125;<br></code></pre></td></tr></table></figure><span id="more"></span><p>在入口文件main.js里面  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">router.beforeEach((to, from, <span class="hljs-keyword">next</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (to.matched[<span class="hljs-number">0</span>].meta.Auth) &#123; <span class="hljs-regexp">//</span>判断是否需要拦截<br>    <span class="hljs-keyword">if</span> (!window.sessionStorage.user) &#123; <span class="hljs-regexp">//</span>成功登录会在sessionStorage里面设置一个uesr<br>      <span class="hljs-keyword">next</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<br>    &#125;<br>  &#125;;<br>  <span class="hljs-keyword">next</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p>以上就实现了全局路由拦截</p>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git的常用操作</title>
    <link href="/2018/03/02/git%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2018/03/02/git%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="1、从远程仓库获取代码到本地"><a href="#1、从远程仓库获取代码到本地" class="headerlink" title="1、从远程仓库获取代码到本地"></a>1、从远程仓库获取代码到本地</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/xxx/</span>xxx.git  <span class="hljs-regexp">//</span>直接克隆了默认的master分支下的代码<br>git clone -b dev https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/xxx/</span>xxx.git <span class="hljs-regexp">//</span>克隆dev分支下的代码，可把dev换成你想克隆的任意分支<br>git clone https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/xxx/</span>xxx.git --depth <span class="hljs-number">3</span> <span class="hljs-regexp">//</span> 只clone最近<span class="hljs-number">3</span>次的记录(代码是完整的)，这段命令对于commit次数较多，clone特别慢时有效<br></code></pre></td></tr></table></figure><h3 id="2、添加远程仓库"><a href="#2、添加远程仓库" class="headerlink" title="2、添加远程仓库"></a>2、添加远程仓库</h3><p>该操作一般是fork项目后，想更新fork的项目时使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git remote -v <span class="hljs-regexp">//</span>执行该命令后，会列出当前程序对应的所有远程版本仓库的信息，含仓库名和仓库地址<br>git remote add xoxoxo https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/xxx/</span>xxx.git  <span class="hljs-regexp">//</span>添加远程仓库，‘xoxoxo’代表该分支的名字（自己随便取），后面的分支的地址<br>git pull xoxoxo dev <span class="hljs-regexp">//</span>获取该远程项目下面dev分支的代码<br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="3、代码提交"><a href="#3、代码提交" class="headerlink" title="3、代码提交"></a>3、代码提交</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">git pull origin master <span class="hljs-regexp">//</span> 多人合作时，提交代码前需要先pull以防文件冲突<br>git add . <br>git commit -m <span class="hljs-string">&#x27;这里面写修改代码的备注&#x27;</span><br>git push origin master <span class="hljs-regexp">//</span>提交到master分支<br>git push origin dev <span class="hljs-regexp">//</span> 提交到dev分支,如果你有dev分支的话<br></code></pre></td></tr></table></figure><h3 id="4、撤销本地文件的修改"><a href="#4、撤销本地文件的修改" class="headerlink" title="4、撤销本地文件的修改"></a>4、撤销本地文件的修改</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">git checkout -- src<span class="hljs-keyword">/views/</span>equip/equipStateHistory.vue  <span class="hljs-comment">// -- 后面加文件的路径，即把文件恢复到没改之前的样子(相当于一直ctrl+z)</span><br><br><br>git checkout . <span class="hljs-comment">//撤销本地所有文件的修改</span><br></code></pre></td></tr></table></figure><h3 id="5、对比本地修改的内容与上次push的内容的差异"><a href="#5、对比本地修改的内容与上次push的内容的差异" class="headerlink" title="5、对比本地修改的内容与上次push的内容的差异"></a>5、对比本地修改的内容与上次push的内容的差异</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">git status <span class="hljs-regexp">//</span>查看本地所有修改过的文件<br>git diff <span class="hljs-regexp">//</span>查看所有修改过的文件的具体内容<br>git diff src<span class="hljs-regexp">/views/</span>equip<span class="hljs-regexp">/components/</span>MachineHome.vue <span class="hljs-regexp">//</span>查看指定文件的修改内容，diff后面是文件路径<br>git difftool <span class="hljs-regexp">//</span> 图形化比较两个版本间文件的差异<br>git difftool  src<span class="hljs-regexp">/views/</span>equip<span class="hljs-regexp">/components/</span>MachineHome.vue <span class="hljs-regexp">//</span> 图形化比较指定文件版本间的差异<br></code></pre></td></tr></table></figure><h3 id="6、对比本地代码与pull更新下来的代码的差异"><a href="#6、对比本地代码与pull更新下来的代码的差异" class="headerlink" title="6、对比本地代码与pull更新下来的代码的差异"></a>6、对比本地代码与pull更新下来的代码的差异</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git diff HEAD^  <span class="hljs-regexp">//</span> 查看上次pull的详情<br>git diff HEAD^^  <span class="hljs-regexp">//</span> 查看上次和上上次pull的详情<br>git diff HEAD~<span class="hljs-number">10</span>  <span class="hljs-regexp">//</span> 查看往上<span class="hljs-number">100</span>个版本的修改详情<br></code></pre></td></tr></table></figure><h3 id="7、本地分支的相关操作"><a href="#7、本地分支的相关操作" class="headerlink" title="7、本地分支的相关操作"></a>7、本地分支的相关操作</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">git branch --all   <span class="hljs-regexp">//</span> 查看本地所有分支<br>git checkout -b test <span class="hljs-regexp">//</span> 在本地新建一个test分支<br>git checkout master <span class="hljs-regexp">//</span> 切回master分支，这是切换分支的命令<br><br><span class="hljs-regexp">//</span> 下面是提交分支代码的命令,前<span class="hljs-number">3</span>个命令均是在test分支执行<br>git add .<br>git commit -m <span class="hljs-string">&#x27;备注&#x27;</span><br>git push origin test <span class="hljs-regexp">//</span> 此处的test是分支名字<br>git checkout master <span class="hljs-regexp">//</span> 切换到master分支<br>git merge test <span class="hljs-regexp">//</span> 合并test分支到master分支<br>git push origin master<br><br><span class="hljs-regexp">//</span> 下面是删除分支的命令<br>git branch --<span class="hljs-keyword">delete</span> test <span class="hljs-regexp">//</span> 删除本地分支<br>git push origin --<span class="hljs-keyword">delete</span> branch <span class="hljs-regexp">//</span> 删除远程分支和追踪分支<br></code></pre></td></tr></table></figure><p>git remote update &#x2F;&#x2F; 更新远程分支列表</p><h3 id="8、代码回滚"><a href="#8、代码回滚" class="headerlink" title="8、代码回滚"></a>8、代码回滚</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">git log  <span class="hljs-regexp">//</span> 查看提交历史，找出要回滚到的commit-id<br>git reset --hard xxx <span class="hljs-regexp">//</span> xxx指上面的commit-id<br>git push -f origin master <span class="hljs-regexp">//</span>强行提交<br></code></pre></td></tr></table></figure><h3 id="9、解决代码冲突"><a href="#9、解决代码冲突" class="headerlink" title="9、解决代码冲突"></a>9、解决代码冲突</h3><h4 id="9-1-还没执行git-add-命令前的代码冲突"><a href="#9-1-还没执行git-add-命令前的代码冲突" class="headerlink" title="9.1 还没执行git add 命令前的代码冲突"></a>9.1 还没执行git add 命令前的代码冲突</h4><p>如果你提交前(执行git add 命令前)想起来还没先pull，然后git pull命令报错时(如下图)，可以用下面的方案解决：</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="QQ图片20191210141806.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;margin-top: 84px;"></div></center><p>解决方案</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">git stash <span class="hljs-regexp">//</span> 将本地的修改临时保存起来<br>git pull <br>git stash pop <span class="hljs-regexp">//</span> 还原临时保存的修改<br><span class="hljs-regexp">//</span> 如果git自动合并成功则会提示 already up-to-date,否则需要手动修改冲突的内容，手动解决完冲突再次提交<br>git add .<br>git commit -m <span class="hljs-string">&#x27;xxx&#x27;</span><br>git push origin master<br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="QQ图片20191210142859.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;">Updated upstream 和=====之间的内容就是pull下来的内容，====和stashed changes之间的内容就是本地修改的内容</div></center><h4 id="9-2-执行完git-add，push代码时的冲突"><a href="#9-2-执行完git-add，push代码时的冲突" class="headerlink" title="9.2 执行完git add，push代码时的冲突"></a>9.2 执行完git add，push代码时的冲突</h4><p>多人合作提交代码时，一般先pull，然后再push。<br>但是如果忘了先pull，直接git add，然后push时出现冲突(如下图)应该这样解决。</p><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="QQ图片20191210144117.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;margin-top: 84px;"></div></center><p>解决方案</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">git pull <span class="hljs-regexp">//</span> 如果自动合并出错(如下图)，会出现 (master|MERGING)标记<br><span class="hljs-regexp">//</span> 手动修改冲突的内容，手动解决完冲突再次提交<br>git add .<br>git commit -m <span class="hljs-string">&#x27;xxx&#x27;</span><br>git push origin master<br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="QQ图片20191210145854.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;margin-top: 84px;"></div></center><h3 id="10、-设置别名-alias"><a href="#10、-设置别名-alias" class="headerlink" title="10、 设置别名(alias)"></a>10、 设置别名(alias)</h3><p>例如用<code>ga</code>来代替<code>git add .</code>这么长一段。</p><p>方法：</p><ol><li>前往<code>git</code>的安装目录找到<code>C:\Program Files\Git\etc</code>下的<code>profile.d</code>文件，用编辑器打开</li><li>把要设置的别名编辑进去(如下图)，保存退出</li></ol><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ceylon"><span class="hljs-comment">// 常用别名</span><br><span class="hljs-keyword">alias</span> ga=<span class="hljs-string">&#x27;git add .&#x27;</span><br><span class="hljs-keyword">alias</span> gm=<span class="hljs-string">&#x27;git commit -m&#x27;</span><br><span class="hljs-keyword">alias</span> gp=<span class="hljs-string">&#x27;git push origin master&#x27;</span><br><span class="hljs-keyword">alias</span> gs=<span class="hljs-string">&#x27;git status&#x27;</span><br><span class="hljs-keyword">alias</span> gf=<span class="hljs-string">&#x27;git diff&#x27;</span><br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="QQ图片20191212093354.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;margin-top: 84px;"></div></center><h3 id="11、解决git切换分支相互影响的问题"><a href="#11、解决git切换分支相互影响的问题" class="headerlink" title="11、解决git切换分支相互影响的问题"></a>11、解决git切换分支相互影响的问题</h3><p>在一个分支写新功能，但是突然要查看另外一个分支的内容，新功能又没写好不好提交，可以试试如下的方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">git stash <span class="hljs-regexp">//</span> 隐藏当前工作现场，此时使用git status是查看不到修改的<br>git stash list <span class="hljs-regexp">//</span> 查看暂存的所有内容列表<br>git stash pop <span class="hljs-regexp">//</span> 恢复暂存的内容，同时从暂存区删除<br>git stash pop stash@&#123;<span class="hljs-number">0</span>&#125; <span class="hljs-regexp">//</span> 如果git stash list中有多个列表，可以使用这个命令<br></code></pre></td></tr></table></figure><h3 id="12、在当前分支合入其他分支某一次commit的修改"><a href="#12、在当前分支合入其他分支某一次commit的修改" class="headerlink" title="12、在当前分支合入其他分支某一次commit的修改"></a>12、在当前分支合入其他分支某一次commit的修改</h3><p>使用场景：小程序在某个新分支解决了包体积过大的问题，但是没有合并入master分支，我们从master分支新开分支时再次提示体积过大，再次重复一次劳动显然不是最优解</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">git log <span class="hljs-regexp">//</span> 在已经解决好冲突的分支执行以下命令，记下commit id<br><br><span class="hljs-regexp">//</span> 切换到新分支，就可以把对应commitid的修改合入新分支了<br> git cherry-pick commitID<br></code></pre></td></tr></table></figure><h3 id="13、找回回滚时被回滚掉的代码"><a href="#13、找回回滚时被回滚掉的代码" class="headerlink" title="13、找回回滚时被回滚掉的代码"></a>13、找回回滚时被回滚掉的代码</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git reflog <span class="hljs-regexp">//</span> 它记录了我们所执行过的所有命令，记下对应操作的id<br>git reset --hard xxx <span class="hljs-regexp">//</span> 填写上面的id，执行完就会发现我们之前的代码又回来呢<br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="TIM图片20200610172947.png">    <br>    <div style="color:orange; border-bottom: 1px solid #d9d9d9;    display: inline-block;    color: #999;    padding: 2px;margin-top: 84px;"></div></center><h3 id="14、清理无效的-x2F-在远程被删除的分支"><a href="#14、清理无效的-x2F-在远程被删除的分支" class="headerlink" title="14、清理无效的&#x2F;在远程被删除的分支"></a>14、清理无效的&#x2F;在远程被删除的分支</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">git remote prune origin --dry-run <span class="hljs-regexp">//</span> 查看可以清理的远程分支名字<br>git remote prune origin <span class="hljs-regexp">//</span> 清理无效分支<br></code></pre></td></tr></table></figure><h3 id="15、修改-gitignore但是不生效"><a href="#15、修改-gitignore但是不生效" class="headerlink" title="15、修改.gitignore但是不生效"></a>15、修改.gitignore但是不生效</h3><p>.gitignore 文件只能忽略那些还没有加入版本管理的文件，如果某些文件已经被纳入了版本管理中，则修改 .gitignore 是无效的。<br>解决方法是先把本地缓存删除，然后重新加入再提交</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">git rm <span class="hljs-operator">-</span>r <span class="hljs-comment">--cached . // 从本地移除缓存,如果是某一个文件，则直接 git rm -r --cached xxx(文件名)</span><br>git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> <span class="hljs-operator">-</span>m <span class="hljs-string">&#x27;xxx&#x27;</span><br>git push origin master<br></code></pre></td></tr></table></figure><h3 id="16、查看当前分支提交历史"><a href="#16、查看当前分支提交历史" class="headerlink" title="16、查看当前分支提交历史"></a>16、查看当前分支提交历史</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">// 查看所有提交历史<br>git <span class="hljs-built_in">log</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 查看最近两次提交（-2 表示显示最近的两次更新）</span><br>git <span class="hljs-built_in">log</span> -p <span class="hljs-number">-2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 显示增改行数统计，每个提交修改过的文件</span><br>git <span class="hljs-built_in">log</span> <span class="hljs-comment">--stat</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">// 查看该作者提交的版本</span><br>git <span class="hljs-built_in">log</span> <span class="hljs-comment">--author=作者</span><br></code></pre></td></tr></table></figure><h3 id="17、git-bash查看使用最多的命令"><a href="#17、git-bash查看使用最多的命令" class="headerlink" title="17、git bash查看使用最多的命令"></a>17、git bash查看使用最多的命令</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">history | <span class="hljs-type">awk</span> &#x27;&#123;CMD[$<span class="hljs-number">2</span>]++;count++;&#125;END &#123; <span class="hljs-keyword">for</span> (a <span class="hljs-built_in">in</span> CMD)print CMD[a] <span class="hljs-string">&quot; &quot;</span> CMD[a]/count*<span class="hljs-number">100</span> <span class="hljs-string">&quot;% &quot;</span> a;&#125;&#x27; | <span class="hljs-type">grep</span> -v <span class="hljs-string">&quot;./&quot;</span> | <span class="hljs-type">column</span> -c3 -s <span class="hljs-string">&quot; &quot;</span> -t | <span class="hljs-type">sort</span> -nr | <span class="hljs-type">nl</span> | <span class="hljs-type">head</span> -n10<br></code></pre></td></tr></table></figure><center>    <img style="border-radius: 0.3125em;    width:100%;    box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);"     src="Snipaste_2022-08-03_22-00-13.png"></center>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新人写vue项目时需要注意的那些事(连载中)</title>
    <link href="/2018/02/26/vue%E9%A1%B9%E7%9B%AE%E9%87%8C%E9%9D%A2%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91-%E8%BF%9E%E8%BD%BD%E4%B8%AD/"/>
    <url>/2018/02/26/vue%E9%A1%B9%E7%9B%AE%E9%87%8C%E9%9D%A2%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91-%E8%BF%9E%E8%BD%BD%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<h3 id="1、别名配置"><a href="#1、别名配置" class="headerlink" title="1、别名配置"></a>1、别名配置</h3><p>在build文件夹下面的webpack.base.conf.js文件里面可以配置别名来简单明了的引入各种组件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">resolve: &#123;<br>  extensions: <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.vue&#x27;</span>, <span class="hljs-string">&#x27;.json&#x27;</span>]</span>,<br>  alias: &#123;<br>    <span class="hljs-string">&#x27;src&#x27;</span>: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>),<br>    <span class="hljs-string">&#x27;common&#x27;</span>: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/common&#x27;</span>),<br>    <span class="hljs-string">&#x27;components&#x27;</span>: <span class="hljs-built_in">resolve</span>(<span class="hljs-string">&#x27;src/components&#x27;</span>),<br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>配置完的demo如下:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> mheader <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;components/m-header/m-header&#x27;</span><br></code></pre></td></tr></table></figure><span id="more"></span><h3 id="2、在手机上打开vue项目"><a href="#2、在手机上打开vue项目" class="headerlink" title="2、在手机上打开vue项目"></a>2、在手机上打开vue项目</h3><p>首先需要手机和电脑在同一个wifi下，然后win+r输入cmd，输入命令‘ipconfig’获取到本机的ip地址后，在vue里面的package.json修改配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --inline --progress --config build/webpack.dev.conf.js --host 192.168.1.3&quot;</span>, <span class="hljs-regexp">//i</span>p写在这里<br>  <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;npm run dev&quot;</span>,<br>  <span class="hljs-string">&quot;lint&quot;</span>: <span class="hljs-string">&quot;eslint --ext .js,.vue src&quot;</span>,<br>  <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;node build/build.js&quot;</span><br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="3、路由配置"><a href="#3、路由配置" class="headerlink" title="3、路由配置"></a>3、路由配置</h3><p>首先在项目router文件夹下面的index.js里面引入组件  </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> recommend <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;components/recommend/recommend&#x27;</span><br><span class="hljs-keyword">import</span> rank <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;components/rank/rank&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-keyword">search</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;components/search/search&#x27;</span><br></code></pre></td></tr></table></figure><p>然后在下面的export default里面配置组件</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">export <span class="hljs-keyword">default</span> <span class="hljs-built_in">new</span> Router(&#123;<br>  routes: [<br>  &#123;<br>  <span class="hljs-type">path</span>:<span class="hljs-string">&#x27;/&#x27;</span>,<br>  redirect:<span class="hljs-string">&#x27;/recommend&#x27;</span>            <br>  &#125;,<br>    &#123;<br>      <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/recommend&#x27;</span>,<br>      component: recommend<br>    &#125;,    <br>    &#123;<br>      <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/rank&#x27;</span>,<br>      component: rank<br>    &#125;,    <br>    &#123;<br>      <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/search&#x27;</span>,<br>      component: <span class="hljs-keyword">search</span><br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>在导航栏的组件里面写路径的组件时应该这样写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span><br>   <span class="hljs-comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span><br>  <span class="hljs-comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签,使用tag=&#x27;div&#x27;，会被渲染成div --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&#x27;div&#x27;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/recommend&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;tab_item&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab_link&quot;</span>&gt;</span>推荐<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&#x27;div&#x27;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/rank&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;tab_item&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab_link&quot;</span>&gt;</span>排行榜<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&#x27;div&#x27;</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#x27;/search&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;tab_item&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tab_link&quot;</span>&gt;</span>搜索<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在App.vue里面引入tab时记得加上路由出口</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mheader</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mheader</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tab</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tab</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 路由出口 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span> <br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4、vue里面使用normalize-css"><a href="#4、vue里面使用normalize-css" class="headerlink" title="4、vue里面使用normalize.css"></a>4、vue里面使用normalize.css</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">首先安装 npm <span class="hljs-selector-tag">i</span> normalize<span class="hljs-selector-class">.css</span> <span class="hljs-attr">--save-dev</span>  <br>然后在<span class="hljs-selector-tag">main</span>.ja里面引入 import <span class="hljs-string">&#x27;normalize.css&#x27;</span>  <br><br>如果报错的话就安装 npm install css-loader style-loader  <br></code></pre></td></tr></table></figure><h3 id="5、vue打包前需要做的事"><a href="#5、vue打包前需要做的事" class="headerlink" title="5、vue打包前需要做的事"></a>5、vue打包前需要做的事</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">找到config里的index.js,打开修改assetsPublicPath 为“./”<br></code></pre></td></tr></table></figure><h3 id="6、配置子路由"><a href="#6、配置子路由" class="headerlink" title="6、配置子路由"></a>6、配置子路由</h3><p>例如点击列表页面跳到详情页这样的操作时就需要配置子路由</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xquery">&#123;<br> <span class="hljs-built_in"> path</span>:<span class="hljs-string">&#x27;/singer&#x27;</span>,<br>  component:singer, //这样父路由<br>  children:[<br>    &#123;<br>     <span class="hljs-built_in"> path</span>:<span class="hljs-string">&#x27;:id&#x27;</span>,<br>      component:singerDetail //这是子路由<br>    &#125;<br>  ]<br>&#125;<br>在router里面的index.js配置完路由后来到父路由组件<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;singer&quot;</span>&gt;</span></span><br><span class="language-xml">    //此处写父路由的页面</span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;select(item)&#x27;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;item in items&#x27;</span>&gt;</span>这是列表demo<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span></span><span class="language-xml"> //给子路由一个router-view</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br>然后在methods里面写个select方法<br>select(<span class="hljs-type">item</span>)&#123;<br>  this.<span class="hljs-variable">$router</span>.push(&#123;<br>   <span class="hljs-built_in"> path</span>:`/singer/$&#123;<span class="hljs-type">item</span><span class="hljs-built_in">.id</span>&#125;`<br>    &#125;);<br>&#125;,<br><br></code></pre></td></tr></table></figure><h3 id="7、vue里面的页面跳转"><a href="#7、vue里面的页面跳转" class="headerlink" title="7、vue里面的页面跳转"></a>7、vue里面的页面跳转</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">如果是直接写在template里面的话<br>&lt;li @click=<span class="hljs-string">&quot;<span class="hljs-variable">$router</span>.push(`/entry/gcodeView?id=<span class="hljs-variable">$&#123;scope.row.id&#125;</span>`)&quot;</span>&gt;跳转&lt;/li&gt; //问号后面可以带参数<br><br><br>写在script里面<br>this.<span class="hljs-variable">$router</span>.push(`/entry/gcodeView?<span class="hljs-built_in">id</span>=<span class="hljs-variable">$&#123;data.gcode_id&#125;</span>`);<br></code></pre></td></tr></table></figure><h3 id="8、vue里面设置404页面"><a href="#8、vue里面设置404页面" class="headerlink" title="8、vue里面设置404页面"></a>8、vue里面设置404页面</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&#123;<br>  <span class="hljs-type">path</span>: <span class="hljs-string">&#x27;/*&#x27;</span>,<br>  <span class="hljs-type">name</span>: <span class="hljs-string">&#x27;noMatch&#x27;</span>,<br>  component: noMatch<br>&#125;<br><br><span class="hljs-comment">/* 可以匹配所有路由，如果没匹配到则跳转到这个页面，这个需要写到路由配置的最后面</span><br></code></pre></td></tr></table></figure><h3 id="9、获取vue路由及去除参数"><a href="#9、获取vue路由及去除参数" class="headerlink" title="9、获取vue路由及去除参数"></a>9、获取vue路由及去除参数</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">this.<span class="hljs-variable">$route</span>.path; <br><span class="hljs-regexp">//</span>可以不带参数的路由，例：http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/entry/</span>errorMessage?machine_id=<span class="hljs-number">3</span> ，输出为<span class="hljs-regexp">/entry/</span>errorMessage<br><br><br>this.<span class="hljs-variable">$router</span>.replace(this.<span class="hljs-variable">$route</span>.path);<br><span class="hljs-regexp">//</span>去除路由后面的参数,例：http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/entry/</span>errorMessage?machine_id=<span class="hljs-number">3</span> 输出为http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8080</span><span class="hljs-regexp">/entry/</span>errorMessage<br></code></pre></td></tr></table></figure><h3 id="10、触发dom的点击事件"><a href="#10、触发dom的点击事件" class="headerlink" title="10、触发dom的点击事件"></a>10、触发dom的点击事件</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;button <span class="hljs-attribute">ref</span>=<span class="hljs-string">&#x27;btn&#x27;</span>&gt;&lt;/button&gt;<br><br>this.<span class="hljs-variable">$refs</span>.btn.click();<br></code></pre></td></tr></table></figure><h3 id="11、多个子路由的情况下，配置默认路由"><a href="#11、多个子路由的情况下，配置默认路由" class="headerlink" title="11、多个子路由的情况下，配置默认路由"></a>11、多个子路由的情况下，配置默认路由</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/index&#x27;</span>,<br>      <span class="hljs-attr">component</span>: index,<br>      <span class="hljs-attr">meta</span>: [],<br>      <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span>, <span class="hljs-comment">// redirect重定向到home组件</span><br>      children: [<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> require([<span class="hljs-string">&#x27;@/pages/home/home&#x27;</span>], resolve)<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/test&#x27;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> require([<span class="hljs-string">&#x27;@/components/test/test&#x27;</span>], resolve),<br>          <span class="hljs-attr">meta</span>: [<span class="hljs-string">&#x27;添加数据test&#x27;</span>]<br>        &#125;<br>      ]<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="12、watch对象或者数组"><a href="#12、watch对象或者数组" class="headerlink" title="12、watch对象或者数组"></a>12、watch对象或者数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span>&#123;<br>    <span class="hljs-attr">obj</span>:&#123;<br>      <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>      <span class="hljs-attr">b</span>:<span class="hljs-number">2</span><br>    &#125;<br>  &#125;<br>&#125;,<br><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-attr">obj</span>: &#123;<br>    <span class="hljs-title function_">handler</span>(<span class="hljs-params">val</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(val)<br>    &#125;,<br>    <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 深度监听</span><br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">//  加上这个字段，该回调将会在侦听开始之后被立即调用</span><br>  &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="13、动态style"><a href="#13、动态style" class="headerlink" title="13、动态style"></a>13、动态style</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&#x27;imgStyle&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-attr">computed</span>:&#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">imgStyle</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> &#123; scale, deg, enableTransition &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">transform</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> style = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">transform</span>: <span class="hljs-string">`scale(<span class="hljs-subst">$&#123;scale&#125;</span>) rotate(<span class="hljs-subst">$&#123;deg&#125;</span>deg)`</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">transition</span>: enableTransition ? <span class="hljs-string">&quot;transform 0.3s ease 0s&quot;</span> : <span class="hljs-string">&quot;&quot;</span></span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> style;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="14、-动态class"><a href="#14、-动态class" class="headerlink" title="14、 动态class"></a>14、 动态class</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs elixir">// 第一种写法,bgImage和bgColor都是变量<br>&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&quot;[bgImage!== &#x27;&#x27; ? &#x27;none-bg text-white bg-img&#x27; : &#x27;&#x27; , bgColor]&quot;</span>&gt;&lt;/div&gt;</span><br><br>// 第二种<br>&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&quot;[&#x27;flex&#x27;, &#x27;text-center&#x27;, roleMenuType]&quot;</span>&gt;&lt;/div&gt;</span><br><br>// 第三种<br>&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&quot;roleMenuType&quot;</span>&gt;&lt;/div&gt;</span><br><br>// 第四种，当前遍历dom的索引与active状态的索引一致时加上<span class="hljs-string">&#x27;active&#x27;</span> class<br>&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&quot;&#123;active:currentIndex === index&#125;&quot;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><h3 id="15、全局组件"><a href="#15、全局组件" class="headerlink" title="15、全局组件"></a>15、全局组件</h3><p>一般我们使用组件都是先写好组件，在我们需要使用组件的地方，引入之前写好的组件，并通过components绑定，就可以直接使用了。<br>但是如果一个组件需要使用的地方很多，那么就可以写成全局组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在main.js文件中写</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><span class="hljs-keyword">import</span> navBar <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/navBar&quot;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$store</span> = store;<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;navBar&#x27;</span>, navBar);<br><br><span class="hljs-title class_">App</span>.<span class="hljs-property">mpType</span> = <span class="hljs-string">&#x27;app&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    store,<br>    ...<span class="hljs-title class_">App</span><br>&#125;)<br>app.$mount()<br></code></pre></td></tr></table></figure><h3 id="16、-如何自定义指令"><a href="#16、-如何自定义指令" class="headerlink" title="16、 如何自定义指令"></a>16、 如何自定义指令</h3><p><a href="http://localhost:4000/2019/12/23/%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E5%8F%AF%E6%8B%96%E5%8A%A8%E6%8E%92%E5%BA%8F/#2%E3%80%81-vue%E7%89%88%E6%9C%AC%E7%9A%84">vue里面如何自定义指令</a></p><h3 id="17、-给data中一个对象新增属性，更新视图"><a href="#17、-给data中一个对象新增属性，更新视图" class="headerlink" title="17、 给data中一个对象新增属性，更新视图"></a>17、 给data中一个对象新增属性，更新视图</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 使用this.$set, 第一个参数是需要新增属性的对象，第二个参数是新增的属性的key，第三个参数是属性对应的value</span><br><span class="hljs-keyword">this</span>.$<span class="hljs-keyword">set</span>(<span class="hljs-keyword">this</span>.obj, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;呆呆&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="18、在vue2中是无法检测到根据索引值修改的数据变动的"><a href="#18、在vue2中是无法检测到根据索引值修改的数据变动的" class="headerlink" title="18、在vue2中是无法检测到根据索引值修改的数据变动的"></a>18、在vue2中是无法检测到根据索引值修改的数据变动的</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">arr</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 这种写法并不能修改arr的值</span></span><br><span class="language-javascript">                <span class="hljs-comment">// this.arr[1] = 666;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 有效写法1, this.$set(this.data, &#x27;key&#x27; , &#x27;value&#x27;)</span></span><br><span class="language-javascript">                <span class="hljs-comment">// this.$set(this.arr, 1, 666);</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 有效写法2,定义一个临时变量修改临时变量，然后赋值给原数组</span></span><br><span class="language-javascript">                <span class="hljs-keyword">const</span> _arr = [...<span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span>];</span><br><span class="language-javascript">                _arr[<span class="hljs-number">1</span>] = <span class="hljs-number">666</span>;</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">arr</span> = _arr;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br></code></pre></td></tr></table></figure><h3 id="19、computed-计算属性还内置了缓存功能，如果依赖数据没变化，多次使用计算属性会直接返回缓存结果，同我们直接写在模板里相比，性能也有了提升。"><a href="#19、computed-计算属性还内置了缓存功能，如果依赖数据没变化，多次使用计算属性会直接返回缓存结果，同我们直接写在模板里相比，性能也有了提升。" class="headerlink" title="19、computed 计算属性还内置了缓存功能，如果依赖数据没变化，多次使用计算属性会直接返回缓存结果，同我们直接写在模板里相比，性能也有了提升。"></a>19、computed 计算属性还内置了缓存功能，如果依赖数据没变化，多次使用计算属性会直接返回缓存结果，同我们直接写在模板里相比，性能也有了提升。</h3>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>转行整整一年了...</title>
    <link href="/2018/02/20/%E8%BD%AC%E8%A1%8C%E6%95%B4%E6%95%B4%E4%B8%80%E5%B9%B4%E4%BA%86/"/>
    <url>/2018/02/20/%E8%BD%AC%E8%A1%8C%E6%95%B4%E6%95%B4%E4%B8%80%E5%B9%B4%E4%BA%86/</url>
    
    <content type="html"><![CDATA[<h3 id="当时为什么转行"><a href="#当时为什么转行" class="headerlink" title="当时为什么转行"></a>当时为什么转行</h3><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;16年6月刚毕业后进入社会，没有一技之长的我一直在做销售，各种各样的销售，最开始的电话销售然后是一家互联网公司的市场专员再然后是推荐保健品的，最后从链家离职后就决定不再从事销售了。<span id="more"></span></p><h3 id="转行互联网自学？or培训？"><a href="#转行互联网自学？or培训？" class="headerlink" title="转行互联网自学？or培训？"></a>转行互联网自学？or培训？</h3><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;或许是因为知乎刷多了？感觉互联网工资很高的样子(其实大牛的工资确实很高，不过似乎每个行业都是这样啊？…)然后就开始加各种技术群，当时还不知道程序员里面分很多语言和方向，就加了很多Java群(原谅我刚开始只知道Java…)，知道了还有培训这个东西，然后去人才市场找互联网相关工作的时候遇到了两个培训机构(ps:现在很多鸡贼的培训机构都打着招聘的名义在招学员)在招聘学员，去他们公司面试(其实是忽悠我去培训)<br>的时候知道了原来还有这样的操作？3个月的培训就可以月薪过万了？回家的路上想了想<br><img src="TIM图片20180220120350.png" style="height:500px;text-align: center;"><br>发现其实他们画的饼太不真实了，于是就开启了自学之路。</p><h3 id="为什么选择做前端，而不是后端呢？"><a href="#为什么选择做前端，而不是后端呢？" class="headerlink" title="为什么选择做前端，而不是后端呢？"></a>为什么选择做前端，而不是后端呢？</h3><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;看到一个博客里面很有意思的话，感觉也挺符合我的情况，就拿过来了。  </p><blockquote><p>不是我选择了前端，而是前端选择了我。天降大任，身不由己。  </p></blockquote><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;17年10月底从链家辞职，然后回老家开启自学，首先去淘宝买了一大波培训班的Java视频自己在家跟着视频码代码，学了大概2个多月的样子然后过完年就去了苏州开始了找工作之路。<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最开始是直接在智联招聘和拉钩上海投简历，发现基本都被回绝了。然后我就有了一个大胆的想法…由于我以前做过推销的工作我感觉是不是也可以像推销产品一样推销自己，于是我就在招聘网站上搜薪资要求2-3k的工作记下工作地点每天坐车上门去求面试机会。嗯，毫无悬念，虽然有了面试机会不过水平太菜了根本不能胜任工作…<br>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;转机发生在2月20号，这天我像往常一样去人才市场看工作机会，突然看到了网页制作这个岗位，或许我可以曲线入行？先找个互联网工作然后每天下班自学新技术再跳槽？于是和这家公司hr谈了下…然后说明天就可以来上班了，不过有试用期，试用期内需要完成2个企业站并且试用期内是没有工资的。然后就这样入了前端的坑。<br><img src="TIM图片20180220125835.png" style="height:500px;text-align: center;">  </p><h3 id="职业发展"><a href="#职业发展" class="headerlink" title="职业发展"></a><a name="职业发展" style='color:#616161!important;font-weight:700'>职业发展</a></h3><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在一家公司待的久了，发现技术上没有挑战性且薪水也不是很高的时候就可以选择跳槽了。2月21正式入行前端(其实只能叫切图仔)，大概做了十来个企业站后发现技术上已经没有可以学习的地方了于是在17年7月24提出离职，回到了老家在老家找了份前端工作。由于第一份工作是纯静态页面，刚入职第二家公司的时候如果没有师傅带着真的会走很多弯路，感谢一路走来遇到的两位带我的师傅，清楚了职业规划后，要做的就是不停的学习补充新知识。(希望可以早点从小切图仔蜕变为大前端)</p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在vue里面使用icomoon</title>
    <link href="/2018/02/18/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8icomoon/"/>
    <url>/2018/02/18/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8icomoon/</url>
    
    <content type="html"><![CDATA[<h3 id="icomoon是什么？"><a href="#icomoon是什么？" class="headerlink" title="icomoon是什么？"></a>icomoon是什么？</h3><blockquote><p>打开IcoMoon网站往往会给人一种错觉，误认为跟上面罗列的字体网站一样，就是展示。<br>其实非也，IcoMoon的水要深多了。<br>这么说吧：假设整个上海梅园地区有100家卖衣服的小店，其中有99家就是拿货然后卖衣服给顾客（这就是大搜罗的icon font们）；但是，其中有一家店不仅卖衣服，还可以根据用户需求定制衣服，甚至还可以把别家店的衣服按照顾客要求进行改制，且适用于高矮胖瘦，古今中外给类人群，而且还有穿衣说明，模特试穿以及打包送货上门服务（这就是本文的IcoMoon），最最关键的是，这家店是免费的。<br>体现在IcoMoon上就是：提供600+字符，您可以根据自己需求定制（如就选两个）；可以导入其他字体，也进行特别定制（类似fontforge功能）；定制字体提供打包导出功能（省去了字体转换），兼容IE6+，现代浏览器以及各类手机设备，且有demo实例，并对字符进行了HTML转化。<br>可谓图标字体一条龙服务，又称“图标解决方案”！</p></blockquote><span id="more"></span><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>1、打开icomoon的<a href="https://icomoon.io/app/#/select">官网</a>,选择自己需要的图标，当然你也可以点击左上角的’import icons’导入自己的svg格式的图标。<br>选择完需要的图片后点击下面的creat font<img src="/2018/02/18/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8icomoon/TIM%E5%9B%BE%E7%89%8720180218205653.png" class=""><br>然后点击download就会把字体图标下载到本地。<br>2、解压压缩包获得以下文件<img src="/2018/02/18/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8icomoon/TIM%E5%9B%BE%E7%89%8720180218210103.png" class=""><br>3、在自己的vue项目src文件下创建一个’common’文件夹，里面再分别建’fonts’和’stylus’文件夹，把解压下来的icomoon文件夹里面fonts文件夹下的所有文件拷贝到vue项目里面的fonts文件夹下面，然后把<img src="/2018/02/18/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8icomoon/TIM%E5%9B%BE%E7%89%8720180218210740.png" class="">  里面的style.css拷贝到vue项目里面的stylus下面，因为我这个项目用的是stylus预处理器，所以我把文件改为了style.styl<br>vue项目里面的路径如图<img src="/2018/02/18/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8icomoon/TIM%E5%9B%BE%E7%89%8720180218211556.png" class=""><br>4、在vue项目里面的main.js里面引入style.styl</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./common/stylus/index.styl&#x27;</span><br></code></pre></td></tr></table></figure><p>5、然后就可以在组件里面用.class的发法使用icmoon图标啦</p><h3 id="需要注意的坑"><a href="#需要注意的坑" class="headerlink" title="需要注意的坑"></a>需要注意的坑</h3><img src="/2018/02/18/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E9%87%8C%E9%9D%A2%E4%BD%BF%E7%94%A8icomoon/TIM%E5%9B%BE%E7%89%8720180218211131.png" class="">,此处的路径需要更改为<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;icomoon&#x27;</span>;<br>  <span class="hljs-attribute">src</span>:  <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../fonts/icomoon.eot?yho9ht&#x27;</span>);<br>  <span class="hljs-attribute">src</span>:  <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../fonts/icomoon.eot?yho9ht#iefix&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;embedded-opentype&#x27;</span>),<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../fonts/icomoon.ttf?yho9ht&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>),<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../fonts/icomoon.woff?yho9ht&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;woff&#x27;</span>),<br>    <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../fonts/icomoon.svg?yho9ht#icomoon&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;svg&#x27;</span>);<br>  <span class="hljs-attribute">font-weight</span>: normal;<br>  <span class="hljs-attribute">font-style</span>: normal;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue实现tab选项卡效果</title>
    <link href="/2018/02/17/vue%E5%AE%9E%E7%8E%B0tab%E9%80%89%E9%A1%B9%E5%8D%A1%E6%95%88%E6%9E%9C/"/>
    <url>/2018/02/17/vue%E5%AE%9E%E7%8E%B0tab%E9%80%89%E9%A1%B9%E5%8D%A1%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<p>刚接触vue，还没完全适应vue的响应式解构，刚遇到这个需求下意识还是dom操作,下面上vue实现的代码</p><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.5.13/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">body</span>,<span class="hljs-selector-tag">html</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.father</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css"><span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.father</span> <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">flex</span>:<span class="hljs-number">1</span>;</span><br><span class="language-css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#31c27c</span>;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.active</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:red<span class="hljs-meta">!important</span>;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: blue<span class="hljs-meta">!important</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;father&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;isshow==0?&#x27;active&#x27;:&#x27;&#x27;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;changetag(0)&#x27;</span>&gt;</span>我是tab1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;isshow==1?&#x27;active&#x27;:&#x27;&#x27;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;changetag(1)&#x27;</span>&gt;</span>我是tab2<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;son&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&#x27;isshow==0&#x27;</span>&gt;</span>我是tab1里面的内容<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&#x27;isshow==1&#x27;</span>&gt;</span>我是tab2里面的内容啊啊啊啊啊<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">isshow</span>:<span class="hljs-number">0</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">changetag</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">idx</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">isshow</span>=idx;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>demo看<a href="https://xypecho.github.io/test/vue_tab.html">这里</a></p>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>input设置width:100%页面出现滚动条解决方案</title>
    <link href="/2018/02/13/input%E8%AE%BE%E7%BD%AEwidth-100-%E9%A1%B5%E9%9D%A2%E5%87%BA%E7%8E%B0%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2018/02/13/input%E8%AE%BE%E7%BD%AEwidth-100-%E9%A1%B5%E9%9D%A2%E5%87%BA%E7%8E%B0%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>先上解决方案：input 设置 width:100% 和padding后宽度超出父节点,加上下面这行css到超出的元素身上即可</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>;<br>-webkit-<span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>;<br>-moz-<span class="hljs-built_in">box</span>-sizing: <span class="hljs-built_in">border</span>-<span class="hljs-built_in">box</span>;<br></code></pre></td></tr></table></figure><p>下面是原理:</p><span id="more"></span><h2 id="box-sizing是什么"><a href="#box-sizing是什么" class="headerlink" title="box-sizing是什么"></a>box-sizing是什么</h2><p>一言以蔽之，box-sizing用来控制元素的内容区域的宽&#x2F;高与padding，border之间的关系；<br>正常的盒模型：</p><p>元素的内容区域宽度&#x3D;width；<br>元素的内容区域高度&#x3D;height；<br>元素实际占的宽度&#x3D;width+padding+border；<br>元素实际占的高度&#x3D;height+padding+border；</p><h4 id="正常显示"><a href="#正常显示" class="headerlink" title="正常显示"></a>正常显示</h4><img src="/2018/02/13/input%E8%AE%BE%E7%BD%AEwidth-100-%E9%A1%B5%E9%9D%A2%E5%87%BA%E7%8E%B0%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/2513564615-5a333910664fe_articlex.png" class=""><p>从图中可以看出 元素实际占的宽度为 420px（10px+50px+300px+50px+10px）。</p><h4 id="box-sizing-content-box"><a href="#box-sizing-content-box" class="headerlink" title="box-sizing:content-box"></a>box-sizing:content-box</h4><p>当我们在该div上设置一个 box-sizing:content-box;效果跟默认的一致，也就是说默认的盒子模型就是<br>box-sizing:content-box; 如下图所示：</p><img src="/2018/02/13/input%E8%AE%BE%E7%BD%AEwidth-100-%E9%A1%B5%E9%9D%A2%E5%87%BA%E7%8E%B0%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/content-box.png" class=""><h4 id="box-sizing-border-box"><a href="#box-sizing-border-box" class="headerlink" title="box-sizing:border-box"></a>box-sizing:border-box</h4><p>当设置 box-sizing:border-box;时，元素的实际宽度就为 300px了，也就是实际宽度值就是 width的值，而该div的内容区的宽度则为除去 padding 和border后的宽度；如下图所示：</p><img src="/2018/02/13/input%E8%AE%BE%E7%BD%AEwidth-100-%E9%A1%B5%E9%9D%A2%E5%87%BA%E7%8E%B0%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/border-box.png" class="">]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手机网站点击链接触发颜色块的问题解决</title>
    <link href="/2018/02/09/%E6%89%8B%E6%9C%BA%E7%BD%91%E7%AB%99%E7%82%B9%E5%87%BB%E9%93%BE%E6%8E%A5%E8%A7%A6%E5%8F%91%E9%A2%9C%E8%89%B2%E5%9D%97%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <url>/2018/02/09/%E6%89%8B%E6%9C%BA%E7%BD%91%E7%AB%99%E7%82%B9%E5%87%BB%E9%93%BE%E6%8E%A5%E8%A7%A6%E5%8F%91%E9%A2%9C%E8%89%B2%E5%9D%97%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>做移动端开发的时候，经常遇到就是点击一个标签的时候，整个颜色块会闪一下，影响美观。然后多次百度之后找到了解决方案</p><blockquote><p>-webkit-tap-highlight-color:rgba(0,0,0,0)  给body加上这个样式即可  </p></blockquote><blockquote><p>下面解释一下什么是RGBA，RAG就是颜色值了，大家都知道，A就是Alpha的缩写，就是透明度的意思，多了一个透明度。那么这个的含义就是颜色是黑色，透明度是0，看不到了。所以点击就没有效果了。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue里面实现toggle效果</title>
    <link href="/2018/02/09/vue%E9%87%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0toggle%E6%95%88%E6%9E%9C/"/>
    <url>/2018/02/09/vue%E9%87%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0toggle%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<p>在不用vue的时代，实现toggle效果一般是直接使用添加删除class来完成，或者使用低版本的jquery用.toggle()函数<br>不过vue最大的特色就是数据驱动页面了，下面我将使用vue来实现toggle效果</p><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcss.com/vue/2.5.13/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.active</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">color</span>:red;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">22px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;change(1)&#x27;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;tag==1?&#x27;active&#x27;:&#x27;&#x27;&quot;</span>&gt;</span>我是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;change(2)&#x27;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;tag==2?&#x27;active&#x27;:&#x27;&#x27;&quot;</span>&gt;</span>我是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;change(3)&#x27;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;tag==3?&#x27;active&#x27;:&#x27;&#x27;&quot;</span>&gt;</span>我是红色<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">tag</span>:<span class="hljs-number">0</span></span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">methods</span>:&#123;</span><br><span class="language-javascript"><span class="hljs-attr">change</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">id</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span>==id) &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span>=<span class="hljs-number">0</span>;</span><br><span class="language-javascript">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">tag</span>=id;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>展示demo看<a href="https://xypecho.github.io/test/vue_toggle.html">这里</a></p>]]></content>
    
    
    <categories>
      
      <category>vue.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移除type=number时浏览器自带的上下箭头</title>
    <link href="/2018/02/09/%E7%A7%BB%E9%99%A4type-number%E6%97%B6%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%B8%A6%E7%9A%84%E4%B8%8A%E4%B8%8B%E7%AE%AD%E5%A4%B4/"/>
    <url>/2018/02/09/%E7%A7%BB%E9%99%A4type-number%E6%97%B6%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%B8%A6%E7%9A%84%E4%B8%8A%E4%B8%8B%E7%AE%AD%E5%A4%B4/</url>
    
    <content type="html"><![CDATA[<p>如图<img src="/2018/02/09/%E7%A7%BB%E9%99%A4type-number%E6%97%B6%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%B8%A6%E7%9A%84%E4%B8%8A%E4%B8%8B%E7%AE%AD%E5%A4%B4/4beb92ed544342d2ca78148cada0111a_articlex.png" class=""><br>在pc端的input里面type&#x3D;number时，会带有上下箭头去掉的方式如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span>::-webkit-outer-spin-button,<br>input::-webkit-inner-spin-button &#123;<br>    -webkit-appearance: none <span class="hljs-meta">!important</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用base64上传图片</title>
    <link href="/2018/02/01/%E4%BD%BF%E7%94%A8base64%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/"/>
    <url>/2018/02/01/%E4%BD%BF%E7%94%A8base64%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>以前做过的上传图片，要么是用的插件，用么就是用的用的定义好的接口，今天自己做项目时第一次遇到上传图片的需求。<br>本来是直接formData放表单里面跟着提交的，但是发现提交到后台后下载下来的文件是0kb，后台弄了很久都没解决方案，于是就用base64来上传图片了。</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//图片转成base64</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">readAsDataURL</span>(<span class="hljs-params">parm, file</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!file) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">var</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();<br>  reader.<span class="hljs-title function_">readAsDataURL</span>(file);<br>  reader.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">var</span> index_local = e.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;,&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index_local);<br>    $(<span class="hljs-string">&quot;input[name=&#x27;&quot;</span> + parm + <span class="hljs-string">&quot;&#x27;]&quot;</span>).<span class="hljs-title function_">val</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>.<span class="hljs-title function_">substring</span>(index_local + <span class="hljs-number">1</span>));<span class="hljs-comment">//此处删除了base64头部的信息</span><br>  &#125;<br>&#125;;<br><span class="hljs-comment">//上传图片并显示</span><br>$(<span class="hljs-string">&#x27;.upload_img_content_file&#x27;</span>).<span class="hljs-title function_">change</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> img = <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br>  <span class="hljs-keyword">let</span> img_src;<br>  <span class="hljs-keyword">if</span> (img.<span class="hljs-property">type</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;image&#x27;</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;请选择图片类型文件&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-comment">//判断兼容性</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">navigator</span>.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;Chrome&#x27;</span>) &gt; <span class="hljs-number">0</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">navigator</span>.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;Safari&#x27;</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>    img_src = <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitURL</span>.<span class="hljs-title function_">createObjectURL</span>(img);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    img_src = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(img);<br>  &#125;<br>  $(<span class="hljs-string">&quot;.upload_img_content&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">`&lt;img src=<span class="hljs-subst">$&#123;img_src&#125;</span>&gt;`</span>);<br>  <span class="hljs-title function_">readAsDataURL</span>(<span class="hljs-string">&quot;logoimg_base64&quot;</span>, img);<br>&#125;)<br></code></pre></td></tr></table></figure><p>这里有<a href="https://xypecho.github.io/test/img_to_base64.html">demo</a>记得打开f12看input里面的value值</p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>纯js实现图片上传和预览</title>
    <link href="/2018/01/26/%E4%BC%A0js%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%92%8C%E9%A2%84%E8%A7%88/"/>
    <url>/2018/01/26/%E4%BC%A0js%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%92%8C%E9%A2%84%E8%A7%88/</url>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;imgfile&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;fileObj&#x27;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&#x27;fileupload()&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">fileupload=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> fileImage = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;fileObj&#x27;</span>); </span><br><span class="language-javascript"><span class="hljs-keyword">var</span> imgObjPreview = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;imgfile&quot;</span>); </span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">navigator</span>.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Chrome&quot;</span>) &gt;= <span class="hljs-number">1</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">navigator</span>.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;Safari&quot;</span>) &gt;= <span class="hljs-number">1</span>) &#123; </span><br><span class="language-javascript">imgObjPreview.<span class="hljs-property">src</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitURL</span>.<span class="hljs-title function_">createObjectURL</span>(fileImage.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]); </span><br><span class="language-javascript">&#125; </span><br><span class="language-javascript"><span class="hljs-keyword">else</span> &#123; </span><br><span class="language-javascript">imgObjPreview.<span class="hljs-property">src</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(fileImage.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]); </span><br><span class="language-javascript">&#125; </span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>demo看<a href="https://xypecho.github.io/test/upload_img.html">这里</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS使元素固定底部的方法</title>
    <link href="/2018/01/24/CSS%E4%BD%BF%E5%85%83%E7%B4%A0%E5%9B%BA%E5%AE%9A%E5%BA%95%E9%83%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <url>/2018/01/24/CSS%E4%BD%BF%E5%85%83%E7%B4%A0%E5%9B%BA%E5%AE%9A%E5%BA%95%E9%83%A8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>固定在底部包括两种情况，第一种是当页面内容尚未填充满的时候，页脚需要固定在底部，第二种是页面填充满后，页脚需要随页面内容的增加而填充在主体内容的下方。</p></blockquote><p>最简单粗暴的方法就是给元素设置position:fixed;bottom:0;不过这样写在移动端或者设备高度不高的情况下，会严重影响用户体验。前段时间看饿了么视频的时候，视频里面黄奕老师讲到一个黑科技’Sticky footers’,然后百度了一下，实现了他里面的方法。</p><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">html</span>,<span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.footer</span> &#123;<span class="hljs-attribute">margin-top</span>:-<span class="hljs-number">30px</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">30px</span>;<span class="hljs-attribute">background-color</span>:<span class="hljs-number">#eee</span>;&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.wrap</span>&#123;<span class="hljs-attribute">min-height</span>:<span class="hljs-number">100%</span>&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.main</span>&#123;<span class="hljs-attribute">padding-bottom</span>:<span class="hljs-number">30px</span>;<span class="hljs-attribute">overflow</span>:hidden;&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrap&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span>这里是网页的主体<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>这里是页脚<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>demo看<a href="https://xypecho.github.io/test/Sticky_footers.html">这里</a>  </p><p>还可以使用flex布局来实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">html</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">  <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">  <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-id">#content</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#footer</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">30px</span>;</span><br><span class="language-css">  <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span> Brook.inc<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>戳<a href="https://xypecho.github.io/test/bottom.html">这里看demo</a></p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>原生js批量增加css样式</title>
    <link href="/2018/01/24/%E5%8E%9F%E7%94%9Fjs%E6%89%B9%E9%87%8F%E5%A2%9E%E5%8A%A0css%E6%A0%B7%E5%BC%8F/"/>
    <url>/2018/01/24/%E5%8E%9F%E7%94%9Fjs%E6%89%B9%E9%87%8F%E5%A2%9E%E5%8A%A0css%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>&amp;#8194;&amp;#8194;原生js里面我们一般这样给元素增加样式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">let <span class="hljs-attribute">div_heade</span>=document.querySelector(&#x27;.div_heade&#x27;);<br>div_heade.style.<span class="hljs-attribute">width</span>=<span class="hljs-string">&#x27;100px&#x27;</span>;<br>div_heade.style.<span class="hljs-attribute">height</span>=<span class="hljs-string">&#x27;100px&#x27;</span>;<br></code></pre></td></tr></table></figure><span id="more"></span><p>&amp;#8194;&amp;#8194;这样显然效率会比较低，于是google了一下，发现了一个属性cssText，然后我们批量写属性的时候就可以这么写了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">let <span class="hljs-attribute">div_heade</span>=document.querySelector(&#x27;.div_heade&#x27;);<br>div_heade.style.<span class="hljs-attribute">cssText</span>=<span class="hljs-string">&#x27;width:100px;height:100px&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用h5的新特性在客户端存储数据</title>
    <link href="/2018/01/21/%E5%88%A9%E7%94%A8h5%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/"/>
    <url>/2018/01/21/%E5%88%A9%E7%94%A8h5%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>&amp;#8194;&amp;#8194;感觉做项目能学到的很多新东西啊，最近项目里有个需求，要展示用户的搜索记录。由于我是第一次遇到这个需求，于是我就先百度了一下，发现了h5的一个黑科技</p><blockquote><p>在客户端存储数据<br>HTML5 提供了两种在客户端存储数据的新方法：<br>localStorage - 没有时间限制的数据存储<br>sessionStorage - 针对一个 session 的数据存储<br>之前，这些都是由 cookie 完成的。但是 cookie 不适合大量数据的存储，因为它们由每个对服务器的请求来传递，这使得 cookie 速度很慢而且效率也不高。<br>在 HTML5 中，数据不是由每个服务器请求传递的，而是只有在请求时使用数据。它使在不影响网站性能的情况下存储大量数据成为可能。<br>对于不同的网站，数据存储于不同的区域，并且一个网站只能访问其自身的数据。<br>HTML5 使用 JavaScript 来存储和访问数据。</p></blockquote><span id="more"></span><p>&amp;#8194;&amp;#8194;于是我就打算用localStorage来实现历史搜索这个功能。先百度了一下他的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage">api</a>,发现他是用setItem来存储数据，用getItem来删除数据的。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">let storage=window.localStorage;<span class="hljs-regexp">//</span>先定义并初始化变量<br>let history_keywords=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>];<span class="hljs-regexp">//</span>定义要存储的数据，实际项目中history_keywords是获取用户输入的关键词<br>history_keywords=JSON.stringify(history_keywords); <span class="hljs-regexp">//</span>stringify()用于从一个对象解析出字符串,方面存储数据<br>storage.setItem(<span class="hljs-string">&#x27;options&#x27;</span>,history_keywords);<span class="hljs-regexp">//</span>把history_keywords存储进storage，键为options<br>console.log(storage);<span class="hljs-regexp">//</span>输出的内容看下图<br><br>let get_storage=storage.getItem(<span class="hljs-string">&#x27;options&#x27;</span>);<span class="hljs-regexp">//</span>取出数据<br>console.log(get_storage);<span class="hljs-regexp">//</span>输出为[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>]<br></code></pre></td></tr></table></figure><p>&amp;#8194;&amp;#8194;这是console.log(storage);输出的数据<img src="/2018/01/21/%E5%88%A9%E7%94%A8h5%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/20180121164859.png" class=""><br>&amp;#8194;&amp;#8194;那么如何删除里面的指定数据呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> options=<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&#x27;options&#x27;</span>));<span class="hljs-comment">//将localStorage里面的对象转成数组进行增删</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(options);<span class="hljs-comment">//[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;];</span><br><span class="hljs-keyword">let</span> arr1=options.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">val_options</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">return</span> val_options!==options_val;<br>&#125;);<span class="hljs-comment">//返回一个新数据</span><br><span class="hljs-variable language_">localStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;options&#x27;</span>,<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(arr1));<span class="hljs-comment">//把去除元素后的新数组赋值给localStorage</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;该条历史搜索清除成功&#x27;</span>);<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-title function_">reload</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">localStorage</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>H5新特性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>H5新特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css实现图片自动旋转</title>
    <link href="/2018/01/21/css%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E6%97%8B%E8%BD%AC/"/>
    <url>/2018/01/21/css%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E6%97%8B%E8%BD%AC/</url>
    
    <content type="html"><![CDATA[<blockquote><p>通过 @keyframes 规则，您能够创建动画。<br>创建动画的原理是，将一套 CSS 样式逐渐变化为另一套样式。<br>在动画过程中，您能够多次改变这套 CSS 样式。<br>以百分比来规定改变发生的时间，或者通过关键词 “from” 和 “to”，等价于 0% 和 100%。<br>0% 是动画的开始时间，100% 动画的结束时间。<br>为了获得最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。</p></blockquote><span id="more"></span><p>&amp;#8194;&amp;#8194;CSS3里面多了很多动画特效方面的css，前几天项目里遇到一个需要，做一个ajax加载时的动画效果（一个圆圈在旋转显示加载中）,在网上搜索了一下找到了解决方案，在jquery的ajax方法里面加一个参数beforeSend,这个里面就是ajax发送前执行的函数，然后可以配合css3的图片旋转，让display:none的图片在这个时候显示display:block。<br>&amp;#8194;&amp;#8194;那么css3怎么实现图片不停旋转呢，开头引用的w3school里面的文档就很好的说明了。老规矩，先上代码</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//css样式</span><br><span class="hljs-selector-class">.loading</span> img&#123;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">vertical-align</span>: middle;<br>  <span class="hljs-attribute">animation</span>:rotating <span class="hljs-number">1.2s</span> linear infinite; <span class="hljs-comment">//第一个参数是规定需要绑定到选择器的 keyframe 名称;第二个是规定完成动画所花费的时间，以秒或毫秒计;第三个参数是规定动画的速度曲线(可选值看http://www.w3school.com.cn/cssref/pr_animation-timing-function.asp);</span><br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-keyword">@keyframes</span> rotating&#123;<br>from&#123;<span class="hljs-attribute">transform</span>:rotate(<span class="hljs-number">0</span>)&#125;<br>to&#123;<span class="hljs-attribute">transform</span>:rotate(<span class="hljs-number">360deg</span>)&#125;<br>&#125;<br><br><br><span class="hljs-comment">//一个div里面有一个图片</span><br>&lt;<span class="hljs-selector-tag">div</span> class=<span class="hljs-string">&quot;loading&quot;</span>&gt;<br>&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;http://pic9.nipic.com/20100916/2531170_131413079748_2.jpg&quot;</span>&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>点这里看<a href="https://xypecho.github.io/test/tese.html">demo</a>.</p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>改变函数内部this的指向</title>
    <link href="/2018/01/18/%E6%94%B9%E5%8F%98%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8this%E7%9A%84%E6%8C%87%E5%90%91/"/>
    <url>/2018/01/18/%E6%94%B9%E5%8F%98%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8this%E7%9A%84%E6%8C%87%E5%90%91/</url>
    
    <content type="html"><![CDATA[<p>&amp;#8194;&amp;#8194;今天项目遇到一个问题，先上代码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">son.city.li.onclick=<span class="hljs-keyword">function</span><span class="hljs-literal">()</span>&#123;<br>update<span class="hljs-constructor">Resume(<span class="hljs-params">province_city</span>[<span class="hljs-params">i</span>].<span class="hljs-params">citys</span>[<span class="hljs-params">j</span>].<span class="hljs-params">id</span>)</span>;<br>&#125;<br>   <span class="hljs-keyword">function</span> update<span class="hljs-constructor">Resume(<span class="hljs-params">id</span>)</span>&#123;<br>   console.log(this);<span class="hljs-comment">//this指向了window</span><br>   &#125;<br></code></pre></td></tr></table></figure><span id="more"></span><p>最近都没怎么用jquery，一直用的原生js，所以遇到了很多以前没遇到过的问题(正好可以熟练下js)，’son.city.li’是动态创建的，原本是想给每个li都增加一个点击事件，然后点击后父级style的color变成红色；可是在updateResume函数内使用this.parentNode.style.color&#x3D;’#ba3537’却一直不奏效，于是打印了一下this，发现指向了window(ps:本人js基础很渣渣，以前不知道：没有被绑定的对象，默认this 指向window 对象);于是百度了一下，知道了call()。<br>解决方案</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">son.<span class="hljs-property">city</span>.<span class="hljs-property">li</span>.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//updateResume(province_city[i].citys[j].id);</span><br>updateResume.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, position12[i].<span class="hljs-property">position2</span>[j].<span class="hljs-property">id</span>);<br>&#125;<br>   <span class="hljs-keyword">function</span> <span class="hljs-title function_">updateResume</span>(<span class="hljs-params">id</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<span class="hljs-comment">//this指向了son.city.li</span><br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图片在div垂直水平居中的方法(持续更新)</title>
    <link href="/2018/01/16/%E5%9B%BE%E7%89%87%E5%9C%A8div%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <url>/2018/01/16/%E5%9B%BE%E7%89%87%E5%9C%A8div%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="1、vertical-align属性只会在inline-block水平的元素上期作用-例如图片，按钮，单复选框，单行-x2F-多行文本框等HTML控件，只有这些元素默认情况下会对vertical-align属性起作用"><a href="#1、vertical-align属性只会在inline-block水平的元素上期作用-例如图片，按钮，单复选框，单行-x2F-多行文本框等HTML控件，只有这些元素默认情况下会对vertical-align属性起作用" class="headerlink" title="1、vertical-align属性只会在inline-block水平的元素上期作用,例如图片，按钮，单复选框，单行&#x2F;多行文本框等HTML控件，只有这些元素默认情况下会对vertical-align属性起作用."></a>1、vertical-align属性只会在inline-block水平的元素上期作用,例如图片，按钮，单复选框，单行&#x2F;多行文本框等HTML控件，只有这些元素默认情况下会对vertical-align属性起作用.</h4><span id="more"></span><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>: red;</span><br><span class="language-css"><span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css"><span class="hljs-attribute">line-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css"><span class="hljs-selector-tag">img</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css"><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br><span class="language-css"><span class="hljs-attribute">vertical-align</span>: middle;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://pic9.nipic.com/20100916/2531170_131413079748_2.jpg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如图：<img src="/2018/01/16/%E5%9B%BE%E7%89%87%E5%9C%A8div%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/QQ%E6%88%AA%E5%9B%BE20180116155325.png" class=""></p><h4 id="2、利用绝对定位-不过感觉为什么视觉上并没有居中…"><a href="#2、利用绝对定位-不过感觉为什么视觉上并没有居中…" class="headerlink" title="2、利用绝对定位(不过感觉为什么视觉上并没有居中…)"></a>2、利用绝对定位(不过感觉为什么视觉上并没有居中…)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">img</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>:<span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://img5.duitang.com/uploads/item/201312/05/20131205172435_Sesdy.jpeg&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>戳<a href="https://xypecho.github.io/test/center.html">这里</a>看demo</p><h4 id="3、利用css3属性transform"><a href="#3、利用css3属性transform" class="headerlink" title="3、利用css3属性transform"></a>3、利用css3属性transform</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;screen&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-id">#appLoading</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; &#125;</span><br><span class="language-css">    <span class="hljs-selector-id">#appLoading</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">    <span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">50%</span>)  <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;appLoading&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3828227436,2721096501&amp;fm=27&amp;gp=0.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;loading&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>戳<a href="https://xypecho.github.io/test/center1.html">这里</a>看demo</p>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6知识点记录</title>
    <link href="/2018/01/12/ES6%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <url>/2018/01/12/ES6%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="0、es6开发环境搭建"><a href="#0、es6开发环境搭建" class="headerlink" title="0、es6开发环境搭建"></a>0、es6开发环境搭建</h3><h4 id="建立工程目录："><a href="#建立工程目录：" class="headerlink" title="建立工程目录："></a>建立工程目录：</h4><p>先建立一个项目的工程目录，并在目录下边建立两个文件夹：src和dist<br><br>src：书写ES6代码的文件夹，写的js程序都放在这里。<br><br>dist：利用Babel编译成的ES5代码的文件夹，在HTML页面需要引入的时这里的js文件。<br></p><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><span id="more"></span><p>在安装Babel之前，需要用npm init先初始化我们的项目。打开终端或者通过cmd打开命令行工具，进入项目目录，输入下边的命令：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init -y<br></code></pre></td></tr></table></figure><h4 id="全局安装Babel-cli"><a href="#全局安装Babel-cli" class="headerlink" title="全局安装Babel-cli"></a>全局安装Babel-cli</h4><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g babel-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><h4 id="本地安装babel-preset-es2015-和-babel-cli"><a href="#本地安装babel-preset-es2015-和-babel-cli" class="headerlink" title="本地安装babel-preset-es2015 和 babel-cli"></a>本地安装babel-preset-es2015 和 babel-cli</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span>--save-dev <span class="hljs-keyword">babel-preset-es2015 </span><span class="hljs-keyword">babel-cli</span><br></code></pre></td></tr></table></figure><h4 id="根目录新建-babelrc"><a href="#根目录新建-babelrc" class="headerlink" title="根目录新建.babelrc"></a>根目录新建.babelrc</h4><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">type</span> <span class="hljs-title class_">null</span><span class="hljs-operator">&gt;</span>.babelrc <span class="hljs-comment">//如果创建文件提示请输入文件名，就用这个命令</span><br></code></pre></td></tr></table></figure><p>这个文件我们建立完成后，现在可以在终端输入的转换命令了，这次ES6成功转化为ES5的语法。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">babel src<span class="hljs-regexp">/index.js -o dist/i</span>ndex.js<br></code></pre></td></tr></table></figure><h3 id="1、ES6中，给传递的参数设置默认值的方式为"><a href="#1、ES6中，给传递的参数设置默认值的方式为" class="headerlink" title="1、ES6中，给传递的参数设置默认值的方式为"></a>1、ES6中，给传递的参数设置默认值的方式为</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">print</span>(<span class="hljs-params">text=<span class="hljs-string">&quot;hello world&quot;</span></span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">text</span>);   <span class="hljs-comment">//这种写法可以在参数设置默认值</span><br>&#125;<br><br><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b=<span class="hljs-number">1</span></span>)&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//2会取代设备的b的默认值1</span><br>add(<span class="hljs-number">1</span>);<span class="hljs-comment">//b会启用默认值1</span><br></code></pre></td></tr></table></figure><!--more--><h3 id="2、let声明的变量只在自己的作用域里面有效即块级作用域"><a href="#2、let声明的变量只在自己的作用域里面有效即块级作用域" class="headerlink" title="2、let声明的变量只在自己的作用域里面有效即块级作用域"></a>2、let声明的变量只在自己的作用域里面有效即块级作用域</h3><p>通俗的理解就是let的作用域在一对{}花括号里面，出了花括号就是undefined。(ps:包括if语句的花括号)</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">for</span>(let i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);<span class="hljs-comment">//输出结果为1，2</span><br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);<span class="hljs-comment">//报错Reference Error 引用错误i is not defined</span><br>&#125;<br>test();<br>&lt;!--下面的<span class="hljs-keyword">var</span>的例子--&gt;<br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#123;<br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&quot;hello world&quot;</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<span class="hljs-comment">//hello world ,var定义的为全局变量，在代码块里面也会覆盖前面的赋值</span><br></code></pre></td></tr></table></figure><h3 id="3、使用let-声明变量时不能重复声明，否则会报语法错误"><a href="#3、使用let-声明变量时不能重复声明，否则会报语法错误" class="headerlink" title="3、使用let 声明变量时不能重复声明，否则会报语法错误"></a>3、使用let 声明变量时不能重复声明，否则会报语法错误</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let a<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;</span><br>let a<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-comment">; //Syntax Error 语法错误，</span><br></code></pre></td></tr></table></figure><h3 id="4、const-声明的常量的值无法被修改，否则会报错；const也是块级作用域"><a href="#4、const-声明的常量的值无法被修改，否则会报错；const也是块级作用域" class="headerlink" title="4、const 声明的常量的值无法被修改，否则会报错；const也是块级作用域"></a>4、const 声明的常量的值无法被修改，否则会报错；const也是块级作用域</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>const <span class="hljs-literal">PI</span>=<span class="hljs-number">3.1415</span>;<br><span class="hljs-literal">PI</span>=<span class="hljs-number">123</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-literal">PI</span>);<br>&#125;<br>test();<span class="hljs-comment">//TypeError 类型错误，</span><br></code></pre></td></tr></table></figure><h3 id="5、const声明常量时必须赋值，不然会报错"><a href="#5、const声明常量时必须赋值，不然会报错" class="headerlink" title="5、const声明常量时必须赋值，不然会报错"></a>5、const声明常量时必须赋值，不然会报错</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">function test()&#123;<br>const a<span class="hljs-comment">;</span><br>a<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;</span><br>&#125;<br><br>test()<span class="hljs-comment">; //语法错误Uncaught SyntaxError: Missing initializer in const declaration</span><br></code></pre></td></tr></table></figure><h3 id="6、使用const声明一个对象时，数值可以修改，因为对象是引用类型，返回的是的对象存储的内存的指针；而指针没有改变"><a href="#6、使用const声明一个对象时，数值可以修改，因为对象是引用类型，返回的是的对象存储的内存的指针；而指针没有改变" class="headerlink" title="6、使用const声明一个对象时，数值可以修改，因为对象是引用类型，返回的是的对象存储的内存的指针；而指针没有改变"></a>6、使用const声明一个对象时，数值可以修改，因为对象是引用类型，返回的是的对象存储的内存的指针；而指针没有改变</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>const k=&#123;<br><span class="hljs-attr">a</span>:<span class="hljs-number">1</span><br>&#125;<br>k.b=<span class="hljs-number">2</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(k);输出为&#123;<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>&#125;<br>&#125;<br><br>test();<br></code></pre></td></tr></table></figure><h3 id="7、es6语法新增的赋值写法"><a href="#7、es6语法新增的赋值写法" class="headerlink" title="7、es6语法新增的赋值写法"></a>7、es6语法新增的赋值写法</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">&#123;<br>let a,b,reset;<br>[a,b]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a,b); <span class="hljs-comment">//输出为1 2</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8、数组的解构赋值"><a href="#8、数组的解构赋值" class="headerlink" title="8、数组的解构赋值"></a>8、数组的解构赋值</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&#123;<br><span class="hljs-keyword">let</span> a,b,c;<br>[a,b,...c]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);<span class="hljs-comment">//1 2  [3, 4, 5, 6, 7]</span><br>&#125;<br>&#123;<br><span class="hljs-keyword">let</span> [a,b,c]=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<span class="hljs-comment">//这种写法需要键值对应</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);<span class="hljs-comment">//1,2,3</span><br><br><br><span class="hljs-comment">//给b设置默认值</span><br><span class="hljs-keyword">let</span> [a,b=<span class="hljs-string">&#x27;3&#x27;</span>,c]=[<span class="hljs-number">1</span>,,<span class="hljs-number">3</span>];<span class="hljs-comment">//逗号不能省略</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);<span class="hljs-comment">//1,&#x27;3&#x27;,3</span><br>&#125;<br>&lt;!--上面的写法相当于es5的下面的写法--&gt;<br><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>,<br>    b = <span class="hljs-number">2</span>,<br>    c = <span class="hljs-number">3</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b, c);<br><br><br><span class="hljs-comment">//使用场景，交互值</span><br><span class="hljs-keyword">let</span> a,b;<br>a=<span class="hljs-number">1</span>;<br>b=<span class="hljs-number">2</span>;<br>[a,b]=[b,a]<br><br><span class="hljs-comment">//解构赋值使用场景，去除json数据</span><br>&#123;<br><span class="hljs-keyword">let</span> jsondata=&#123;<br><span class="hljs-attr">title</span>:<span class="hljs-string">&quot;test&quot;</span>,<br><span class="hljs-attr">test</span>:[<br>&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;mytest&quot;</span>,<br><span class="hljs-attr">desc</span>:<span class="hljs-string">&quot;this is a test&quot;</span><br>&#125;<br>]<br>&#125;<br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">title</span>:data1,<span class="hljs-attr">test</span>:[&#123;<span class="hljs-attr">name</span>:data2&#125;]&#125;=jsondata;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data1,data2); <span class="hljs-comment">//输出为test mytest</span><br>&#125;<br><br><span class="hljs-keyword">var</span> jsonData = &#123;<br> <span class="hljs-attr">id</span>: <span class="hljs-number">42</span>,<br> <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;OK&quot;</span>,<br> <span class="hljs-attr">data</span>: [<span class="hljs-number">867</span>, <span class="hljs-number">5309</span>]<br>&#125;;<br><span class="hljs-keyword">let</span> &#123; id, status, <span class="hljs-attr">data</span>: <span class="hljs-built_in">number</span> &#125; = jsonData;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id, status, <span class="hljs-built_in">number</span>);<br><span class="hljs-comment">// 42, &quot;OK&quot;, [867, 5309]</span><br></code></pre></td></tr></table></figure><h3 id="9、对象的解构赋值"><a href="#9、对象的解构赋值" class="headerlink" title="9、对象的解构赋值"></a>9、对象的解构赋值</h3><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">let</span> &#123;<span class="hljs-built_in">bar</span>,foo&#125;=&#123;foo:&#x27;<span class="hljs-number">123</span>&#x27;,<span class="hljs-built_in">bar</span>:<span class="hljs-string">&quot;jack&quot;</span>&#125;;<br>console.log(<span class="hljs-built_in">bar</span>,foo); <span class="hljs-comment">//对象的解构赋值只需要键值对应，顺序不影响赋值</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-built_in">bar</span>;<br>&#123;<span class="hljs-built_in">bar</span>&#125;=&#123;<span class="hljs-built_in">bar</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;;<span class="hljs-comment">//这样写会报错，因为先赋值了再解构必然会报错</span><br>(&#123;<span class="hljs-built_in">bar</span>&#125;=&#123;<span class="hljs-built_in">bar</span>:<span class="hljs-string">&quot;123&quot;</span>&#125;) ;<span class="hljs-comment">//正确的写法应该在外面加个圆括号,一个小技巧，单引号比双引号编译快</span><br></code></pre></td></tr></table></figure><h3 id="10、字符串的解构"><a href="#10、字符串的解构" class="headerlink" title="10、字符串的解构"></a>10、字符串的解构</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let [a,b,c,d,e]=<span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a,b,c,d,e); <span class="hljs-comment">//输出h e l l o</span><br></code></pre></td></tr></table></figure><h3 id="10、扩展运算符"><a href="#10、扩展运算符" class="headerlink" title="10、扩展运算符"></a>10、扩展运算符</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>扩展运算符就是 ... 三个点，后面加一个自定义的变量<br><span class="hljs-regexp">//</span>使用场景，声明一个方法，不确定参数个数的时候<br><span class="hljs-keyword">function</span> test(...arg)&#123;<br>console.log(arg[<span class="hljs-number">0</span>]);<br>console.log(arg[<span class="hljs-number">1</span>]);<br>console.log(arg[<span class="hljs-number">2</span>]);<br>console.log(arg[<span class="hljs-number">3</span>]);<br>&#125;;<br>test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<span class="hljs-regexp">//</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,undefined  <br><br><br><span class="hljs-regexp">//</span>实例<br>let arr1=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xypecho&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br>let arr2=arr1;<br>arr2.push(<span class="hljs-string">&#x27;cn&#x27;</span>);<br>console.log(arr1);<span class="hljs-regexp">//</span>输出 [<span class="hljs-string">&quot;www&quot;</span>, <span class="hljs-string">&quot;xypecho&quot;</span>, <span class="hljs-string">&quot;com&quot;</span>, <span class="hljs-string">&quot;cn&quot;</span>]，因为这个let arr2=arr1;并没有开辟新的内存空间给arr2，所以arr1和arr2是同一个内存空间<br><br><span class="hljs-regexp">//</span>修正写法应该为<br>let arr1=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xypecho&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br>let arr2=[...arr1];<br>arr2.push(<span class="hljs-string">&#x27;cn&#x27;</span>);<br>console.log(arr1); <span class="hljs-regexp">//</span>[<span class="hljs-string">&quot;www&quot;</span>, <span class="hljs-string">&quot;xypecho&quot;</span>, <span class="hljs-string">&quot;com&quot;</span>]<br>console.log(arr2); <span class="hljs-regexp">//</span>[<span class="hljs-string">&quot;www&quot;</span>, <span class="hljs-string">&quot;xypecho&quot;</span>, <span class="hljs-string">&quot;com&quot;</span>, <span class="hljs-string">&quot;cn&quot;</span>]<br></code></pre></td></tr></table></figure><h3 id="11、rest运算符"><a href="#11、rest运算符" class="headerlink" title="11、rest运算符"></a>11、rest运算符</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">//rest英文有剩余的意思</span><br><span class="hljs-comment">//值得注意的是rest参数之后不能再有其他参数（只能是最后一个参数）否则会报错</span><br><span class="hljs-comment">//函数的length属性不包括rest参数。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span><span class="hljs-params">(first_arg,<span class="hljs-rest_arg">...arg</span>)</span>&#123;<br><span class="hljs-keyword">for</span>(let val of arg)&#123;<br>console.log(val);<br>&#125;<br>&#125;<br>test(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>); <span class="hljs-comment">//输出为2，3，4，5</span><br></code></pre></td></tr></table></figure><h3 id="12、字符串查找，查看某段字符串里面是否含有某个字符"><a href="#12、字符串查找，查看某段字符串里面是否含有某个字符" class="headerlink" title="12、字符串查找，查看某段字符串里面是否含有某个字符"></a>12、字符串查找，查看某段字符串里面是否含有某个字符</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let a=<span class="hljs-string">&#x27;非常高兴你能看到这篇文章，我是你的老朋友&#x27;</span>;<br>let b=<span class="hljs-string">&#x27;老朋友&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a.<span class="hljs-built_in">includes</span>(b)); <span class="hljs-comment">//输出true，b里面的‘老朋友’加上空格的话，即输出false</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a.startsWith(b));<span class="hljs-comment">//输出false；表示参数字符串是否在源字符串的头部</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a.endssWith(b));<span class="hljs-comment">//输出false；表示参数字符串是否在源字符串的尾部。</span><br></code></pre></td></tr></table></figure><h3 id="13、字符串的复制"><a href="#13、字符串的复制" class="headerlink" title="13、字符串的复制"></a>13、字符串的复制</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let a=<span class="hljs-string">&#x27;demo123&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a.repeat(<span class="hljs-number">3</span>)); <span class="hljs-comment">//repeat()里面的参数代表复制的次数</span><br></code></pre></td></tr></table></figure><h3 id="14、ES6数字操作"><a href="#14、ES6数字操作" class="headerlink" title="14、ES6数字操作"></a>14、ES6数字操作</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建一个二进制数字，binary</span><br><span class="hljs-keyword">let</span> a=<span class="hljs-number">0B010101</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//21</span><br><span class="hljs-comment">//创建一个八进制数字,octal</span><br><span class="hljs-keyword">let</span> b=<span class="hljs-number">0O666</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<span class="hljs-comment">//438,ps第二个字符是大写的字母O</span><br><br><span class="hljs-comment">//判断是否是数字</span><br><span class="hljs-keyword">let</span> a=<span class="hljs-number">0B010101</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(a)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(<span class="hljs-title class_">NaN</span>)); <span class="hljs-comment">//false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(<span class="hljs-string">&#x27;hello&#x27;</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//判断是否是NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(<span class="hljs-title class_">NaN</span>)); <span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(<span class="hljs-number">123</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//判断数字是否为整数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-number">123</span>));<span class="hljs-comment">//true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(<span class="hljs-number">12.3</span>));<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//把数字转为整型</span><br><span class="hljs-keyword">let</span> num=<span class="hljs-number">123.1</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>(num)); <span class="hljs-comment">//123</span><br><br><span class="hljs-comment">//把数字转成浮点类型</span><br><span class="hljs-keyword">let</span> num1=<span class="hljs-number">123</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseFloat</span>(num1));<br><br><span class="hljs-comment">//数组取整</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">trunc</span>(<span class="hljs-number">4.1</span>)); <span class="hljs-comment">//输出4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">trunc</span>(<span class="hljs-number">4.9</span>)); <span class="hljs-comment">//输出4</span><br><br><span class="hljs-comment">//判断是正数负数还是0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sign</span>(<span class="hljs-number">4</span>)); <span class="hljs-comment">//输出1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sign</span>(-<span class="hljs-number">3</span>));<span class="hljs-comment">//输出-1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">trunc</span>(<span class="hljs-number">0</span>));<span class="hljs-comment">//输出0</span><br></code></pre></td></tr></table></figure><h3 id="15、json转为数组"><a href="#15、json转为数组" class="headerlink" title="15、json转为数组"></a>15、json转为数组</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//原生js并没有什么直接内置好的函数去将<span class="hljs-type">json</span>数据转化为数组，es6有方法可以实现<br>let <span class="hljs-type">json</span>=&#123;<br><span class="hljs-string">&#x27;0&#x27;</span>:<span class="hljs-string">&#x27;www&#x27;</span>,<br><span class="hljs-string">&#x27;1&#x27;</span>:<span class="hljs-string">&#x27;xypecho&#x27;</span>,<br><span class="hljs-string">&#x27;2&#x27;</span>:<span class="hljs-string">&#x27;com&#x27;</span>,<br>length:<span class="hljs-number">3</span><br>&#125;<br>console.log(<span class="hljs-type">json</span>);//&#123;<span class="hljs-number">0</span>: &quot;www&quot;, <span class="hljs-number">1</span>: &quot;xypecho&quot;, <span class="hljs-number">2</span>: &quot;com&quot;, length: <span class="hljs-number">3</span>&#125;<br>console.log(<span class="hljs-keyword">Array</span>.<span class="hljs-keyword">from</span>(<span class="hljs-type">json</span>));// [&quot;www&quot;, &quot;xypecho&quot;, &quot;com&quot;]<br></code></pre></td></tr></table></figure><h3 id="16、数字和字符串转为数组"><a href="#16、数字和字符串转为数组" class="headerlink" title="16、数字和字符串转为数组"></a>16、数字和字符串转为数组</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Array</span>.of(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>));<span class="hljs-comment">// [1, 2, 3, 4]</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Array</span>.of(<span class="hljs-string">&#x27;javascript&#x27;</span>));<span class="hljs-comment">//[&quot;javascript&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="17、查找数组里面的字符"><a href="#17、查找数组里面的字符" class="headerlink" title="17、查找数组里面的字符"></a>17、查找数组里面的字符</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//find()为示例方法,value为需要查找的值，index为索引，arr为源数组</span><br><span class="hljs-comment">//数组实例的find方法，用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined。</span><br>let arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.<span class="hljs-built_in">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value,index,arr</span>)&#123;<br><span class="hljs-keyword">return</span> value&gt;<span class="hljs-number">5</span>;<br>&#125;));<br><br><br>let arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr.findIndex(<span class="hljs-keyword">function</span>(<span class="hljs-params">value,index,arr</span>)&#123;<br><span class="hljs-keyword">return</span> value&gt;<span class="hljs-number">5</span>;<br>&#125;));<br><span class="hljs-comment">//查找满足条件的值的索引</span><br></code></pre></td></tr></table></figure><h3 id="18、数组里面值的替换"><a href="#18、数组里面值的替换" class="headerlink" title="18、数组里面值的替换"></a>18、数组里面值的替换</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">let arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br><span class="hljs-regexp">//</span>arr.fill(<span class="hljs-string">&#x27;text&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>); <span class="hljs-regexp">//</span>第一个参数是用来替换的变量，第二个是开始位置，第三个是结束位置<br>arr.fill(<span class="hljs-string">&#x27;text&#x27;</span>); <span class="hljs-regexp">//</span>不加起始位置则全部替换<br>console.log(arr);<br></code></pre></td></tr></table></figure><h3 id="19、es6的新的数组循环"><a href="#19、es6的新的数组循环" class="headerlink" title="19、es6的新的数组循环"></a>19、es6的新的数组循环</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs awk">let arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br><span class="hljs-keyword">for</span>(let item of arr)&#123;<br>console.log(item);<span class="hljs-regexp">//</span>www,xyp,com<br>&#125;<br><br><span class="hljs-regexp">//</span>要输出下标的话可以这样<br>let arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br><span class="hljs-keyword">for</span>(let item of arr.keys())&#123;<br>console.log(item); <span class="hljs-regexp">//</span><span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-regexp">//</span>如果要下标和值一起输出的话可以这样<br>let arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br><span class="hljs-keyword">for</span>(let item of arr.entries())&#123;<br>console.log(item); <span class="hljs-regexp">//</span> [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;www&quot;</span>]  [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;xyp&quot;</span>]  [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;com&quot;</span>]<br>&#125;<br><br><br><span class="hljs-regexp">//</span>键值分开输出<br>let arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br><span class="hljs-keyword">for</span>(let [key,val] of arr.entries())&#123;<br>console.log(key,val);<br><span class="hljs-regexp">//</span><span class="hljs-number">0</span> <span class="hljs-string">&quot;www&quot;</span><br><span class="hljs-regexp">//</span><span class="hljs-number">1</span> <span class="hljs-string">&quot;xyp&quot;</span><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span> <span class="hljs-string">&quot;com&quot;</span><br>&#125;<br><br><span class="hljs-regexp">//</span>手动循环输出数组<br>let arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br>let list=arr.entries();<br>console.log(list.<span class="hljs-keyword">next</span>().value);<br>console.log(<span class="hljs-string">&#x27;----------&#x27;</span>);<br>console.log(list.<span class="hljs-keyword">next</span>().value);<br>console.log(<span class="hljs-string">&#x27;----------&#x27;</span>);<br>console.log(list.<span class="hljs-keyword">next</span>().value);<br>console.log(<span class="hljs-string">&#x27;----------&#x27;</span>);<br><span class="hljs-regexp">//</span>(<span class="hljs-number">2</span>) [<span class="hljs-number">0</span>, <span class="hljs-string">&quot;www&quot;</span>]<br><span class="hljs-regexp">//</span>-------<br><span class="hljs-regexp">//</span> [<span class="hljs-number">1</span>, <span class="hljs-string">&quot;xyp&quot;</span>]<br><span class="hljs-regexp">//</span>-------<br><span class="hljs-regexp">//</span> [<span class="hljs-number">2</span>, <span class="hljs-string">&quot;com&quot;</span>]<br><span class="hljs-regexp">//</span>--------<br></code></pre></td></tr></table></figure><h3 id="20、es6箭头函数"><a href="#20、es6箭头函数" class="headerlink" title="20、es6箭头函数"></a>20、es6箭头函数</h3><p>箭头函数的特性</p><ol><li>继承外部的作用域，即this的指向 &#x2F;&#x2F; 例如vue中的箭头函数this指向vue对象</li><li>不能用作构造函数</li><li>没有prototype属性</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//获取需要传递的参数数量</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(add.<span class="hljs-property">length</span>);<span class="hljs-comment">//2</span><br><br><span class="hljs-comment">//需要注意的是如果参数设置了默认值，则不会计入length</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b=<span class="hljs-number">1</span></span>)&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(add.<span class="hljs-property">length</span>); <span class="hljs-comment">//1</span><br><br><br><span class="hljs-comment">//箭头函数</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">add</span>=(<span class="hljs-params">a,b</span>)=&gt;a+b;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)); <span class="hljs-comment">//3</span><br><br><span class="hljs-comment">//上面的函数相当于es5的</span><br><span class="hljs-meta">&quot;use strict&quot;</span>;<br><br><span class="hljs-keyword">var</span> add = <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>));<br><br><br><span class="hljs-comment">//函数作用域问题</span><br><span class="hljs-keyword">let</span> a=<span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a,b=a</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b); <span class="hljs-comment">//world world</span><br>&#125;<br><span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;world&#x27;</span>);<br><br><br><span class="hljs-keyword">let</span> a=<span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">c,b=a</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c,b); <span class="hljs-comment">//world hello</span><br>&#125;<br><span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;world&#x27;</span>);<br><br><span class="hljs-comment">// this指向问题</span><br><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">commonFn</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;,<br><span class="hljs-attr">arrowFn</span>: <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br>&#125;<br>obj.<span class="hljs-title function_">commonFn</span>(); <span class="hljs-comment">// 指向obj对象</span><br>obj.<span class="hljs-title function_">arrowFn</span>(); <span class="hljs-comment">// 指向了obj所在的作用域,window</span><br><br><br><br><span class="hljs-comment">//没有参数的箭头函数写法</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">arrow</span>=(<span class="hljs-params"></span>)=&gt;<span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">arrow</span>());<span class="hljs-comment">//hello world</span><br></code></pre></td></tr></table></figure><h3 id="21、对象的函数解构"><a href="#21、对象的函数解构" class="headerlink" title="21、对象的函数解构"></a>21、对象的函数解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这个方法适应于操作后台返回的json数据时</span><br><span class="hljs-keyword">let</span> json=&#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<br><span class="hljs-attr">id</span>:<span class="hljs-number">666</span><br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">test</span>=(<span class="hljs-params">&#123;name,id&#125;</span>)=&gt;&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name,id); <span class="hljs-comment">//jack 666</span><br>&#125;<br><span class="hljs-title function_">test</span>(json);<br><br><br><span class="hljs-comment">//下面是数组的函数解构</span><br><span class="hljs-keyword">let</span> arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">foo</span>=(<span class="hljs-params">a,b,c</span>)=&gt;&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b,c);<span class="hljs-comment">//www xyp com</span><br>&#125;<br><span class="hljs-title function_">foo</span>(...arr);<br></code></pre></td></tr></table></figure><h3 id="22、查看对象里面是否有该键"><a href="#22、查看对象里面是否有该键" class="headerlink" title="22、查看对象里面是否有该键"></a>22、查看对象里面是否有该键</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let <span class="hljs-type">json</span>=&#123;<br><span class="hljs-type">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<br>id:<span class="hljs-number">666</span><br>&#125;;<br>console.log(<span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-type">json</span>);//<span class="hljs-keyword">true</span> 查看对象里面是否有该键<br></code></pre></td></tr></table></figure><h3 id="23、数组遍历的几种方式"><a href="#23、数组遍历的几种方式" class="headerlink" title="23、数组遍历的几种方式"></a>23、数组遍历的几种方式</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//1、forEach()循环遍历</span><br>let arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br>arr.forEach(<span class="hljs-function">(<span class="hljs-params">val,idx</span>)=&gt;</span><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(val,idx)); <span class="hljs-comment">//www 0   xyp 1  com 2</span><br><br><span class="hljs-comment">//2、filter循环</span><br>let arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br>arr.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x));<span class="hljs-comment">//www,xyp,com</span><br><br><span class="hljs-comment">//3、some循环</span><br>let arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br>arr.some(<span class="hljs-function"><span class="hljs-params">x</span>=&gt;</span><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(x));<span class="hljs-comment">//www,xyp,com</span><br></code></pre></td></tr></table></figure><h3 id="24、key值的构建-x2F-x2F-目前尚不知道实际使用场景"><a href="#24、key值的构建-x2F-x2F-目前尚不知道实际使用场景" class="headerlink" title="24、key值的构建&#x2F;&#x2F;目前尚不知道实际使用场景"></a>24、key值的构建&#x2F;&#x2F;目前尚不知道实际使用场景</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">let</span> <span class="hljs-built_in">kill</span>=<span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-built_in">let</span> obj=&#123;<br>[<span class="hljs-built_in">kill</span>]:<span class="hljs-string">&#x27;web&#x27;</span><br>&#125;;<br>console.log(obj); //&#123;<span class="hljs-built_in">test</span>: <span class="hljs-string">&quot;web&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="25、ES6判断的数值是否严格相等"><a href="#25、ES6判断的数值是否严格相等" class="headerlink" title="25、ES6判断的数值是否严格相等"></a>25、ES6判断的数值是否严格相等</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>);     <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(<span class="hljs-built_in">window</span>, <span class="hljs-built_in">window</span>);   <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>);     <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>([], []);           <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">var</span> test = &#123; a: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(test, test);       <span class="hljs-comment">// true</span><br><br><span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>);       <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 特例</span><br><span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(<span class="hljs-number">0</span>, <span class="hljs-number">-0</span>);            <span class="hljs-comment">// false</span><br><span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(<span class="hljs-number">-0</span>, <span class="hljs-number">-0</span>);           <span class="hljs-comment">// true</span><br><span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(NaN, <span class="hljs-number">0</span>/<span class="hljs-number">0</span>);         <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="26、es6合并对象的方法"><a href="#26、es6合并对象的方法" class="headerlink" title="26、es6合并对象的方法"></a>26、es6合并对象的方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Object.assign方法用于对象的合并，将源对象（ source ）的所有可枚举属性，复制到目标对象（ target ）。</span><br><span class="hljs-comment">//Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。</span><br><span class="hljs-keyword">let</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;  <br><span class="hljs-keyword">let</span> source1 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;  <br><span class="hljs-keyword">let</span> source2 = &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target,source1,source2));<span class="hljs-comment">//&#123;a: 1, b: 2, c: 3&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target,source2,source1));<span class="hljs-comment">//&#123;a: 1, b: 2, c: 3&#125;</span><br></code></pre></td></tr></table></figure><h3 id="27、新增的Set数据解构"><a href="#27、新增的Set数据解构" class="headerlink" title="27、新增的Set数据解构"></a>27、新增的Set数据解构</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs awk">let setArr=new Set();<br>let arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<span class="hljs-regexp">//</span>定义的时候重复的数据也不会被重复加进去，这个特性可以用来给数组去重<br>arr.forEach((val)=&gt;&#123;<br>setArr.add(val); <span class="hljs-regexp">//</span>set增加数据的方式为add(),ps重复的数据不会被加进去，<br>&#125;)<br>console.log(setArr);<span class="hljs-regexp">//</span>Set(<span class="hljs-number">3</span>) &#123;<span class="hljs-string">&quot;www&quot;</span>, <span class="hljs-string">&quot;xyp&quot;</span>, <span class="hljs-string">&quot;com&quot;</span>&#125;<br><br><span class="hljs-regexp">//</span>Array.from方法可以将 Set 结构转为数组。<br>Array.from(setArr);<br><br><span class="hljs-regexp">//</span>查找set里面是否有某个变量<br>console.log(setArr.has(<span class="hljs-string">&#x27;www&#x27;</span>)); <span class="hljs-regexp">//</span>has()方法返回true/false<br><br><span class="hljs-regexp">//</span>删除set里面所有数据<br>setArr.clear();<br>console.log(setArr); <span class="hljs-regexp">//</span>Set(<span class="hljs-number">0</span>) &#123;&#125; 输出空<br><br><span class="hljs-regexp">//</span>删除set里面指定的数据<br>setArr.<span class="hljs-keyword">delete</span>(<span class="hljs-string">&#x27;www&#x27;</span>);<span class="hljs-regexp">//</span><span class="hljs-keyword">delete</span>()里面放参数<br>console.log(setArr);<span class="hljs-regexp">//</span>输出Set(<span class="hljs-number">2</span>) &#123;<span class="hljs-string">&quot;xyp&quot;</span>, <span class="hljs-string">&quot;com&quot;</span>&#125;<br><br><span class="hljs-regexp">//</span>遍历set里面的元素之<span class="hljs-keyword">for</span>..of<br><span class="hljs-keyword">for</span>(let a of setArr)&#123;<br>console.log(a);<span class="hljs-regexp">//</span>www xyp com<br>&#125;<br><br><span class="hljs-regexp">//</span>遍历set里面的元素之forEach<br>setArr.forEach((val)=&gt;&#123;<br>console.log(val);<span class="hljs-regexp">//</span>www xyp com<br>&#125;)<br><br><span class="hljs-regexp">//</span>巧用扩展运算符进行遍历<br>let set1 = new Set([<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]);<br>let arr1 = [...set1];<br>console.log(arr1);<span class="hljs-regexp">//</span>[<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>]<br><br><span class="hljs-regexp">//</span>获取set里面元素的数量方法<br>console.log(setArr.size); <span class="hljs-regexp">//</span><span class="hljs-number">3</span>,size不会计入重复的数据的数量<br><br><span class="hljs-regexp">//</span>扩展运算符和 Set 结构相结合，就可以去除数组的重复成员。<br>let arr = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>];<br>let unique = [...new Set(arr)];<br>console.log(unique);<span class="hljs-regexp">//</span>[<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>]<br><br>更多demo看[阮一峰老师的教程](http:<span class="hljs-regexp">//</span>es6.ruanyifeng.com<span class="hljs-regexp">/#docs/</span>set-map)<br></code></pre></td></tr></table></figure><h3 id="28、WeakSet数据结构"><a href="#28、WeakSet数据结构" class="headerlink" title="28、WeakSet数据结构"></a>28、WeakSet数据结构</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xquery">//WeakSet与Set不同的地方在于，WeakSet可以放对象<br><span class="hljs-keyword">let</span> weakarr=new WeakSet();<br><span class="hljs-keyword">let</span> obj=<span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">&#x27;jack&#x27;</span><span class="hljs-built_in">,id</span>:<span class="hljs-string">&#x27;666&#x27;</span>&#125;;<br>weakarr.add(obj);<br>console.log(weakarr);//value: <span class="hljs-built_in">&#123;name</span>: <span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-string">&quot;666&quot;</span>&#125;<br><br>//如果两个不同的变量值相同，赋值给WeakSet，会输出两个相同的值，解决方法，把两个对象合为一个<br><span class="hljs-keyword">let</span> weakarr=new WeakSet();<br><span class="hljs-keyword">let</span> obj=<span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">&#x27;jack&#x27;</span><span class="hljs-built_in">,id</span>:<span class="hljs-string">&#x27;666&#x27;</span>&#125;;<br><span class="hljs-keyword">let</span> obj1=<span class="hljs-built_in">&#123;name</span>:<span class="hljs-string">&#x27;jack&#x27;</span><span class="hljs-built_in">,id</span>:<span class="hljs-string">&#x27;666&#x27;</span>&#125;;<br>weakarr.add(obj);<br>weakarr.add(obj1);<br>console.log(weakarr);//value1: <span class="hljs-built_in">&#123;name</span>: <span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-string">&quot;666&quot;</span>&#125;;value2: <span class="hljs-built_in">&#123;name</span>: <span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-built_in"> id</span>: <span class="hljs-string">&quot;666&quot;</span>&#125; //会把两个都输出<br></code></pre></td></tr></table></figure><h3 id="29、Map数据结构"><a href="#29、Map数据结构" class="headerlink" title="29、Map数据结构"></a>29、Map数据结构</h3><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">//往Map里面增加数据</span><br><span class="hljs-keyword">let</span> json=&#123;<br>name:<span class="hljs-string">&#x27;test&#x27;</span>,<br>user_id:<span class="hljs-string">&#x27;321&#x27;</span>,<br>password:<span class="hljs-string">&#x27;123456a&#x27;</span><br>&#125;;<br>console.<span class="hljs-keyword">log</span>(json);<br><span class="hljs-keyword">let</span> maparr=<span class="hljs-literal">new</span> <span class="hljs-built_in">Map</span>();<br>maparr.<span class="hljs-built_in">set</span>(json,<span class="hljs-string">&#x27;jspang&#x27;</span>,);<span class="hljs-comment">//set方法为往Map里面加数据；前面是key，后面是value</span><br>console.<span class="hljs-keyword">log</span>(maparr);<br><br><span class="hljs-comment">//查看增加的数据</span><br><span class="hljs-keyword">let</span> json=&#123;<br>name:<span class="hljs-string">&#x27;test&#x27;</span>,<br>user_id:<span class="hljs-string">&#x27;321&#x27;</span>,<br>password:<span class="hljs-string">&#x27;123456a&#x27;</span><br>&#125;;<br><span class="hljs-keyword">let</span> maparr=<span class="hljs-literal">new</span> <span class="hljs-built_in">Map</span>();<br>maparr.<span class="hljs-built_in">set</span>(json,<span class="hljs-string">&#x27;jspang&#x27;</span>,);<span class="hljs-comment">//set方法为往Map里面加数据；前面是key，后面是value</span><br>console.<span class="hljs-keyword">log</span>(maparr.get(json));<span class="hljs-comment">//jspang</span><br><br><span class="hljs-comment">//删除里面所有数据</span><br>maparr.clear();<br><br><span class="hljs-comment">//删除指定数据</span><br>maparr.delete(json);<br><br><span class="hljs-comment">//查找是否存在某个变量</span><br>maparr.has(<span class="hljs-string">&#x27;www&#x27;</span>);<span class="hljs-comment">//false</span><br><br><span class="hljs-comment">//Map的数量也用.size</span><br></code></pre></td></tr></table></figure><h3 id="30、用Proxy进行预处理"><a href="#30、用Proxy进行预处理" class="headerlink" title="30、用Proxy进行预处理"></a>30、用Proxy进行预处理</h3><blockquote><p>Proxy用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//get方法，读取pro里面属性时会执行</span><br><span class="hljs-keyword">let</span> obj=&#123;<br><span class="hljs-attr">add</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-keyword">return</span> val++;<br>&#125;,<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;this is test&#x27;</span><br>&#125;;<br><span class="hljs-keyword">let</span> pro=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;<br><span class="hljs-attr">add</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-keyword">return</span> val++;<br>&#125;,<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;this is test&#x27;</span><br>&#125;,&#123;<br><span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">target,key,property</span>)&#123;<span class="hljs-comment">//target：得到的目标值  key：目标的key值，相当于对象的属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我先执行了&#x27;</span>);<br>&#125;<br>&#125;);<span class="hljs-comment">//声明变量,前面的花括号里面是对象主体，后面的花括号是需要预处理的函数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pro.<span class="hljs-property">name</span>);<span class="hljs-comment">//我先执行了;打印pro.name是因为pro读取属性时才会执行预处理函数执行</span><br><br><br><span class="hljs-comment">//set方法，改变Proxy属性值时，执行的函数</span><br><span class="hljs-keyword">let</span> obj=&#123;<br><span class="hljs-attr">add</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-keyword">return</span> val++;<br>&#125;,<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;this is test&#x27;</span><br>&#125;;<br><span class="hljs-keyword">let</span> pro=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;<br><span class="hljs-attr">add</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-keyword">return</span> val++;<br>&#125;,<br><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;this is test&#x27;</span><br>&#125;,&#123;<br><span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">target,key,property</span>)&#123;<span class="hljs-comment">//target：得到的目标值  key：目标的key值，相当于对象的属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我先执行了&#x27;</span>);<br>&#125;,<br><span class="hljs-attr">set</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">target,key,value,receiver</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;<br>&#125;);<br>pro.<span class="hljs-property">name</span>=<span class="hljs-string">&#x27;ppp&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pro.<span class="hljs-property">name</span>);<br><br><br><span class="hljs-comment">//apply的用户，先mark，以后再看</span><br><span class="hljs-keyword">let</span> target=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is target&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">let</span> handler=&#123;<br><span class="hljs-title function_">apply</span>(<span class="hljs-params">target,ctx,args</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is apply&#x27;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">apply</span>(...args);<br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> pro=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target,handler);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">pro</span>());<br></code></pre></td></tr></table></figure><h3 id="31、promise的语法"><a href="#31、promise的语法" class="headerlink" title="31、promise的语法"></a>31、promise的语法</h3><blockquote><p>ES6中的promise的出现给我们很好的解决了回调地狱的问题，在使用ES5的时候，在多层嵌套回调时，写完的代码层次过多，很难进行维护和二次开发，ES6认识到了这点问题，现在promise的使用，完美解决了这个问题。那我们如何理解promise这个单词在ES5中的作用那，你可以想象他是一种承诺，当它成功时执行一些代码，当它失败时执行一些代码。它更符合人类的行为思考习惯，而不在是晦涩难懂的冰冷语言。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// promise的结构，可以在http://happymmall.com下的控制台执行看看</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>$.<span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://happymmall.com/user/get_user_info.do&#x27;</span>,<br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br><span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br><span class="hljs-title function_">resolve</span>(res)<br>&#125;,<br><span class="hljs-title function_">error</span>(<span class="hljs-params">err</span>) &#123;<br><span class="hljs-title function_">reject</span>(err)<br>&#125;<br>&#125;)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success&#x27;</span>, res)<br>&#125;, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>, err)<br>&#125;)<br><br><br><span class="hljs-comment">// promise的链式操作</span><br>如果是以前，我们都是在一个ajax的success方法里面写另外一个异步函数。现在我们可以用链式promise来解决回调地狱<br><br><span class="hljs-keyword">const</span> promise1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>$.<span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://happymmall.com/user/get_user_info.do&#x27;</span>,<br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br><span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br><span class="hljs-title function_">resolve</span>(res)<br>&#125;,<br><span class="hljs-title function_">error</span>(<span class="hljs-params">err</span>) &#123;<br><span class="hljs-title function_">reject</span>(err)<br>&#125;<br>&#125;)<br>&#125;);<br><span class="hljs-keyword">const</span> promise2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>$.<span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://happymmall.com/cart/get_cart_product_count.do&#x27;</span>,<br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br><span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br><span class="hljs-title function_">resolve</span>(res)<br>&#125;,<br><span class="hljs-title function_">error</span>(<span class="hljs-params">err</span>) &#123;<br><span class="hljs-title function_">reject</span>(err)<br>&#125;<br>&#125;)<br>&#125;);<br>promise1.<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise1 success&#x27;</span>);<br><span class="hljs-keyword">return</span> promise2;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;promise2 success&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="32、es6中的class"><a href="#32、es6中的class" class="headerlink" title="32、es6中的class"></a>32、es6中的class</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coder</span>&#123; <span class="hljs-comment">//定义一个程序员类</span><br><span class="hljs-title function_">name</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-comment">//console.log(`my name is $&#123;val&#125;`);</span><br><span class="hljs-keyword">return</span> val;<br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> forg=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Coder</span>;<span class="hljs-comment">//实例化类</span><br>forg.<span class="hljs-title function_">name</span>(<span class="hljs-string">&#x27;daidai&#x27;</span>);<span class="hljs-comment">//my name is daidai</span><br><br><br><span class="hljs-comment">//里面写多个函数时</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coder</span>&#123; <span class="hljs-comment">//定义一个程序员类</span><br><span class="hljs-title function_">name</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;val&#125;</span>`</span>);<br><span class="hljs-keyword">return</span> val;<br>&#125;<br><span class="hljs-title function_">skill</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;:skills&#x27;</span>+val);<br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> forg=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Coder</span>;<span class="hljs-comment">//实例化类</span><br>forg.<span class="hljs-title function_">name</span>(<span class="hljs-string">&#x27;daidai&#x27;</span>);<span class="hljs-comment">//my name is daidai</span><br>forg.<span class="hljs-title function_">skill</span>(<span class="hljs-string">&#x27;coding&#x27;</span>);<br><br><br><span class="hljs-comment">//类的传参</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coder</span>&#123; <span class="hljs-comment">//定义一个程序员类</span><br><span class="hljs-title function_">name</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;val&#125;</span>`</span>);<br><span class="hljs-keyword">return</span> val;<br>&#125;<br><span class="hljs-title function_">skill</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&#x27;:skills&#x27;</span>+val);<br>&#125;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>=a;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>=b;<br>&#125;<br><span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> forg=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Coder</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<span class="hljs-comment">//a.b在实例化的时候传进去</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(forg.<span class="hljs-title function_">add</span>());<span class="hljs-comment">//5</span><br><br><br><span class="hljs-comment">//类的继承</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Coder</span>&#123; <span class="hljs-comment">//定义一个程序员类</span><br><span class="hljs-title function_">name</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`my name is <span class="hljs-subst">$&#123;val&#125;</span>`</span>);<br><span class="hljs-keyword">return</span> val;<br>&#125;<br><span class="hljs-title function_">skill</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&#x27;:skills&#x27;</span>+val);<br>&#125;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>=a;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>=b;<br>&#125;<br><span class="hljs-title function_">add</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span>;<br>&#125;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">htmler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Coder</span>&#123;<br><span class="hljs-comment">//htmler类里面继承了coder里面所有的属性和方法</span><br>&#125;<br><span class="hljs-keyword">let</span> daidai=<span class="hljs-keyword">new</span> htmler;<br>daidai.<span class="hljs-title function_">name</span>(<span class="hljs-string">&#x27;test&#x27;</span>);<span class="hljs-comment">//my name is test</span><br></code></pre></td></tr></table></figure><h3 id="33、模块化编程"><a href="#33、模块化编程" class="headerlink" title="33、模块化编程"></a>33、模块化编程</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//export负责进行模块化，也是模块的输出。</span><br><span class="hljs-comment">//import引入模块</span><br><br><span class="hljs-comment">//test.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;jspang&#x27;</span>;<br><span class="hljs-comment">//index.js</span><br><span class="hljs-keyword">import</span> &#123;a&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.js&#x27;</span>; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><br>执行<br>babel-node index.<span class="hljs-property">js</span><br><span class="hljs-comment">//输出jspang</span><br><br><br><span class="hljs-comment">//输出多变量的话可以这样</span><br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">var</span> b=<span class="hljs-string">&#x27;world&#x27;</span>;<br><span class="hljs-keyword">export</span> &#123;a,b&#125;;<br><br><br><span class="hljs-comment">//函数的输出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><br><br><span class="hljs-comment">//将变量语义化输出</span><br><span class="hljs-keyword">var</span> a=<span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">var</span> b=<span class="hljs-string">&#x27;world&#x27;</span>;<br><span class="hljs-keyword">export</span>&#123;<br>name <span class="hljs-keyword">as</span> a,<br>skill <span class="hljs-keyword">as</span> b<br>&#125;<br><span class="hljs-comment">//引用可以这样</span><br><span class="hljs-keyword">import</span> &#123;name,skill&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./test.js&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="34、正则新特性"><a href="#34、正则新特性" class="headerlink" title="34、正则新特性"></a>34、正则新特性</h3><p>es5中正则的写法为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> regex=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;xyz&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>);<br><span class="hljs-keyword">let</span> regex2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-regexp">/xyz/i</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regex.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;xyz123&#x27;</span>),regex2.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;xyz12345&#x27;</span>)); <span class="hljs-comment">//true,true</span><br></code></pre></td></tr></table></figure><p>es6新特性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> regex3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-regexp">/xyz/ig</span>,<span class="hljs-string">&#x27;i&#x27;</span>);<span class="hljs-comment">//这段的意思是后面的修饰符来替代前面的修饰符</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(regex3.<span class="hljs-property">flags</span>); <span class="hljs-comment">//输出i，flags是获取正则表达式修饰符的属性</span><br></code></pre></td></tr></table></figure><h3 id="35、字符串新特性"><a href="#35、字符串新特性" class="headerlink" title="35、字符串新特性"></a>35、字符串新特性</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>.padStart(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>));  <span class="hljs-comment">//输出01，padStart的意思为向前面补白，2代表长度，0代表用0来补</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;1&#x27;</span>.padEnd(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;0&#x27;</span>)); <span class="hljs-comment">//输出10，向后面补白</span><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(String.raw<span class="hljs-string">`hi/naaa`</span>); <span class="hljs-comment">//输出hi\naaa，这个api的作用是在反斜杠前面再加个反斜杠来转义</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">`hi/naaa`</span>);<span class="hljs-comment">//输出hi</span><br>aaa<br></code></pre></td></tr></table></figure><h3 id="36、数组新特性"><a href="#36、数组新特性" class="headerlink" title="36、数组新特性"></a>36、数组新特性</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr =<span class="hljs-built_in">Array</span>.of(<span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;am&#x27;</span>,<span class="hljs-string">&#x27;mi&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);  <span class="hljs-comment">//[&quot;test&quot;, &quot;i&quot;, &quot;am&quot;, &quot;mi&quot;, 1, 2, 3]，把任意字符转成数组类型</span><br><br><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">Array</span>.from([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],(item) =&gt;&#123;<span class="hljs-keyword">return</span> item *<span class="hljs-number">2</span>;&#125;));<span class="hljs-comment">//可以转化为数组的同时遍历里面数据并修改数据</span><br><br><br><br>let arr=[<span class="hljs-string">&#x27;www&#x27;</span>,<span class="hljs-string">&#x27;xyp&#x27;</span>,<span class="hljs-string">&#x27;com&#x27;</span>];<br>arr.fill(<span class="hljs-string">&#x27;text&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">//第一个参数是用来替换的变量，第二个是开始位置，第三个是结束位置</span><br>arr.fill(<span class="hljs-string">&#x27;text&#x27;</span>); <span class="hljs-comment">//不加起始位置则全部替换,输出为[&#x27;text&#x27;,&#x27;text&#x27;,&#x27;text&#x27;]</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><br><br><br>let arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>];<br><span class="hljs-keyword">for</span>(let [key,val] of arr.entries())&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(key,val);<br>&#125;<span class="hljs-comment">//遍历输出数组里面的键值</span><br><br><br>const arr1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-literal">NaN</span>];<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr1.<span class="hljs-built_in">includes</span>(<span class="hljs-literal">NaN</span>));<span class="hljs-comment">//查看数组里面是否包含某个值，有返回true，没有则返回false</span><br></code></pre></td></tr></table></figure><h3 id="37、函数新特性"><a href="#37、函数新特性" class="headerlink" title="37、函数新特性"></a>37、函数新特性</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//函数作用域问题</span><br>let a=<span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a,b=a</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a,b);<br>&#125;<br>test(<span class="hljs-string">&#x27;world&#x27;</span>); <span class="hljs-comment">//输出为world world</span><br><br><br>let a=<span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a,b=a</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a,b);<br>&#125;<br>test();<span class="hljs-comment">//输出为undefined undefined</span><br><br><br>let a=<span class="hljs-string">&#x27;hello&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">c,b=a</span>)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(c,b);<br>&#125;<br>test(<span class="hljs-string">&#x27;world&#x27;</span>);<span class="hljs-comment">//输出为world hello</span><br><br><br><span class="hljs-comment">//箭头函数</span><br>let fun = <span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span>  a*a;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(fun(<span class="hljs-number">2</span>)); <span class="hljs-comment">//输出4</span><br><br><span class="hljs-comment">//如果函数没有参数可以这么写</span><br>let test =<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span><span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(test()); <span class="hljs-comment">//hello world</span><br></code></pre></td></tr></table></figure><h3 id="38、Object新增方法"><a href="#38、Object新增方法" class="headerlink" title="38、Object新增方法"></a>38、Object新增方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//对象中有方法</span><br><span class="hljs-keyword">let</span> es5_methods=&#123;<br><span class="hljs-attr">hello</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br>&#125;<br>&#125;<span class="hljs-comment">//es5的写法</span><br><span class="hljs-keyword">let</span> es6_methods=&#123;<br><span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>);<br>&#125;<br>&#125;<span class="hljs-comment">//es6里面的写法</span><br><br><br><span class="hljs-comment">//判断两个值是否相同</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>));  <span class="hljs-comment">//Object.is和 === 相同</span><br><br><br><span class="hljs-comment">//对象合并</span><br><span class="hljs-keyword">let</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> brr=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>];<br><br><span class="hljs-keyword">let</span> crr=<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;,arr,brr);<span class="hljs-comment">//花括号叫目标对象，后面的arr、brr是源对象。对象合并是指：将源对象里面的属性添加到目标对象中去，若两者的属性名有冲突，后面的将会覆盖前面的</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(crr);<br><br><br><span class="hljs-comment">//将对象分成数组</span><br><span class="hljs-keyword">let</span> test =&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;18&#x27;</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> [key,val] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(test))&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([key,val]);<span class="hljs-comment">// [&quot;name&quot;, &quot;jack&quot;],[&quot;age&quot;, &quot;18&quot;]</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="39、symbol数据类型"><a href="#39、symbol数据类型" class="headerlink" title="39、symbol数据类型"></a>39、symbol数据类型</h3><blockquote><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。它是 JavaScript 语言的第七种数据类型，前六种是：undefined、null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。</p></blockquote><h3 id="40、set-map数据结构"><a href="#40、set-map数据结构" class="headerlink" title="40、set-map数据结构"></a>40、set-map数据结构</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">let setArr=<span class="hljs-built_in">new</span> <span class="hljs-keyword">Set</span>();<br>setArr.<span class="hljs-keyword">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>); //<span class="hljs-keyword">set</span>解构往里面新增值用<span class="hljs-keyword">add</span>方法<br>console.log(setArr.size);//获取<span class="hljs-keyword">set</span>里面的长度用size<br><br>//<span class="hljs-keyword">Array</span>.<span class="hljs-keyword">from</span>方法可以将 <span class="hljs-keyword">Set</span> 结构转为数组。<br><span class="hljs-keyword">Array</span>.<span class="hljs-keyword">from</span>(setArr);<br><br>//<span class="hljs-keyword">set</span>的遍历<br>let arr=[<span class="hljs-string">&#x27;add&#x27;</span>,<span class="hljs-string">&#x27;delete&#x27;</span>,<span class="hljs-string">&#x27;has&#x27;</span>,<span class="hljs-string">&#x27;clear&#x27;</span>];<br>let setArr=<span class="hljs-built_in">new</span> <span class="hljs-keyword">Set</span>(arr);<br><span class="hljs-keyword">for</span>(let key <span class="hljs-keyword">of</span> setArr)&#123;<br>console.log(key); //输出为<span class="hljs-string">&#x27;add&#x27;</span>,<span class="hljs-string">&#x27;delete&#x27;</span>,<span class="hljs-string">&#x27;has&#x27;</span>,<span class="hljs-string">&#x27;clear&#x27;</span><br>&#125;<br><br>setArr.<span class="hljs-keyword">forEach</span>((val)=&gt;&#123;<br>console.log(val);//输出为<span class="hljs-string">&#x27;add&#x27;</span>,<span class="hljs-string">&#x27;delete&#x27;</span>,<span class="hljs-string">&#x27;has&#x27;</span>,<span class="hljs-string">&#x27;clear&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="41、set和array对比"><a href="#41、set和array对比" class="headerlink" title="41、set和array对比"></a>41、set和array对比</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let arr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>;<br>let <span class="hljs-built_in">map</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();<br><span class="hljs-comment">//增</span><br>arr.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-string">&#x27;t&#x27;</span>:<span class="hljs-number">1</span>&#125;);<br><span class="hljs-built_in">map</span>.set(<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">map</span>);<br><span class="hljs-comment">//删</span><br>let idx=arr.findIndex(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item.t);<br>arr.<span class="hljs-built_in">splice</span>(idx,<span class="hljs-number">1</span>);<br><span class="hljs-built_in">map</span>.delete(<span class="hljs-string">&#x27;t&#x27;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">map</span>);<br><span class="hljs-comment">//改</span><br>arr.forEach(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item.t?item.t=<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-built_in">map</span>.set(<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(arr);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">map</span>);<br><span class="hljs-comment">//查</span><br>let m=<span class="hljs-built_in">map</span>.has(<span class="hljs-string">&#x27;t&#x27;</span>);<br>let a=arr.<span class="hljs-built_in">find</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>item.t);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(m);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br></code></pre></td></tr></table></figure><h3 id="42、类和对象"><a href="#42、类和对象" class="headerlink" title="42、类和对象"></a>42、类和对象</h3><p>基本定义和生成实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>&#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">name=<span class="hljs-string">&#x27;hello world&#x27;</span></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> child =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(child.<span class="hljs-property">name</span>);<span class="hljs-comment">//hello world</span><br><br><span class="hljs-keyword">let</span> obj=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>(<span class="hljs-string">&#x27;ppp&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>);<span class="hljs-comment">//ppp</span><br></code></pre></td></tr></table></figure><p>继承</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Parent</span></span>&#123;<br>constructor(name=&#x27;hello world&#x27;)&#123;<br><span class="hljs-keyword">this</span>.name=name;<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">child</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Parent</span></span>&#123;<br>constructor(name=&#x27;child_name&#x27;)&#123;<br><span class="hljs-keyword">super</span>(name);<span class="hljs-comment">//子类要想修改父类值需要调用super方法，方面里面写修改的属性</span><br><span class="hljs-keyword">this</span>.<span class="hljs-keyword">type</span>=&#x27;child_type&#x27;;<span class="hljs-comment">//子类新增属性</span><br>&#125;<br>&#125;<br>console.log(<span class="hljs-keyword">new</span> child());<span class="hljs-comment">//child &#123;name: &quot;child_name&quot;, type: &quot;child_type&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>get和set操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>&#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">name=<span class="hljs-string">&#x27;hello world&#x27;</span></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>&#125;<br><span class="hljs-keyword">get</span> <span class="hljs-title function_">longName</span>()&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">`这是get操作<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>`</span>;<br>&#125;<br><span class="hljs-keyword">set</span> <span class="hljs-title function_">longName</span>(<span class="hljs-params">val</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=val;<br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>();<br><span class="hljs-comment">//console.log(test.longName);//这是get操作hello world</span><br>test.<span class="hljs-property">longName</span>=<span class="hljs-string">&#x27;呆呆&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test.<span class="hljs-property">longName</span>);<span class="hljs-comment">//这是get操作&#x27;呆呆&#x27;</span><br><br></code></pre></td></tr></table></figure><p>静态方法(只能通过类来调用而不是通过类的实例来调用)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//错误示范</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>&#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">name=<span class="hljs-string">&#x27;hello world&#x27;</span></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">let</span> test = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parent</span>();<br>test.<span class="hljs-title function_">say</span>(); <span class="hljs-comment">//报错，test.say is not a function</span><br><br><br><span class="hljs-comment">//正确写法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>&#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">name=<span class="hljs-string">&#x27;hello world&#x27;</span></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-title function_">say</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">say</span>();<span class="hljs-comment">//输出Parent</span><br></code></pre></td></tr></table></figure><p>静态方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Parent</span>&#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">name=<span class="hljs-string">&#x27;hello world&#x27;</span></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>=name;<br>&#125;<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property">sex</span>=<span class="hljs-string">&#x27;boy&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Parent</span>.<span class="hljs-property">sex</span>);<span class="hljs-comment">//boy</span><br><br></code></pre></td></tr></table></figure><h3 id="43、模块化编程"><a href="#43、模块化编程" class="headerlink" title="43、模块化编程"></a>43、模块化编程</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这是a.js里面</span><br><span class="hljs-keyword">let</span> a=<span class="hljs-number">123</span>;<br><span class="hljs-keyword">let</span> foo =<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">hello</span>&#123;<br><span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-number">123</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>a,<br>foo,<br>hello<br>&#125;<br><br><span class="hljs-comment">//这是b.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-title function_">xxx</span>(此处可以随便起名字) <span class="hljs-keyword">from</span> a.<span class="hljs-property">js</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xxx.<span class="hljs-property">a</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xxx.<span class="hljs-title function_">hello</span>());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>ES6</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>ES6</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记第一次处理移动端滑动事件</title>
    <link href="/2018/01/11/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%A4%84%E7%90%86%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%BB%91%E5%8A%A8%E4%BA%8B%E4%BB%B6/"/>
    <url>/2018/01/11/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%A4%84%E7%90%86%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%BB%91%E5%8A%A8%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>&amp;#8194;&amp;#8194;公司的物业项目里面有个轮播图模块，不同于PC端的轮播图，移动端的轮播图没有左右箭头只能左右滑动来实现上一张下一张。</p><img src="/2018/01/11/%E8%AE%B0%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%A4%84%E7%90%86%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%BB%91%E5%8A%A8%E4%BA%8B%E4%BB%B6/1865037572-56319b425dc69_articlex.gif" class=""><span id="more"></span><p>&amp;#8194;&amp;#8194;当然大名鼎鼎的swiper.js完全可以轻轻松松的实现这样的需求，可是对于一个从没写过相关功能的前端萌新来说，这是一个绝好的练手机会。<br>于是，我先百度了一下移动端的滑动事件，发现jquery mobile里面的“swipeleft”和“swiperight”可以实现相关功能，下载下来试验了一下，发现在部分安卓机上<br>比较卡顿，可能是由于dom操作太多？然后我就重新搜索了一下，发现了js的原生滑动事件touchstart，touchmove，touchend完整的滑动事件。下面上代码</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs arcade">  <span class="hljs-comment">//touchstart事件</span><br>  <span class="hljs-keyword">var</span> startX = <span class="hljs-number">0</span>, startY = <span class="hljs-number">0</span>;  <span class="hljs-comment">//触摸起始位置</span><br>  <span class="hljs-keyword">var</span> num =<span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">touchStartFun</span>(<span class="hljs-params">event</span>)&#123;<br>    <span class="hljs-keyword">var</span> touch=event.<span class="hljs-built_in">touches</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">var</span> x=touch.pageX;<br>    <span class="hljs-keyword">var</span> y=touch.pageY;<br>    startX=x;<br>    startY=y;<span class="hljs-comment">//记录初始坐标</span><br>  &#125;<br>  <span class="hljs-comment">//touchmove事件</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">touchMoveFun</span>(<span class="hljs-params">event</span>)&#123;<br>    <span class="hljs-keyword">var</span> touch=event.<span class="hljs-built_in">touches</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">var</span> x=touch.pageX;<br>    <span class="hljs-keyword">var</span> y=touch.pageY;<br>  &#125;<br>  <span class="hljs-comment">//touchend事件</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">touchEndFun</span>(<span class="hljs-params">event</span>)&#123;<br>    <span class="hljs-keyword">var</span> imgs=<span class="hljs-string">&#x27;&#123;$getHouseInfo[&quot;publish_imgpath&quot;]&#125;&#x27;</span>;<br>    <span class="hljs-keyword">var</span> imgarr=imgs.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>    <span class="hljs-keyword">var</span> <span class="hljs-built_in">left</span>=$(<span class="hljs-string">&#x27;#swiper&#x27;</span>).css(<span class="hljs-string">&#x27;left&#x27;</span>).<span class="hljs-built_in">split</span>(<span class="hljs-string">&#x27;px&#x27;</span>)[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">var</span> touch=event.changedTouches[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">var</span> x=touch.pageX;<br>    <span class="hljs-keyword">var</span> y=touch.pageY;<br>    <span class="hljs-keyword">if</span> (x-startX&gt;<span class="hljs-number">0</span>) &#123;   <span class="hljs-comment">//判断是左滑还是右滑</span><br>        num++;<br>        <span class="hljs-keyword">if</span> (num&gt;=<span class="hljs-number">0</span>) &#123;<br>          num=<span class="hljs-number">0</span>;<br>        &#125;<br>      $(<span class="hljs-string">&quot;#swiper&quot;</span>).css(&#123;<span class="hljs-string">&quot;transition-duration&quot;</span>:<span class="hljs-string">&quot;0.6s&quot;</span>,<span class="hljs-string">&quot;left&quot;</span>:img_contentwidth*num+<span class="hljs-string">&quot;px&quot;</span>&#125;);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">left</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      num--;<br>      <span class="hljs-keyword">if</span> (-num&gt;=imgarr.<span class="hljs-built_in">length</span>) &#123;<br>        num=<span class="hljs-number">0</span>;<br>      &#125;<br>      $(<span class="hljs-string">&quot;#swiper&quot;</span>).css(&#123;<span class="hljs-string">&quot;transition-duration&quot;</span>:<span class="hljs-string">&quot;0.6s&quot;</span>,<span class="hljs-string">&quot;left&quot;</span>:img_contentwidth*num+<span class="hljs-string">&quot;px&quot;</span>&#125;);<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">left</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//给幻灯片里面的li绑定事件</span><br>  <span class="hljs-keyword">var</span> swiperPics = document.getElementById(<span class="hljs-string">&quot;swiper&quot;</span>).getElementsByTagName(<span class="hljs-string">&quot;li&quot;</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; swiperPics.<span class="hljs-built_in">length</span>; i++) &#123;<br>    swiperPics[i].addEventListener(<span class="hljs-string">&quot;touchstart&quot;</span>,touchStartFun,<span class="hljs-literal">true</span>);<br>    swiperPics[i].addEventListener(<span class="hljs-string">&quot;touchmove&quot;</span>,touchMoveFun,<span class="hljs-literal">true</span>);<br>    swiperPics[i].addEventListener(<span class="hljs-string">&quot;touchend&quot;</span>,touchEndFun,<span class="hljs-literal">true</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>移动端</category>
      
      <category>左右滑动事件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>移动端</tag>
      
      <tag>左右滑动事件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下拉加载更多数据重复问题</title>
    <link href="/2018/01/11/%E4%B8%8B%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E9%97%AE%E9%A2%98/"/>
    <url>/2018/01/11/%E4%B8%8B%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A%E6%95%B0%E6%8D%AE%E9%87%8D%E5%A4%8D%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>&amp;#8194;&amp;#8194;最近公司的微信端项目有个下拉加载更多的功能，以前也做过一个类似的，传当前页面给后台然后后台返回给对应的数据。这次项目做完后，测试的时候发现一个bug就是部分数据会重复加载，当时还以为是下拉过快引起的&#x3D; &#x3D;<br>&amp;#8194;&amp;#8194;先上代码<span id="more"></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//下拉加载更多</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;scroll&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> scrollheight=$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scrollTop</span>();<span class="hljs-comment">//滚动的高度</span><br>  <span class="hljs-keyword">var</span> screenheight=<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>;<span class="hljs-comment">//网页可视区域高度</span><br>  <span class="hljs-keyword">var</span> domheight=$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">height</span>();<span class="hljs-comment">//整个文档高度</span><br>  act_id=$(<span class="hljs-string">&quot;.box&quot;</span>).<span class="hljs-title function_">last</span>().<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;id&quot;</span>);<span class="hljs-comment">//最后一个box的id</span><br>  supply_id=$(<span class="hljs-string">&quot;.title .active&quot;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;id&quot;</span>);<br>  <span class="hljs-keyword">var</span> imgs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;lazyimg&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (scrollheight+screenheight&gt;=domheight) &#123;<br>    <span class="hljs-title function_">getcontent</span>(act_id,supply_id,stree_id,price_level,price_level_type,room,half,toilet,build_area,house_age,floor_min,housetype_id);<br>  &#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; imgs.<span class="hljs-property">length</span>; j++) &#123;<br>    <span class="hljs-keyword">var</span> imgheight=imgs[j].<span class="hljs-property">offsetTop</span>;<span class="hljs-comment">//图片的div盒子距离顶部的高</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(imgheight+<span class="hljs-string">&quot;======&quot;</span>+(scrollheight+screenheight));<br>    <span class="hljs-keyword">if</span> (imgheight&lt; scrollheight+screenheight) &#123;<br>      imgs[j].<span class="hljs-property">src</span>=imgs[j].<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;data-src&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当时的代码只判断了下拉滚动的距离是否大于等于该图片到顶部的距离，但是打开谷歌浏览器就看请求的时候，发现请求了两次;然后百度了一翻，搜到一个答案：<a href="https://segmentfault.com/q/1010000000668595">https://segmentfault.com/q/1010000000668595</a> ;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> loading = <span class="hljs-literal">false</span>;<br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">if</span>($(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scrollTop</span>() + $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>() &gt; $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">height</span>() - <span class="hljs-number">100</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!loading)&#123;<br>      <span class="hljs-title function_">push</span>();<br>    &#125;<br>  &#125;;<br>&#125;)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//ajax添加数据相关</span><br>  loading = <span class="hljs-literal">true</span>;<br>  $.<span class="hljs-title function_">ajax</span>(...)<br>   <span class="hljs-attr">complete</span>:(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>     loading = <span class="hljs-literal">false</span>;<br>   &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>用了这个标志变量后，就可以在下拉滚动的距离是否大于等于该图片到顶部的距离的判断if语句中再加道安全锁 &amp;&amp; !loading,来防止ajax多次请求。</p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>BUG集锦</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>BUG集锦</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现图片懒加载</title>
    <link href="/2018/01/06/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <url>/2018/01/06/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<p>&amp;#8194;&amp;#8194;在电商网站中，首页经常需要一次性加载很多图片，但有些不在可视区域内的图片也在刚进来就加载未免太浪费资源。于是在前几天的公司项目中我就实验性的试了下懒加载。</p><blockquote><p>懒加载核心思路：将页面里所有img属性src属性用data-xx代替，当页面滚动直至此图片出现在可视区域时，用js取到该图片的data-xx的值赋给src。</p></blockquote><span id="more"></span><p>&amp;#8194;&amp;#8194;上项目代码</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;div class<span class="hljs-operator">=</span><span class="hljs-string">&quot;box_left&quot;</span>&gt;<br>  &lt;img src<span class="hljs-operator">=</span><span class="hljs-string">&quot;/public/static/img/default.jpg&quot;</span> data-src<span class="hljs-operator">=</span><span class="hljs-string">&quot;$&#123;imgpath[0]&#125;&quot;</span> alt<span class="hljs-operator">=</span><span class="hljs-string">&quot;&quot;</span> class<span class="hljs-operator">=</span><span class="hljs-string">&quot;lazyimg&quot;</span>&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>default.jpg是一张灰色背景的公司logo，ajax加载时先把真实路径放到“data-url”里面，然后滚动的高度加上网页可视区域的高度有没有大于该图片距离网页顶部的高度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> imgs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;lazyimg&#x27;</span>);<br><span class="hljs-keyword">var</span> scrollheight=$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scrollTop</span>();<span class="hljs-comment">//滚动的高度</span><br><span class="hljs-keyword">var</span> screenheight=<span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">clientHeight</span>;<span class="hljs-comment">//网页可视区域高度</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; imgs.<span class="hljs-property">length</span>; j++) &#123;<br>  <span class="hljs-keyword">var</span> imgheight=imgs[j].<span class="hljs-property">offsetTop</span>;<span class="hljs-comment">//图片的div盒子距离顶部的高</span><br>  <span class="hljs-keyword">if</span> (imgheight&lt; scrollheight+screenheight) &#123;<br>    imgs[j].<span class="hljs-property">src</span>=imgs[j].<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&quot;data-src&quot;</span>);<span class="hljs-comment">//把真实路径赋值给src</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上，就是一个简易版本的JS懒加载了。</p><hr><p>上面是<em>2018-01-06</em>时我写的实现图片懒加载的方法，时至今日新出的一些api可以简单方便的实现我们的需求了。</p><h3 id="IntersectionObserver"><a href="#IntersectionObserver" class="headerlink" title="IntersectionObserver"></a>IntersectionObserver</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Intersection_Observer_API">MDN上关于IntersectionObserver的一些介绍</a></p><p>先上一个简单的<a href="https://xypecho.github.io/test/lazyLoad/index1.html">demo</a></p>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>图片懒加载</category>
      
      <category>jquery图片懒加载</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>图片懒加载</tag>
      
      <tag>jquery图片懒加载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多个for循环时如何跳出到最外面</title>
    <link href="/2018/01/05/%E5%A4%9A%E4%B8%AAfor%E5%BE%AA%E7%8E%AF%E6%97%B6%E5%A6%82%E4%BD%95%E8%B7%B3%E5%87%BA%E5%88%B0%E6%9C%80%E5%A4%96%E9%9D%A2/"/>
    <url>/2018/01/05/%E5%A4%9A%E4%B8%AAfor%E5%BE%AA%E7%8E%AF%E6%97%B6%E5%A6%82%E4%BD%95%E8%B7%B3%E5%87%BA%E5%88%B0%E6%9C%80%E5%A4%96%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<p>&amp;#8194;&amp;#8194;看到的一个小测验，输出一个数组里面两两相加等于9的元素，遍历相加等于9很简单，如何只输出第一个就稍微有点难度了，当时想的是抛出异常强行结束循环或者直接截取第一个输出等等。今天看JS权威指南时偶然看到这个<span id="more"></span><img src="/2018/01/05/%E5%A4%9A%E4%B8%AAfor%E5%BE%AA%E7%8E%AF%E6%97%B6%E5%A6%82%E4%BD%95%E8%B7%B3%E5%87%BA%E5%88%B0%E6%9C%80%E5%A4%96%E9%9D%A2/test.png" class="" title="This is an example image"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>];<br><span class="hljs-keyword">var</span> b=<span class="hljs-number">9</span>;<br><span class="hljs-keyword">var</span> num_a;<br><span class="hljs-keyword">var</span> num_b;<br>test123:<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; a.length; j++) &#123;<br><span class="hljs-keyword">if</span> (a[i]+a[j]==b) &#123;<br>num_a=i;<br>num_b=j;<br><span class="hljs-built_in">document</span>.writeln(num_a+<span class="hljs-string">&quot;:&quot;</span>+a[num_a]+<span class="hljs-string">&quot;===========&quot;</span>+num_b+<span class="hljs-string">&quot;:&quot;</span>+a[num_b]);<br><span class="hljs-keyword">break</span> test123;<br>&#125;<br>&#125;<br><span class="hljs-built_in">document</span>.writeln(num_a+<span class="hljs-string">&quot;:&quot;</span>+a[num_a]+<span class="hljs-string">&quot;===========&quot;</span>+num_b+<span class="hljs-string">&quot;:&quot;</span>+a[num_b]);<br><span class="hljs-built_in">document</span>.writeln(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS技巧</category>
      
      <category>break用法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS技巧</tag>
      
      <tag>break用法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现文字两端对齐</title>
    <link href="/2018/01/05/%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90/"/>
    <url>/2018/01/05/%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90/</url>
    
    <content type="html"><![CDATA[<p>&amp;#8194;&amp;#8194;今天要项目要实现下图这样的效果，以前一直是用&amp;nbsp，但是转念一想，应该不会是这么粗暴的方式，肯定有更优雅的方式来实现这个,于是百度了一下，发现了正确的姿势代码如下<span id="more"></span><img src="/2018/01/05/%E5%AE%9E%E7%8E%B0%E6%96%87%E5%AD%97%E4%B8%A4%E7%AB%AF%E5%AF%B9%E9%BD%90/QQ%E5%9B%BE%E7%89%8720171228165110.png" class="">：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: justify;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">span</span><span class="hljs-selector-pseudo">:after</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>:<span class="hljs-string">&#x27;.&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">input</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>昵称<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">style</span> = <span class="hljs-string">&#x27;width: 100px&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>电子邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">style</span> = <span class="hljs-string">&#x27;width: 100px;&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS相关</category>
      
      <category>排版</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS相关</tag>
      
      <tag>排版</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
